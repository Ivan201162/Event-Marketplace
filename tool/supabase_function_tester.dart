import 'dart:io';
import 'package:supabase_flutter/supabase_flutter.dart';

/// –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π Supabase
/// 
/// –ó–∞–ø—É—Å–∫: dart run tool/supabase_function_tester.dart
void main() async {
  print('üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π Supabase...');
  
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
    // –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase –ø—Ä–æ–µ–∫—Ç–∞!
    await Supabase.initialize(
      url: 'https://your-project-id.supabase.co', // –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® URL
      anonKey: 'your-anon-key-here', // –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® –ö–õ–Æ–ß
    );
    
    final supabase = Supabase.instance.client;
    
    // –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π
    print('\nüìã –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π');
    await _testGetProfiles(supabase);
    
    // –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–æ–≤ –Ω–µ–¥–µ–ª–∏
    print('\nüèÜ –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–æ–≤ –Ω–µ–¥–µ–ª–∏');
    await _testGetWeeklyLeaders(supabase);
    
    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
    print('\nüîó –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫');
    await _testFollows(supabase);
    
    // –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Ç–æ–≤
    print('\nüí¨ –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Ç–æ–≤');
    await _testGetChats(supabase);
    
    // –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    print('\nüì® –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π');
    await _testGetMessages(supabase);
    
    // –¢–µ—Å—Ç 6: –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    print('\nüîç –¢–µ—Å—Ç 6: –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    await _testSearchUsers(supabase);
    
    print('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
    
  } catch (e) {
    print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: $e');
    exit(1);
  }
}

/// –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π
Future<void> _testGetProfiles(SupabaseClient supabase) async {
  try {
    final profiles = await supabase.from('profiles').select();
    print('  ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: ${profiles.length}');
    
    if (profiles.isNotEmpty) {
      final firstProfile = profiles.first;
      print('  üìù –ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å: ${firstProfile['name']} (@${firstProfile['username']})');
    }
  } catch (e) {
    print('  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π: $e');
  }
}

/// –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–µ—Ä–æ–≤ –Ω–µ–¥–µ–ª–∏
Future<void> _testGetWeeklyLeaders(SupabaseClient supabase) async {
  try {
    // –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ get_weekly_leaders
    final leaders = await supabase.rpc<List<Map<String, dynamic>>>('get_weekly_leaders', params: {
      'city_filter': null,
      'limit_count': 5,
    });
    
    print('  ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ª–∏–¥–µ—Ä–æ–≤: ${leaders.length}');
    
    for (final leader in leaders as List<Map<String, dynamic>>) {
      print('  üèÖ ${leader['name']} - ${leader['score_7d']} –æ—á–∫–æ–≤');
    }
  } catch (e) {
    print('  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–µ—Ä–æ–≤: $e');
  }
}

/// –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
Future<void> _testFollows(SupabaseClient supabase) async {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏
    final follows = await supabase.from('follows').select();
    print('  ‚úÖ –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫: ${follows.length}');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    final followers = await supabase
        .from('follows')
        .select('profiles!inner(*)')
        .eq('following_id', 'user1');
    
    print('  üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —É user1: ${followers.length}');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    final following = await supabase
        .from('follows')
        .select('profiles!inner(*)')
        .eq('follower_id', 'user1');
    
    print('  ‚û°Ô∏è –ü–æ–¥–ø–∏—Å–æ–∫ —É user1: ${following.length}');
  } catch (e) {
    print('  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: $e');
  }
}

/// –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤
Future<void> _testGetChats(SupabaseClient supabase) async {
  try {
    final chats = await supabase.from('chats').select();
    print('  ‚úÖ –í—Å–µ–≥–æ —á–∞—Ç–æ–≤: ${chats.length}');
    
    // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–æ–≤
    final participants = await supabase.from('chat_participants').select();
    print('  üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–æ–≤: ${participants.length}');
  } catch (e) {
    print('  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤: $e');
  }
}

/// –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
Future<void> _testGetMessages(SupabaseClient supabase) async {
  try {
    final messages = await supabase
        .from('messages')
        .select('''
          id,
          text,
          created_at,
          sender_id,
          profiles!inner(username, name, avatar_url)
        ''')
        .eq('chat_id', 'chat1')
        .order('created_at', ascending: true);
    
    print('  ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–π –≤ chat1: ${messages.length}');
    
    for (final message in messages) {
      final sender = message['profiles'];
      print('  üí¨ ${sender['name']}: ${message['text']}');
    }
  } catch (e) {
    print('  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: $e');
  }
}

/// –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
Future<void> _testSearchUsers(SupabaseClient supabase) async {
  try {
    // –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
    final searchResults = await supabase
        .from('profiles')
        .select()
        .or('name.ilike.%–ê–ª–µ–∫—Å–∞–Ω–¥—Ä%,username.ilike.%alex%')
        .limit(5);
    
    print('  ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä": ${searchResults.length}');
    
    for (final user in searchResults) {
      print('  üîç ${user['name']} (@${user['username']})');
    }
  } catch (e) {
    print('  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: $e');
  }
}

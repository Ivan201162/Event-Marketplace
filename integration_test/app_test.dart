import 'package:event_marketplace_app/main.dart' as app;
import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:integration_test/integration_test.dart';

void main() {
  IntegrationTestWidgetsFlutterBinding.ensureInitialized();

  group('–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã Event Marketplace', () {
    testWidgets('–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤', (tester) async {
      app.main();
      await tester.pumpAndSettle();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å
      expect(
        find.text('–ù–∞–π–¥–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –¥–ª—è —Å–≤–æ–µ–≥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ üéâ'),
        findsOneWidget,
      );

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
      final searchField = find.byType(TextField);
      expect(searchField, findsOneWidget);

      // –í–≤–æ–¥–∏–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
      await tester.enterText(searchField, '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ');
      await tester.pumpAndSettle();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
      final searchResults = find.textContaining('–ù–∞–π–¥–µ–Ω–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤:');
      final noResults = find.text('–ù–∏–∫–æ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòÖ');

      expect(
        searchResults.evaluate().isNotEmpty || noResults.evaluate().isNotEmpty,
        isTrue,
      );

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –±—ã—Å—Ç—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
      expect(find.text('–§–æ—Ç–æ–≥—Ä–∞—Ñ—ã'), findsOneWidget);
      await tester.tap(find.text('–§–æ—Ç–æ–≥—Ä–∞—Ñ—ã'));
      await tester.pumpAndSettle();

      // –û—á–∏—â–∞–µ–º –ø–æ–∏—Å–∫
      final clearButton = find.byIcon(Icons.clear);
      if (clearButton.evaluate().isNotEmpty) {
        await tester.tap(clearButton);
        await tester.pumpAndSettle();
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
      expect(find.text('–ì–ª–∞–≤–Ω–∞—è'), findsOneWidget);
      expect(find.text('–õ–µ–Ω—Ç–∞'), findsOneWidget);
      expect(find.text('–ó–∞—è–≤–∫–∏'), findsOneWidget);
      expect(find.text('–ß–∞—Ç—ã'), findsOneWidget);
      expect(find.text('–ü—Ä–æ—Ñ–∏–ª—å'), findsOneWidget);
    });

    testWidgets('–¢–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥', (tester) async {
      app.main();
      await tester.pumpAndSettle();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      expect(
        find.text('–ù–∞–π–¥–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –¥–ª—è —Å–≤–æ–µ–≥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ üéâ'),
        findsOneWidget,
      );

      // –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
      await tester.pageBack();
      await tester.pumpAndSettle();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–∫—Ä—ã–ª–æ—Å—å
      final backMessage = find.text('–ù–∞–∂–º–∏—Ç–µ ¬´–ù–∞–∑–∞–¥¬ª –µ—â—ë —Ä–∞–∑, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏');
      expect(backMessage, findsOneWidget);

      // –í—Ç–æ—Ä–æ–µ –Ω–∞–∂–∞—Ç–∏–µ "–ù–∞–∑–∞–¥" –¥–æ–ª–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
      await tester.pageBack();
      await tester.pumpAndSettle();
    });

    testWidgets('–¢–µ—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É', (tester) async {
      app.main();
      await tester.pumpAndSettle();

      // –ò—â–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
      final specialistTile = find.byType(ListTile);
      if (specialistTile.evaluate().isNotEmpty) {
        await tester.tap(specialistTile.first);
        await tester.pumpAndSettle();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ—à–ª–∏ –∫ –ø—Ä–æ—Ñ–∏–ª—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
        // (—ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥")
        final backButton = find.byType(BackButton);
        expect(backButton, findsOneWidget);
      }
    });
  });
}

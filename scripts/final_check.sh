#!/bin/bash

# –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ Event Marketplace App
set -e

echo "üéØ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ Event Marketplace App"
echo "=================================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[‚úÖ]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[‚ö†Ô∏è]${NC} $1"
}

print_error() {
    echo -e "${RED}[‚ùå]${NC} $1"
}

print_info() {
    echo -e "${BLUE}[‚ÑπÔ∏è]${NC} $1"
}

# Counters
CHECKS_PASSED=0
CHECKS_FAILED=0
TOTAL_CHECKS=0

# Function to run a check
run_check() {
    local check_name="$1"
    local check_command="$2"
    
    ((TOTAL_CHECKS++))
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞: $check_name"
    
    if eval "$check_command" > /dev/null 2>&1; then
        print_status "$check_name - –ü–†–û–ô–î–ï–ù–ê"
        ((CHECKS_PASSED++))
    else
        print_error "$check_name - –ü–†–û–í–ê–õ–ï–ù–ê"
        ((CHECKS_FAILED++))
    fi
    echo ""
}

echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
run_check "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è lib/" "test -d lib"
run_check "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è test/" "test -d test"
run_check "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è scripts/" "test -d scripts"
run_check "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è .github/" "test -d .github"

echo "üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
run_check "pubspec.yaml" "test -f pubspec.yaml"
run_check "README.md" "test -f README.md"
run_check "PROJECT_REPORT.md" "test -f PROJECT_REPORT.md"
run_check "Dockerfile" "test -f Dockerfile"
run_check "docker-compose.yml" "test -f docker-compose.yml"
run_check "Makefile" "test -f Makefile"
run_check "firebase.json" "test -f firebase.json"

echo "üèóÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã lib/
run_check "–ú–æ–¥–µ–ª–∏" "test -d lib/models"
run_check "–°–µ—Ä–≤–∏—Å—ã" "test -d lib/services"
run_check "–≠–∫—Ä–∞–Ω—ã" "test -d lib/screens"
run_check "–í–∏–¥–∂–µ—Ç—ã" "test -d lib/widgets"
run_check "–ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã" "test -d lib/providers"

echo "üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
run_check "main.dart" "test -f lib/main.dart"
run_check "–ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" "test -f lib/models/user.dart"
run_check "–°–µ—Ä–≤–∏—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏" "test -f lib/services/auth_service.dart"
run_check "–ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω" "test -f lib/screens/home_screen.dart"

echo "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ CI/CD
run_check "GitHub Actions" "test -f .github/workflows/ci.yml"
run_check "VS Code –Ω–∞—Å—Ç—Ä–æ–π–∫–∏" "test -f .vscode/settings.json"
run_check "VS Code –∑–∞–ø—É—Å–∫" "test -f .vscode/launch.json"

echo "üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤
run_check "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã" "test -f test/integration_test.dart"
run_check "–°–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è" "test -f scripts/test.sh"
run_check "–°–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è" "test -f scripts/deploy.sh"

echo "üìä –ü–æ–¥—Å—á–µ—Ç —Ñ–∞–π–ª–æ–≤..."

# –ü–æ–¥—Å—á–µ—Ç —Ñ–∞–π–ª–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
MODELS_COUNT=$(find lib/models -name "*.dart" 2>/dev/null | wc -l)
SERVICES_COUNT=$(find lib/services -name "*.dart" 2>/dev/null | wc -l)
SCREENS_COUNT=$(find lib/screens -name "*.dart" 2>/dev/null | wc -l)
WIDGETS_COUNT=$(find lib/widgets -name "*.dart" 2>/dev/null | wc -l)
PROVIDERS_COUNT=$(find lib/providers -name "*.dart" 2>/dev/null | wc -l)

print_info "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:"
print_info "   –ú–æ–¥–µ–ª–∏: $MODELS_COUNT —Ñ–∞–π–ª–æ–≤"
print_info "   –°–µ—Ä–≤–∏—Å—ã: $SERVICES_COUNT —Ñ–∞–π–ª–æ–≤"
print_info "   –≠–∫—Ä–∞–Ω—ã: $SCREENS_COUNT —Ñ–∞–π–ª–æ–≤"
print_info "   –í–∏–¥–∂–µ—Ç—ã: $WIDGETS_COUNT —Ñ–∞–π–ª–æ–≤"
print_info "   –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã: $PROVIDERS_COUNT —Ñ–∞–π–ª–æ–≤"

echo ""
echo "üéØ –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç"
echo "=================="

print_info "–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: $TOTAL_CHECKS"
print_status "–ü—Ä–æ–π–¥–µ–Ω–æ: $CHECKS_PASSED"
if [ $CHECKS_FAILED -gt 0 ]; then
    print_error "–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: $CHECKS_FAILED"
else
    print_status "–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: $CHECKS_FAILED"
fi

echo ""
if [ $CHECKS_FAILED -eq 0 ]; then
    print_status "üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!"
    print_status "–ü—Ä–æ–µ–∫—Ç Event Marketplace App –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!"
    echo ""
    print_info "–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
    print_info "1. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã: make test"
    print_info "2. –°–æ–±—Ä–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: make build"
    print_info "3. –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å: make deploy"
    echo ""
    exit 0
else
    print_error "‚ùå –ù–ï–ö–û–¢–û–†–´–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–í–ê–õ–ï–ù–´!"
    print_error "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º."
    echo ""
    exit 1
fi

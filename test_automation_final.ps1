# –§–∏–Ω–∞–ª—å–Ω–æ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Event Marketplace
# –ê–≤—Ç–æ—Ä: AI Assistant
# –î–∞—Ç–∞: $(Get-Date)

Write-Host "=== –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï EVENT MARKETPLACE ===" -ForegroundColor Green
Write-Host "–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: $(Get-Date)" -ForegroundColor Yellow

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã ADB
function Invoke-ADBCommand {
    param([string]$Command)
    Write-Host "–í—ã–ø–æ–ª–Ω—è—é: adb $Command" -ForegroundColor Cyan
    $result = adb $Command 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úì –£—Å–ø–µ—à–Ω–æ" -ForegroundColor Green
        return $result
    } else {
        Write-Host "‚úó –û—à–∏–±–∫–∞: $result" -ForegroundColor Red
        return $null
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
function Test-Screen {
    param([string]$ScreenName, [string]$PackageName)
    Write-Host "`n--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: $ScreenName ---" -ForegroundColor Magenta
    
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    $result = Invoke-ADBCommand "shell monkey -p $PackageName 1"
    if ($result) {
        Start-Sleep -Seconds 3
        Write-Host "‚úì –≠–∫—Ä–∞–Ω $ScreenName –æ—Ç–∫—Ä—ã—Ç" -ForegroundColor Green
        return $true
    } else {
        Write-Host "‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —ç–∫—Ä–∞–Ω $ScreenName" -ForegroundColor Red
        return $false
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
function Test-Navigation {
    param([string]$PackageName)
    Write-Host "`n--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ ---" -ForegroundColor Magenta
    
    # –¢–µ—Å—Ç 1: –û—Ç–∫—Ä—ã—Ç–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
    $result1 = Test-Screen "–ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω" $PackageName
    Start-Sleep -Seconds 2
    
    # –¢–µ—Å—Ç 2: –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤–∫–ª–∞–¥–∫–∞–º
    Write-Host "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –≤–∫–ª–∞–¥–∫–∞–º..." -ForegroundColor Cyan
    $result2 = Invoke-ADBCommand "shell input tap 200 100"  # –¢–∞–ø –ø–æ –≤–∫–ª–∞–¥–∫–µ
    Start-Sleep -Seconds 1
    
    $result3 = Invoke-ADBCommand "shell input tap 400 100"  # –¢–∞–ø –ø–æ –¥—Ä—É–≥–æ–π –≤–∫–ª–∞–¥–∫–µ
    Start-Sleep -Seconds 1
    
    if ($result1) {
        Write-Host "‚úì –ù–∞–≤–∏–≥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç" -ForegroundColor Green
        return $true
    } else {
        Write-Host "‚úó –ü—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π" -ForegroundColor Red
        return $false
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞
function Test-Search {
    param([string]$PackageName)
    Write-Host "`n--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ ---" -ForegroundColor Magenta
    
    # –û—Ç–∫—Ä—ã—Ç–∏–µ —ç–∫—Ä–∞–Ω–∞ –ø–æ–∏—Å–∫–∞
    $result1 = Test-Screen "–ü–æ–∏—Å–∫" $PackageName
    Start-Sleep -Seconds 2
    
    # –¢–µ—Å—Ç –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
    Write-Host "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –≤ –ø–æ–∏—Å–∫..." -ForegroundColor Cyan
    $result2 = Invoke-ADBCommand "shell input tap 300 200"  # –¢–∞–ø –ø–æ –ø–æ–ª—é –ø–æ–∏—Å–∫–∞
    Start-Sleep -Seconds 1
    
    $result3 = Invoke-ADBCommand "shell input text '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ'"  # –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
    Start-Sleep -Seconds 2
    
    $result4 = Invoke-ADBCommand "shell input keyevent 66"  # Enter
    Start-Sleep -Seconds 3
    
    if ($result1) {
        Write-Host "‚úì –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç" -ForegroundColor Green
        return $true
    } else {
        Write-Host "‚úó –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–∏—Å–∫–æ–º" -ForegroundColor Red
        return $false
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
function Test-Profile {
    param([string]$PackageName)
    Write-Host "`n--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è ---" -ForegroundColor Magenta
    
    # –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    $result1 = Test-Screen "–ü—Ä–æ—Ñ–∏–ª—å" $PackageName
    Start-Sleep -Seconds 2
    
    # –¢–µ—Å—Ç –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
    Write-Host "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è..." -ForegroundColor Cyan
    $result2 = Invoke-ADBCommand "shell input swipe 300 500 300 200"  # –°–≤–∞–π–ø –≤–≤–µ—Ä—Ö
    Start-Sleep -Seconds 1
    
    $result3 = Invoke-ADBCommand "shell input swipe 300 200 300 500"  # –°–≤–∞–π–ø –≤–Ω–∏–∑
    Start-Sleep -Seconds 1
    
    if ($result1) {
        Write-Host "‚úì –ü—Ä–æ—Ñ–∏–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç" -ForegroundColor Green
        return $true
    } else {
        Write-Host "‚úó –ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ—Ñ–∏–ª–µ–º" -ForegroundColor Red
        return $false
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Ç–æ–≤
function Test-Chats {
    param([string]$PackageName)
    Write-Host "`n--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–æ–≤ ---" -ForegroundColor Magenta
    
    # –û—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–æ–≤
    $result1 = Test-Screen "–ß–∞—Ç—ã" $PackageName
    Start-Sleep -Seconds 2
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
    Write-Host "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞..." -ForegroundColor Cyan
    $result2 = Invoke-ADBCommand "shell input tap 500 100"  # –¢–∞–ø –ø–æ –∫–Ω–æ–ø–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è
    Start-Sleep -Seconds 2
    
    if ($result1) {
        Write-Host "‚úì –ß–∞—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç" -ForegroundColor Green
        return $true
    } else {
        Write-Host "‚úó –ü—Ä–æ–±–ª–µ–º—ã —Å —á–∞—Ç–∞–º–∏" -ForegroundColor Red
        return $false
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function Test-Auth {
    param([string]$PackageName)
    Write-Host "`n--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ---" -ForegroundColor Magenta
    
    # –û—Ç–∫—Ä—ã—Ç–∏–µ —ç–∫—Ä–∞–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    $result1 = Test-Screen "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" $PackageName
    Start-Sleep -Seconds 2
    
    # –¢–µ—Å—Ç –≤—Ö–æ–¥–∞ –∫–∞–∫ –≥–æ—Å—Ç—å
    Write-Host "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–∞ –∫–∞–∫ –≥–æ—Å—Ç—å..." -ForegroundColor Cyan
    $result2 = Invoke-ADBCommand "shell input tap 300 400"  # –¢–∞–ø –ø–æ –∫–Ω–æ–ø–∫–µ "–í–æ–π—Ç–∏ –∫–∞–∫ –≥–æ—Å—Ç—å"
    Start-Sleep -Seconds 3
    
    if ($result1) {
        Write-Host "‚úì –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç" -ForegroundColor Green
        return $true
    } else {
        Write-Host "‚úó –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π" -ForegroundColor Red
        return $false
    }
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function Start-FinalTesting {
    param([string]$PackageName = "com.eventmarketplace.app")
    
    Write-Host "`n=== –ù–ê–ß–ê–õ–û –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===" -ForegroundColor Green
    Write-Host "–ü–∞–∫–µ—Ç: $PackageName" -ForegroundColor Yellow
    
    $testResults = @{}
    
    # –¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    $testResults["–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"] = Test-Auth $PackageName
    
    # –¢–µ—Å—Ç 2: –ù–∞–≤–∏–≥–∞—Ü–∏—è
    $testResults["–ù–∞–≤–∏–≥–∞—Ü–∏—è"] = Test-Navigation $PackageName
    
    # –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫
    $testResults["–ü–æ–∏—Å–∫"] = Test-Search $PackageName
    
    # –¢–µ—Å—Ç 4: –ü—Ä–æ—Ñ–∏–ª—å
    $testResults["–ü—Ä–æ—Ñ–∏–ª—å"] = Test-Profile $PackageName
    
    # –¢–µ—Å—Ç 5: –ß–∞—Ç—ã
    $testResults["–ß–∞—Ç—ã"] = Test-Chats $PackageName
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    Write-Host "`n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===" -ForegroundColor Green
    $passedTests = 0
    $totalTests = $testResults.Count
    
    foreach ($test in $testResults.GetEnumerator()) {
        if ($test.Value) {
            Write-Host "‚úì $($test.Key): –ü–†–û–ô–î–ï–ù" -ForegroundColor Green
            $passedTests++
        } else {
            Write-Host "‚úó $($test.Key): –ü–†–û–í–ê–õ–ï–ù" -ForegroundColor Red
        }
    }
    
    Write-Host "`n=== –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===" -ForegroundColor Yellow
    Write-Host "–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: $passedTests –∏–∑ $totalTests" -ForegroundColor Cyan
    Write-Host "–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: $([math]::Round(($passedTests / $totalTests) * 100, 2))%" -ForegroundColor Cyan
    
    if ($passedTests -eq $totalTests) {
        Write-Host "`nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ü–†–ò–õ–û–ñ–ï–ù–ò–ï –ì–û–¢–û–í–û –ö –†–ï–õ–ò–ó–£!" -ForegroundColor Green
        return $true
    } else {
        Write-Host "`n‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´. –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê." -ForegroundColor Yellow
        return $false
    }
}

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
$success = Start-FinalTesting

Write-Host "`n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ===" -ForegroundColor Green
Write-Host "–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: $(Get-Date)" -ForegroundColor Yellow

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
$results = @{
    "–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞" = Get-Date
    "–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è" = Get-Date
    "–£—Å–ø–µ—Ö" = $success
    "–ü–∞–∫–µ—Ç" = "com.eventmarketplace.app"
}

$results | ConvertTo-Json | Out-File -FilePath "final_test_results.json" -Encoding UTF8
Write-Host "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ final_test_results.json" -ForegroundColor Cyan

if ($success) {
    exit 0
} else {
    exit 1
}

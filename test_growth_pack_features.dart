import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:uuid/uuid.dart';
import 'lib/services/referral_service.dart';
import 'lib/services/dynamic_pricing_service.dart';
import 'lib/services/smart_advertising_service.dart';
import 'lib/services/revenue_analytics_service.dart';
import 'lib/services/receipt_service.dart';
import 'lib/services/partnership_service.dart';
import 'lib/services/growth_mechanics_service.dart';
import 'lib/services/notification_service.dart';
import 'lib/models/referral_system.dart';
import 'lib/models/dynamic_pricing.dart';
import 'lib/models/smart_advertising.dart';
import 'lib/models/revenue_analytics.dart';
import 'lib/models/receipt_system.dart';
import 'lib/models/partnership_program.dart';
import 'lib/models/transaction.dart';
import 'lib/models/subscription_plan.dart';
import 'lib/models/promotion_boost.dart';
import 'lib/models/advertisement.dart';

/// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π Growth Pack
class GrowthPackTester {
  final ReferralService _referralService = ReferralService();
  final DynamicPricingService _pricingService = DynamicPricingService();
  final SmartAdvertisingService _adService = SmartAdvertisingService();
  final RevenueAnalyticsService _analyticsService = RevenueAnalyticsService();
  final ReceiptService _receiptService = ReceiptService();
  final PartnershipService _partnershipService = PartnershipService();
  final GrowthMechanicsService _growthService = GrowthMechanicsService();
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final Uuid _uuid = const Uuid();

  /// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
  Future<void> runAllTests() async {
    print('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Growth Pack...\n');

    try {
      await _testReferralSystem();
      await _testDynamicPricing();
      await _testSmartAdvertising();
      await _testRevenueAnalytics();
      await _testReceiptGeneration();
      await _testPartnershipProgram();
      await _testGrowthMechanics();
      await _testNotifications();
      await _testRealTimeUpdates();

      print('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã Growth Pack –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    } catch (e) {
      print('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: $e');
    }
  }

  /// –¢–µ—Å—Ç 1: –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
  Future<void> _testReferralSystem() async {
    print('üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...');

    try {
      // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º
      final testUserId = _uuid.v4();
      final referralCode = await _referralService.generateReferralCode();
      
      await _firestore.collection('users').doc(testUserId).set({
        'id': testUserId,
        'referralCode': referralCode,
        'createdAt': DateTime.now(),
      });

      print('‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ —Å–æ–∑–¥–∞–Ω: $referralCode');

      // –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É
      final referredUserId = _uuid.v4();
      await _referralService.registerReferral(
        referrerId: testUserId,
        referredId: referredUserId,
        referralCode: referralCode,
      );

      print('‚úÖ –†–µ—Ñ–µ—Ä–∞–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      final stats = await _referralService.getReferralStatsStream(testUserId).first;
      if (stats != null) {
        print('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${stats.invitedUsersCount} –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö');
      }

      print('‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ: $e\n');
    }
  }

  /// –¢–µ—Å—Ç 2: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
  Future<void> _testDynamicPricing() async {
    print('üí∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è...');

    try {
      // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
      final pricingRule = PricingRule(
        id: _uuid.v4(),
        serviceType: ServiceType.subscription,
        basePrice: 499.0,
        demandFactor: 1.2, // +20% –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ
        timeFactor: 1.1,   // +10% –≤ –ø–∏–∫–æ–≤–æ–µ –≤—Ä–µ–º—è
        regionFactor: 1.0, // –ë–∞–∑–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
        metadata: {
          'regionFactors': {
            'Moscow': 1.3,
            'SPB': 1.2,
            'Other': 1.0,
          }
        },
      );

      await _pricingService.setPricingRule(pricingRule);
      print('‚úÖ –ü—Ä–∞–≤–∏–ª–æ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–æ');

      // –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã
      final finalPrice = await _pricingService.calculateFinalPrice(
        serviceType: ServiceType.subscription,
        basePrice: 499.0,
        region: 'Moscow',
      );

      print('‚úÖ –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: 499‚ÇΩ, –§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${finalPrice.toStringAsFixed(2)}‚ÇΩ');

      print('‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–º —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏: $e\n');
    }
  }

  /// –¢–µ—Å—Ç 3: –£–º–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞
  Future<void> _testSmartAdvertising() async {
    print('üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–º–Ω–æ–π —Ä–µ–∫–ª–∞–º—ã...');

    try {
      // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ —É–º–Ω–æ–π —Ä–µ–∫–ª–∞–º—ã
      final adRule = SmartAdRule(
        id: _uuid.v4(),
        placementType: AdPlacementType.banner,
        targetCriterion: 'user_interest',
        criterionValue: 'music',
        priority: 5,
        maxImpressionsPerUser: 3,
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );

      await _adService.setSmartAdRule(adRule);
      print('‚úÖ –ü—Ä–∞–≤–∏–ª–æ —É–º–Ω–æ–π —Ä–µ–∫–ª–∞–º—ã —Å–æ–∑–¥–∞–Ω–æ');

      // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
      final testAd = Advertisement(
        id: _uuid.v4(),
        userId: _uuid.v4(),
        type: AdvertisementType.banner,
        contentUrl: 'https://example.com/music-ad.jpg',
        startDate: DateTime.now(),
        endDate: DateTime.now().add(const Duration(days: 30)),
        status: AdvertisementStatus.active,
        title: '–ú—É–∑—ã–∫–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ',
        description: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–º—É —Ñ–µ—Å—Ç–∏–≤–∞–ª—é!',
        targetAudience: {'interest': 'music'},
        budget: 10000.0,
        category: 'music',
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );

      await _firestore.collection('advertisements').doc(testAd.id).set(testAd.toMap());
      print('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ');

      // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π —Ä–µ–∫–ª–∞–º—ã
      final relevantAds = await _adService.getRelevantAdsForUser(
        _uuid.v4(),
        interests: ['music'],
        location: 'Moscow',
      );

      print('‚úÖ –ù–∞–π–¥–µ–Ω–æ ${relevantAds.length} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π');

      print('‚úÖ –£–º–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –≤ —É–º–Ω–æ–π —Ä–µ–∫–ª–∞–º–µ: $e\n');
    }
  }

  /// –¢–µ—Å—Ç 4: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–æ—Ö–æ–¥–æ–≤
  Future<void> _testRevenueAnalytics() async {
    print('üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–æ—Ö–æ–¥–æ–≤...');

    try {
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ—Ö–æ–¥–æ–≤
      await _analyticsService.logRevenueEvent(
        sourceType: RevenueSourceType.subscription,
        amount: 999.0,
        userId: _uuid.v4(),
        region: 'Moscow',
        category: 'pro',
      );

      await _analyticsService.logRevenueEvent(
        sourceType: RevenueSourceType.promotion,
        amount: 299.0,
        userId: _uuid.v4(),
        region: 'SPB',
        category: 'profile_boost',
      );

      print('‚úÖ –°–æ–±—ã—Ç–∏—è –¥–æ—Ö–æ–¥–æ–≤ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω—ã');

      // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      final stats = await _analyticsService.getRevenueStats(
        sourceType: RevenueSourceType.subscription,
      );

      print('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${stats.length} –∑–∞–ø–∏—Å–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏');

      // –†–∞—Å—á–µ—Ç LTV
      final testUserId = _uuid.v4();
      final ltv = await _analyticsService.calculateUserLTV(testUserId);
      print('‚úÖ LTV –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${ltv.toStringAsFixed(2)}‚ÇΩ');

      print('‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–æ—Ö–æ–¥–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ –¥–æ—Ö–æ–¥–æ–≤: $e\n');
    }
  }

  /// –¢–µ—Å—Ç 5: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ–∫–æ–≤
  Future<void> _testReceiptGeneration() async {
    print('üßæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ–∫–æ–≤...');

    try {
      // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      final testTransaction = Transaction(
        id: _uuid.v4(),
        userId: _uuid.v4(),
        type: TransactionType.subscription,
        amount: 999.0,
        currency: 'RUB',
        status: TransactionStatus.completed,
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
        paymentMethod: 'card',
        paymentProvider: 'yookassa',
        externalTransactionId: 'ext_${_uuid.v4()}',
      );

      // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —á–µ–∫–∞
      final receipt = await _receiptService.createReceiptRecord(testTransaction);
      print('‚úÖ –ó–∞–ø–∏—Å—å —á–µ–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ${receipt.id}');

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏—Å–∫–∞–ª—å–Ω–æ–≥–æ —á–µ–∫–∞
      final receiptUrl = await _receiptService.generateFiscalReceipt(receipt);
      if (receiptUrl != null) {
        print('‚úÖ –§–∏—Å–∫–∞–ª—å–Ω—ã–π —á–µ–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: $receiptUrl');
      }

      // –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–∫–∞ –ø–æ email
      await _receiptService.sendReceiptByEmail(receipt, 'test@example.com');
      print('‚úÖ –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ email');

      print('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ–∫–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ–∫–æ–≤: $e\n');
    }
  }

  /// –¢–µ—Å—Ç 6: –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
  Future<void> _testPartnershipProgram() async {
    print('ü§ù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã...');

    try {
      // –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Ç–Ω—ë—Ä–∞
      final partner = await _partnershipService.createPartner(
        name: 'Test Partner',
        code: 'TEST123',
        commissionRate: 0.15, // 15%
        contactEmail: 'partner@test.com',
      );

      print('‚úÖ –ü–∞—Ä—Ç–Ω—ë—Ä —Å–æ–∑–¥–∞–Ω: ${partner.name}');

      // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      final testTransaction = Transaction(
        id: _uuid.v4(),
        userId: _uuid.v4(),
        type: TransactionType.subscription,
        amount: 1000.0,
        currency: 'RUB',
        status: TransactionStatus.completed,
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
        metadata: {'partnerCode': 'TEST123'},
      );

      // –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏
      await _partnershipService.processPartnerCommission(
        partnerId: partner.id,
        transaction: testTransaction,
      );

      print('‚úÖ –ö–æ–º–∏—Å—Å–∏—è –ø–∞—Ä—Ç–Ω—ë—Ä—É –Ω–∞—á–∏—Å–ª–µ–Ω–∞');

      // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä—Ç–Ω—ë—Ä–∞
      final partnerStats = await _partnershipService.getPartnerStats(partner.id);
      print('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–∞: ${partnerStats['totalEarnings']}‚ÇΩ');

      print('‚úÖ –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ: $e\n');
    }
  }

  /// –¢–µ—Å—Ç 7: –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥
  Future<void> _testGrowthMechanics() async {
    print('üéÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏...');

    try {
      final testUserId = _uuid.v4();

      // –°–æ–∑–¥–∞–Ω–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞
      final challenge = await _growthService.createChallenge(
        title: '–ü—Ä–∏–≥–ª–∞—Å–∏ 5 –¥—Ä—É–∑–µ–π',
        description: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 5 –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏—Ç–µ –º–µ—Å—è—Ü Premium',
        type: ChallengeType.referral,
        targetValue: 5,
        reward: {'premiumDays': 30},
        expiresAt: DateTime.now().add(const Duration(days: 30)),
      );

      print('‚úÖ –ß–µ–ª–ª–µ–Ω–¥–∂ —Å–æ–∑–¥–∞–Ω: ${challenge.title}');

      // –£—á–∞—Å—Ç–∏–µ –≤ —á–µ–ª–ª–µ–Ω–¥–∂–µ
      await _growthService.joinChallenge(testUserId, challenge.id);
      print('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É');

      // –ü—Ä–æ–≥—Ä–µ—Å—Å –≤ —á–µ–ª–ª–µ–Ω–¥–∂–µ
      await _growthService.updateChallengeProgress(testUserId, challenge.id, 3);
      print('‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª—ë–Ω: 3/5');

      // –°–æ–∑–¥–∞–Ω–∏–µ A/B —Ç–µ—Å—Ç–∞
      final abTest = await _growthService.createABTest(
        name: 'Pricing Test',
        description: '–¢–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö —Ü–µ–Ω –Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏',
        variants: {
          'control': {'price': 499.0},
          'variant_a': {'price': 399.0},
        },
        trafficSplit: 0.5,
        startDate: DateTime.now(),
        endDate: DateTime.now().add(const Duration(days: 7)),
      );

      print('‚úÖ A/B —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω: ${abTest.name}');

      print('‚úÖ –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –≤ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏: $e\n');
    }
  }

  /// –¢–µ—Å—Ç 8: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  Future<void> _testNotifications() async {
    print('üîî –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');

    try {
      final testUserId = _uuid.v4();

      // –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ
      final testTransaction = Transaction(
        id: _uuid.v4(),
        userId: testUserId,
        type: TransactionType.subscription,
        amount: 999.0,
        currency: 'RUB',
        status: TransactionStatus.completed,
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );

      await NotificationService.sendPaymentNotification(testTransaction);
      print('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');

      // –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ
      final testSubscription = UserSubscription(
        id: _uuid.v4(),
        userId: testUserId,
        planId: 'pro_plan',
        planName: 'PRO',
        planType: SubscriptionPlanType.pro,
        price: 999.0,
        startDate: DateTime.now(),
        endDate: DateTime.now().add(const Duration(days: 30)),
        status: SubscriptionStatus.active,
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );

      await NotificationService.sendSubscriptionNotification(testSubscription);
      print('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');

      // –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–∏
      final testPromotion = PromotionBoost(
        id: _uuid.v4(),
        userId: testUserId,
        targetId: 'profile_123',
        targetType: PromotionTargetType.profile,
        startDate: DateTime.now(),
        endDate: DateTime.now().add(const Duration(days: 7)),
        status: PromotionStatus.active,
        priorityLevel: 1,
        price: 299.0,
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );

      await NotificationService.sendPromotionNotification(testPromotion);
      print('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');

      print('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö: $e\n');
    }
  }

  /// –¢–µ—Å—Ç 9: Real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  Future<void> _testRealTimeUpdates() async {
    print('‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...');

    try {
      // –¢–µ—Å—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      final testUserId = _uuid.v4();
      final subscription = _firestore
          .collection('transactions')
          .where('userId', isEqualTo: testUserId)
          .snapshots()
          .listen((snapshot) {
        print('üì° Real-time: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—É—á–µ–Ω–æ');
      });

      // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ real-time
      await _firestore.collection('transactions').add({
        'userId': testUserId,
        'type': 'subscription',
        'amount': 499.0,
        'status': 'completed',
        'createdAt': DateTime.now(),
      });

      // –ñ–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      await Future.delayed(const Duration(seconds: 2));

      // –û—Ç–º–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
      subscription.cancel();

      print('‚úÖ Real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –≤ real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö: $e\n');
    }
  }
}

/// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  
  final tester = GrowthPackTester();
  await tester.runAllTests();
}
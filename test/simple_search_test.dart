import 'package:event_marketplace_app/screens/home_screen.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_test/flutter_test.dart';

void main() {
  group('–¢–µ—Å—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ', () {
    testWidgets('–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏', (tester) async {
      await tester.pumpWidget(
        const ProviderScope(
          child: MaterialApp(
            home: HomeScreen(),
          ),
        ),
      );

      await tester.pumpAndSettle();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–∏—Å–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
      expect(find.text('–ù–∞–π–¥–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –¥–ª—è —Å–≤–æ–µ–≥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ üéâ'),
          findsOneWidget,);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
      expect(find.byType(TextField), findsOneWidget);
    });

    testWidgets('–ü—Ä–æ–≤–µ—Ä–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤', (tester) async {
      await tester.pumpWidget(
        const ProviderScope(
          child: MaterialApp(
            home: HomeScreen(),
          ),
        ),
      );

      await tester.pumpAndSettle();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
      expect(find.text('–í–µ–¥—É—â–∏–µ'), findsOneWidget);
      expect(find.text('–§–æ—Ç–æ–≥—Ä–∞—Ñ—ã'), findsOneWidget);
      expect(find.text('–î–∏–¥–∂–µ–∏'), findsOneWidget);
      expect(find.text('–û—Ñ–æ—Ä–º–∏—Ç–µ–ª–∏'), findsOneWidget);
      expect(find.text('–ö–∞–≤–µ—Ä-–≥—Ä—É–ø–ø—ã'), findsOneWidget);
      expect(find.text('–í–∏–¥–µ–æ–≥—Ä–∞—Ñ—ã'), findsOneWidget);
    });

    testWidgets('–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–æ–¥–∞ –≤ –ø–æ–∏—Å–∫–æ–≤—É—é —Å—Ç—Ä–æ–∫—É', (tester) async {
      await tester.pumpWidget(
        const ProviderScope(
          child: MaterialApp(
            home: HomeScreen(),
          ),
        ),
      );

      await tester.pumpAndSettle();

      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
      final searchField = find.byType(TextField);
      expect(searchField, findsOneWidget);

      // –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
      await tester.enterText(searchField, '—Ç–µ—Å—Ç');
      await tester.pumpAndSettle();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –≤–≤–µ–¥—ë–Ω
      expect(tester.widget<TextField>(searchField).controller?.text,
          equals('—Ç–µ—Å—Ç'),);
    });

    testWidgets('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–∏—Å–∫–∞', (tester) async {
      await tester.pumpWidget(
        const ProviderScope(
          child: MaterialApp(
            home: HomeScreen(),
          ),
        ),
      );

      await tester.pumpAndSettle();

      // –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –≤ –ø–æ–∏—Å–∫
      final searchField = find.byType(TextField);
      await tester.enterText(searchField, '—Ç–µ—Å—Ç');
      await tester.pumpAndSettle();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ—è–≤–∏–ª–∞—Å—å
      final clearButton = find.byIcon(Icons.clear);
      expect(clearButton, findsOneWidget);

      // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏
      await tester.tap(clearButton);
      await tester.pumpAndSettle();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ –æ—á–∏—Å—Ç–∏–ª–æ—Å—å
      expect(tester.widget<TextField>(searchField).controller?.text, isEmpty);
    });
  });
}

// Mocks generated by Mockito 5.4.6 from annotations
// in event_marketplace_app/test/mocks/service_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:cloud_firestore/cloud_firestore.dart' as _i8;
import 'package:event_marketplace_app/models/post.dart' as _i7;
import 'package:event_marketplace_app/models/search_filters.dart' as _i5;
import 'package:event_marketplace_app/models/specialist.dart' as _i4;
import 'package:event_marketplace_app/models/story.dart' as _i10;
import 'package:event_marketplace_app/services/post_service.dart' as _i6;
import 'package:event_marketplace_app/services/specialist_service.dart' as _i2;
import 'package:event_marketplace_app/services/story_service.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [SpecialistService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSpecialistService extends _i1.Mock implements _i2.SpecialistService {
  MockSpecialistService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Specialist>> getAllSpecialists() => (super.noSuchMethod(
        Invocation.method(
          #getAllSpecialists,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Specialist>>.value(<_i4.Specialist>[]),
      ) as _i3.Future<List<_i4.Specialist>>);

  @override
  _i3.Future<List<_i4.Specialist>> getSpecialistsByCity(String? city) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSpecialistsByCity,
          [city],
        ),
        returnValue: _i3.Future<List<_i4.Specialist>>.value(<_i4.Specialist>[]),
      ) as _i3.Future<List<_i4.Specialist>>);

  @override
  _i3.Future<List<_i4.Specialist>> getSpecialistsBySpecialization(
          String? specialization) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSpecialistsBySpecialization,
          [specialization],
        ),
        returnValue: _i3.Future<List<_i4.Specialist>>.value(<_i4.Specialist>[]),
      ) as _i3.Future<List<_i4.Specialist>>);

  @override
  _i3.Future<List<_i4.Specialist>> getTopSpecialists({int? limit = 10}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTopSpecialists,
          [],
          {#limit: limit},
        ),
        returnValue: _i3.Future<List<_i4.Specialist>>.value(<_i4.Specialist>[]),
      ) as _i3.Future<List<_i4.Specialist>>);

  @override
  _i3.Future<List<_i4.Specialist>> getTopSpecialistsByCity(
    String? city, {
    int? limit = 10,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTopSpecialistsByCity,
          [city],
          {#limit: limit},
        ),
        returnValue: _i3.Future<List<_i4.Specialist>>.value(<_i4.Specialist>[]),
      ) as _i3.Future<List<_i4.Specialist>>);

  @override
  _i3.Future<List<_i4.Specialist>> searchSpecialists(
          _i5.SearchFilters? filters) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchSpecialists,
          [filters],
        ),
        returnValue: _i3.Future<List<_i4.Specialist>>.value(<_i4.Specialist>[]),
      ) as _i3.Future<List<_i4.Specialist>>);

  @override
  _i3.Future<_i4.Specialist?> getSpecialistById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSpecialistById,
          [id],
        ),
        returnValue: _i3.Future<_i4.Specialist?>.value(),
      ) as _i3.Future<_i4.Specialist?>);

  @override
  _i3.Future<List<String>> getSpecializations() => (super.noSuchMethod(
        Invocation.method(
          #getSpecializations,
          [],
        ),
        returnValue: _i3.Future<List<String>>.value(<String>[]),
      ) as _i3.Future<List<String>>);

  @override
  _i3.Future<List<String>> getCities() => (super.noSuchMethod(
        Invocation.method(
          #getCities,
          [],
        ),
        returnValue: _i3.Future<List<String>>.value(<String>[]),
      ) as _i3.Future<List<String>>);

  @override
  _i3.Future<List<String>> getServices() => (super.noSuchMethod(
        Invocation.method(
          #getServices,
          [],
        ),
        returnValue: _i3.Future<List<String>>.value(<String>[]),
      ) as _i3.Future<List<String>>);

  @override
  _i3.Stream<List<_i4.Specialist>> getSpecialistsStream() =>
      (super.noSuchMethod(
        Invocation.method(
          #getSpecialistsStream,
          [],
        ),
        returnValue: _i3.Stream<List<_i4.Specialist>>.empty(),
      ) as _i3.Stream<List<_i4.Specialist>>);

  @override
  _i3.Stream<List<_i4.Specialist>> getSpecialistsByCityStream(String? city) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSpecialistsByCityStream,
          [city],
        ),
        returnValue: _i3.Stream<List<_i4.Specialist>>.empty(),
      ) as _i3.Stream<List<_i4.Specialist>>);
}

/// A class which mocks [PostService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostService extends _i1.Mock implements _i6.PostService {
  MockPostService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i7.Post>> getPosts({
    int? limit = 20,
    _i8.DocumentSnapshot<Object?>? lastDocument,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPosts,
          [],
          {
            #limit: limit,
            #lastDocument: lastDocument,
          },
        ),
        returnValue: _i3.Future<List<_i7.Post>>.value(<_i7.Post>[]),
      ) as _i3.Future<List<_i7.Post>>);

  @override
  _i3.Future<List<_i7.Post>> getPostsByUser(
    String? userId, {
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPostsByUser,
          [userId],
          {#limit: limit},
        ),
        returnValue: _i3.Future<List<_i7.Post>>.value(<_i7.Post>[]),
      ) as _i3.Future<List<_i7.Post>>);

  @override
  _i3.Future<List<_i7.Post>> getPostsByTags(
    List<String>? tags, {
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPostsByTags,
          [tags],
          {#limit: limit},
        ),
        returnValue: _i3.Future<List<_i7.Post>>.value(<_i7.Post>[]),
      ) as _i3.Future<List<_i7.Post>>);

  @override
  _i3.Future<String?> createPost({
    required String? authorId,
    String? text,
    String? mediaUrl,
    _i7.MediaType? mediaType,
    List<String>? tags,
    String? location,
    String? authorName,
    String? authorAvatarUrl,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createPost,
          [],
          {
            #authorId: authorId,
            #text: text,
            #mediaUrl: mediaUrl,
            #mediaType: mediaType,
            #tags: tags,
            #location: location,
            #authorName: authorName,
            #authorAvatarUrl: authorAvatarUrl,
          },
        ),
        returnValue: _i3.Future<String?>.value(),
      ) as _i3.Future<String?>);

  @override
  _i3.Future<bool> updatePost(
    String? postId,
    Map<String, dynamic>? updates,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updatePost,
          [
            postId,
            updates,
          ],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> deletePost(String? postId) => (super.noSuchMethod(
        Invocation.method(
          #deletePost,
          [postId],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> likePost(
    String? postId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #likePost,
          [
            postId,
            userId,
          ],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> unlikePost(
    String? postId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #unlikePost,
          [
            postId,
            userId,
          ],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<_i7.Post?> getPostById(String? postId) => (super.noSuchMethod(
        Invocation.method(
          #getPostById,
          [postId],
        ),
        returnValue: _i3.Future<_i7.Post?>.value(),
      ) as _i3.Future<_i7.Post?>);

  @override
  _i3.Future<String?> uploadMedia(
    String? filePath,
    String? fileName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadMedia,
          [
            filePath,
            fileName,
          ],
        ),
        returnValue: _i3.Future<String?>.value(),
      ) as _i3.Future<String?>);

  @override
  _i3.Future<List<_i7.Post>> getPopularPosts({int? limit = 10}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPopularPosts,
          [],
          {#limit: limit},
        ),
        returnValue: _i3.Future<List<_i7.Post>>.value(<_i7.Post>[]),
      ) as _i3.Future<List<_i7.Post>>);

  @override
  _i3.Future<List<_i7.Post>> getTrendingPosts({int? limit = 10}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTrendingPosts,
          [],
          {#limit: limit},
        ),
        returnValue: _i3.Future<List<_i7.Post>>.value(<_i7.Post>[]),
      ) as _i3.Future<List<_i7.Post>>);

  @override
  _i3.Future<List<_i7.Post>> searchPosts(
    String? query, {
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchPosts,
          [query],
          {#limit: limit},
        ),
        returnValue: _i3.Future<List<_i7.Post>>.value(<_i7.Post>[]),
      ) as _i3.Future<List<_i7.Post>>);

  @override
  _i3.Stream<List<_i7.Post>> getPostsStream({int? limit = 20}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPostsStream,
          [],
          {#limit: limit},
        ),
        returnValue: _i3.Stream<List<_i7.Post>>.empty(),
      ) as _i3.Stream<List<_i7.Post>>);

  @override
  _i3.Stream<List<_i7.Post>> getPostsByUserStream(
    String? userId, {
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPostsByUserStream,
          [userId],
          {#limit: limit},
        ),
        returnValue: _i3.Stream<List<_i7.Post>>.empty(),
      ) as _i3.Stream<List<_i7.Post>>);

  @override
  _i3.Future<Map<String, int>> getPostStats(String? postId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPostStats,
          [postId],
        ),
        returnValue: _i3.Future<Map<String, int>>.value(<String, int>{}),
      ) as _i3.Future<Map<String, int>>);

  @override
  _i3.Future<bool> incrementCommentCount(String? postId) => (super.noSuchMethod(
        Invocation.method(
          #incrementCommentCount,
          [postId],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> decrementCommentCount(String? postId) => (super.noSuchMethod(
        Invocation.method(
          #decrementCommentCount,
          [postId],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}

/// A class which mocks [StoryService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStoryService extends _i1.Mock implements _i9.StoryService {
  MockStoryService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i10.Story>> getStoriesBySpecialist(String? specialistId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStoriesBySpecialist,
          [specialistId],
        ),
        returnValue: _i3.Future<List<_i10.Story>>.value(<_i10.Story>[]),
      ) as _i3.Future<List<_i10.Story>>);

  @override
  _i3.Future<List<_i10.Story>> getAllActiveStories() => (super.noSuchMethod(
        Invocation.method(
          #getAllActiveStories,
          [],
        ),
        returnValue: _i3.Future<List<_i10.Story>>.value(<_i10.Story>[]),
      ) as _i3.Future<List<_i10.Story>>);

  @override
  _i3.Future<String> createStory(_i10.Story? story) => (super.noSuchMethod(
        Invocation.method(
          #createStory,
          [story],
        ),
        returnValue: _i3.Future<String>.value(_i11.dummyValue<String>(
          this,
          Invocation.method(
            #createStory,
            [story],
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<void> updateStory(
    String? storyId,
    Map<String, dynamic>? updates,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateStory,
          [
            storyId,
            updates,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteStory(String? storyId) => (super.noSuchMethod(
        Invocation.method(
          #deleteStory,
          [storyId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> markStoryAsViewed(
    String? storyId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #markStoryAsViewed,
          [
            storyId,
            userId,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> cleanupExpiredStories() => (super.noSuchMethod(
        Invocation.method(
          #cleanupExpiredStories,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i10.Story>> getUserStories(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserStories,
          [userId],
        ),
        returnValue: _i3.Future<List<_i10.Story>>.value(<_i10.Story>[]),
      ) as _i3.Future<List<_i10.Story>>);

  @override
  _i3.Future<void> likeStory(
    String? storyId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #likeStory,
          [
            storyId,
            userId,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

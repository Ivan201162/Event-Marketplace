// Mocks generated by Mockito 5.4.6 from annotations
// in event_marketplace_app/test/mocks/service_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:cloud_firestore/cloud_firestore.dart' as _i5;
import 'package:event_marketplace_app/models/post.dart' as _i7;
import 'package:event_marketplace_app/models/specialist.dart' as _i4;
import 'package:event_marketplace_app/models/story.dart' as _i10;
import 'package:event_marketplace_app/services/post_service.dart' as _i6;
import 'package:event_marketplace_app/services/specialist_service.dart' as _i2;
import 'package:event_marketplace_app/services/story_service.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [SpecialistService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSpecialistService extends _i1.Mock implements _i2.SpecialistService {
  MockSpecialistService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Specialist>> getAllSpecialists({bool? useCache = true}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllSpecialists,
          [],
          {#useCache: useCache},
        ),
        returnValue: _i3.Future<List<_i4.Specialist>>.value(<_i4.Specialist>[]),
      ) as _i3.Future<List<_i4.Specialist>>);

  @override
  _i3.Stream<List<_i4.Specialist>> getAllSpecialistsStream() => (super.noSuchMethod(
        Invocation.method(
          #getAllSpecialistsStream,
          [],
        ),
        returnValue: _i3.Stream<List<_i4.Specialist>>.empty(),
      ) as _i3.Stream<List<_i4.Specialist>>);

  @override
  _i3.Future<List<String>> getCities() => (super.noSuchMethod(
        Invocation.method(
          #getCities,
          [],
        ),
        returnValue: _i3.Future<List<String>>.value(<String>[]),
      ) as _i3.Future<List<String>>);

  @override
  _i3.Future<_i4.Specialist?> getSpecialistById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getSpecialistById,
          [id],
        ),
        returnValue: _i3.Future<_i4.Specialist?>.value(),
      ) as _i3.Future<_i4.Specialist?>);

  @override
  _i3.Future<List<_i4.Specialist>> searchSpecialists({
    String? query,
    _i4.SpecialistCategory? category,
    double? minPrice,
    double? maxPrice,
    double? minRating,
    String? location,
    List<String>? availableDates,
    bool? useDebounce = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchSpecialists,
          [],
          {
            #query: query,
            #category: category,
            #minPrice: minPrice,
            #maxPrice: maxPrice,
            #minRating: minRating,
            #location: location,
            #availableDates: availableDates,
            #useDebounce: useDebounce,
          },
        ),
        returnValue: _i3.Future<List<_i4.Specialist>>.value(<_i4.Specialist>[]),
      ) as _i3.Future<List<_i4.Specialist>>);

  @override
  _i3.Future<List<_i4.Specialist>> getSpecialistsByCategory(_i4.SpecialistCategory? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSpecialistsByCategory,
          [category],
        ),
        returnValue: _i3.Future<List<_i4.Specialist>>.value(<_i4.Specialist>[]),
      ) as _i3.Future<List<_i4.Specialist>>);

  @override
  _i3.Future<List<_i4.Specialist>> getRecommendedSpecialists(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #getRecommendedSpecialists,
          [userId],
        ),
        returnValue: _i3.Future<List<_i4.Specialist>>.value(<_i4.Specialist>[]),
      ) as _i3.Future<List<_i4.Specialist>>);

  @override
  _i3.Future<String?> createSpecialist(_i4.Specialist? specialist) => (super.noSuchMethod(
        Invocation.method(
          #createSpecialist,
          [specialist],
        ),
        returnValue: _i3.Future<String?>.value(),
      ) as _i3.Future<String?>);

  @override
  _i3.Future<bool> updateSpecialist(
    String? id,
    Map<String, dynamic>? updates,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateSpecialist,
          [
            id,
            updates,
          ],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> deleteSpecialist(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteSpecialist,
          [id],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<List<_i4.Specialist>> getSpecialistsPaginated({
    int? limit = 20,
    _i5.DocumentSnapshot<Object?>? lastDocument,
    _i4.SpecialistCategory? category,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSpecialistsPaginated,
          [],
          {
            #limit: limit,
            #lastDocument: lastDocument,
            #category: category,
          },
        ),
        returnValue: _i3.Future<List<_i4.Specialist>>.value(<_i4.Specialist>[]),
      ) as _i3.Future<List<_i4.Specialist>>);

  @override
  _i3.Future<List<_i4.Specialist>> filterSpecialists({
    double? minPrice,
    double? maxPrice,
    double? minRating,
    DateTime? date,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #filterSpecialists,
          [],
          {
            #minPrice: minPrice,
            #maxPrice: maxPrice,
            #minRating: minRating,
            #date: date,
          },
        ),
        returnValue: _i3.Future<List<_i4.Specialist>>.value(<_i4.Specialist>[]),
      ) as _i3.Future<List<_i4.Specialist>>);

  @override
  _i3.Future<Map<String, dynamic>> getSpecialistsStats() => (super.noSuchMethod(
        Invocation.method(
          #getSpecialistsStats,
          [],
        ),
        returnValue: _i3.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i3.Future<Map<String, dynamic>>);

  @override
  _i3.Stream<List<Map<String, dynamic>>> getSpecialistFeed(String? specialistId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSpecialistFeed,
          [specialistId],
        ),
        returnValue: _i3.Stream<List<Map<String, dynamic>>>.empty(),
      ) as _i3.Stream<List<Map<String, dynamic>>>);

  @override
  _i3.Stream<_i4.Specialist?> getSpecialistStream(String? specialistId) => (super.noSuchMethod(
        Invocation.method(
          #getSpecialistStream,
          [specialistId],
        ),
        returnValue: _i3.Stream<_i4.Specialist?>.empty(),
      ) as _i3.Stream<_i4.Specialist?>);

  @override
  _i3.Stream<_i4.Specialist?> getSpecialistByUserIdStream(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #getSpecialistByUserIdStream,
          [userId],
        ),
        returnValue: _i3.Stream<_i4.Specialist?>.empty(),
      ) as _i3.Stream<_i4.Specialist?>);

  @override
  _i3.Future<List<_i4.Specialist>> getTopSpecialists({int? limit = 10}) => (super.noSuchMethod(
        Invocation.method(
          #getTopSpecialists,
          [],
          {#limit: limit},
        ),
        returnValue: _i3.Future<List<_i4.Specialist>>.value(<_i4.Specialist>[]),
      ) as _i3.Future<List<_i4.Specialist>>);

  @override
  _i3.Future<List<_i4.Specialist>> getWeeklyLeaders({int? limit = 10}) => (super.noSuchMethod(
        Invocation.method(
          #getWeeklyLeaders,
          [],
          {#limit: limit},
        ),
        returnValue: _i3.Future<List<_i4.Specialist>>.value(<_i4.Specialist>[]),
      ) as _i3.Future<List<_i4.Specialist>>);

  @override
  _i3.Stream<List<_i4.Specialist>> searchSpecialistsStream(Map<String, dynamic>? filters) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchSpecialistsStream,
          [filters],
        ),
        returnValue: _i3.Stream<List<_i4.Specialist>>.empty(),
      ) as _i3.Stream<List<_i4.Specialist>>);

  @override
  _i3.Future<bool> isSpecialistAvailableOnDate(
    String? specialistId,
    DateTime? date,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #isSpecialistAvailableOnDate,
          [
            specialistId,
            date,
          ],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<List<Map<String, dynamic>>> getAvailableTimeSlots(
    String? specialistId,
    DateTime? date,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAvailableTimeSlots,
          [
            specialistId,
            date,
          ],
        ),
        returnValue: _i3.Future<List<Map<String, dynamic>>>.value(<Map<String, dynamic>>[]),
      ) as _i3.Future<List<Map<String, dynamic>>>);
}

/// A class which mocks [PostService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostService extends _i1.Mock implements _i6.PostService {
  MockPostService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i7.Post>> getPostsBySpecialist(String? specialistId) => (super.noSuchMethod(
        Invocation.method(
          #getPostsBySpecialist,
          [specialistId],
        ),
        returnValue: _i3.Future<List<_i7.Post>>.value(<_i7.Post>[]),
      ) as _i3.Future<List<_i7.Post>>);

  @override
  _i3.Future<List<_i7.Post>> getAllPosts() => (super.noSuchMethod(
        Invocation.method(
          #getAllPosts,
          [],
        ),
        returnValue: _i3.Future<List<_i7.Post>>.value(<_i7.Post>[]),
      ) as _i3.Future<List<_i7.Post>>);

  @override
  _i3.Future<String> createPost(_i7.Post? post) => (super.noSuchMethod(
        Invocation.method(
          #createPost,
          [post],
        ),
        returnValue: _i3.Future<String>.value(_i8.dummyValue<String>(
          this,
          Invocation.method(
            #createPost,
            [post],
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<void> updatePost(
    String? postId,
    Map<String, dynamic>? updates,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updatePost,
          [
            postId,
            updates,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deletePost(String? postId) => (super.noSuchMethod(
        Invocation.method(
          #deletePost,
          [postId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> likePost(
    String? postId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #likePost,
          [
            postId,
            userId,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [StoryService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStoryService extends _i1.Mock implements _i9.StoryService {
  MockStoryService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i10.Story>> getStoriesBySpecialist(String? specialistId) => (super.noSuchMethod(
        Invocation.method(
          #getStoriesBySpecialist,
          [specialistId],
        ),
        returnValue: _i3.Future<List<_i10.Story>>.value(<_i10.Story>[]),
      ) as _i3.Future<List<_i10.Story>>);

  @override
  _i3.Future<List<_i10.Story>> getAllActiveStories() => (super.noSuchMethod(
        Invocation.method(
          #getAllActiveStories,
          [],
        ),
        returnValue: _i3.Future<List<_i10.Story>>.value(<_i10.Story>[]),
      ) as _i3.Future<List<_i10.Story>>);

  @override
  _i3.Future<String> createStory(_i10.Story? story) => (super.noSuchMethod(
        Invocation.method(
          #createStory,
          [story],
        ),
        returnValue: _i3.Future<String>.value(_i8.dummyValue<String>(
          this,
          Invocation.method(
            #createStory,
            [story],
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<void> updateStory(
    String? storyId,
    Map<String, dynamic>? updates,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateStory,
          [
            storyId,
            updates,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteStory(String? storyId) => (super.noSuchMethod(
        Invocation.method(
          #deleteStory,
          [storyId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> markStoryAsViewed(
    String? storyId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #markStoryAsViewed,
          [
            storyId,
            userId,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> cleanupExpiredStories() => (super.noSuchMethod(
        Invocation.method(
          #cleanupExpiredStories,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i10.Story>> getUserStories(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #getUserStories,
          [userId],
        ),
        returnValue: _i3.Future<List<_i10.Story>>.value(<_i10.Story>[]),
      ) as _i3.Future<List<_i10.Story>>);

  @override
  _i3.Future<void> likeStory(
    String? storyId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #likeStory,
          [
            storyId,
            userId,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

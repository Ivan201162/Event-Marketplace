// Mocks generated by Mockito 5.4.6 from annotations
// in event_marketplace_app/test/mocks/service_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:cloud_firestore/cloud_firestore.dart' as _i7;
import 'package:event_marketplace_app/models/post.dart' as _i2;
import 'package:event_marketplace_app/models/specialist.dart' as _i6;
import 'package:event_marketplace_app/models/story.dart' as _i3;
import 'package:event_marketplace_app/services/post_service.dart' as _i8;
import 'package:event_marketplace_app/services/specialist_service.dart' as _i4;
import 'package:event_marketplace_app/services/story_service.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakePost_0 extends _i1.SmartFake implements _i2.Post {
  _FakePost_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStory_1 extends _i1.SmartFake implements _i3.Story {
  _FakeStory_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SpecialistService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSpecialistService extends _i1.Mock implements _i4.SpecialistService {
  MockSpecialistService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i6.Specialist>> getAllSpecialists() => (super.noSuchMethod(
        Invocation.method(
          #getAllSpecialists,
          [],
        ),
        returnValue: _i5.Future<List<_i6.Specialist>>.value(<_i6.Specialist>[]),
      ) as _i5.Future<List<_i6.Specialist>>);

  @override
  _i5.Stream<List<_i6.Specialist>> getAllSpecialistsStream() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllSpecialistsStream,
          [],
        ),
        returnValue: _i5.Stream<List<_i6.Specialist>>.empty(),
      ) as _i5.Stream<List<_i6.Specialist>>);

  @override
  _i5.Future<List<String>> getCities() => (super.noSuchMethod(
        Invocation.method(
          #getCities,
          [],
        ),
        returnValue: _i5.Future<List<String>>.value(<String>[]),
      ) as _i5.Future<List<String>>);

  @override
  _i5.Future<_i6.Specialist?> getSpecialistById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSpecialistById,
          [id],
        ),
        returnValue: _i5.Future<_i6.Specialist?>.value(),
      ) as _i5.Future<_i6.Specialist?>);

  @override
  _i5.Future<List<_i6.Specialist>> searchSpecialists({
    String? query,
    _i6.SpecialistCategory? category,
    double? minPrice,
    double? maxPrice,
    double? minRating,
    String? location,
    List<String>? availableDates,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchSpecialists,
          [],
          {
            #query: query,
            #category: category,
            #minPrice: minPrice,
            #maxPrice: maxPrice,
            #minRating: minRating,
            #location: location,
            #availableDates: availableDates,
          },
        ),
        returnValue: _i5.Future<List<_i6.Specialist>>.value(<_i6.Specialist>[]),
      ) as _i5.Future<List<_i6.Specialist>>);

  @override
  _i5.Future<List<_i6.Specialist>> getSpecialistsByCategory(
          _i6.SpecialistCategory? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSpecialistsByCategory,
          [category],
        ),
        returnValue: _i5.Future<List<_i6.Specialist>>.value(<_i6.Specialist>[]),
      ) as _i5.Future<List<_i6.Specialist>>);

  @override
  _i5.Future<List<_i6.Specialist>> getRecommendedSpecialists(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRecommendedSpecialists,
          [userId],
        ),
        returnValue: _i5.Future<List<_i6.Specialist>>.value(<_i6.Specialist>[]),
      ) as _i5.Future<List<_i6.Specialist>>);

  @override
  _i5.Future<String?> createSpecialist(_i6.Specialist? specialist) =>
      (super.noSuchMethod(
        Invocation.method(
          #createSpecialist,
          [specialist],
        ),
        returnValue: _i5.Future<String?>.value(),
      ) as _i5.Future<String?>);

  @override
  _i5.Future<bool> updateSpecialist(
    String? id,
    Map<String, dynamic>? updates,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateSpecialist,
          [
            id,
            updates,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> deleteSpecialist(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteSpecialist,
          [id],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<List<_i6.Specialist>> getSpecialistsPaginated({
    int? limit = 20,
    _i7.DocumentSnapshot<Object?>? lastDocument,
    _i6.SpecialistCategory? category,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSpecialistsPaginated,
          [],
          {
            #limit: limit,
            #lastDocument: lastDocument,
            #category: category,
          },
        ),
        returnValue: _i5.Future<List<_i6.Specialist>>.value(<_i6.Specialist>[]),
      ) as _i5.Future<List<_i6.Specialist>>);

  @override
  _i5.Future<List<_i6.Specialist>> filterSpecialists({
    double? minPrice,
    double? maxPrice,
    double? minRating,
    DateTime? date,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #filterSpecialists,
          [],
          {
            #minPrice: minPrice,
            #maxPrice: maxPrice,
            #minRating: minRating,
            #date: date,
          },
        ),
        returnValue: _i5.Future<List<_i6.Specialist>>.value(<_i6.Specialist>[]),
      ) as _i5.Future<List<_i6.Specialist>>);

  @override
  _i5.Future<Map<String, dynamic>> getSpecialistsStats() => (super.noSuchMethod(
        Invocation.method(
          #getSpecialistsStats,
          [],
        ),
        returnValue:
            _i5.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i5.Future<Map<String, dynamic>>);
}

/// A class which mocks [PostService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostService extends _i1.Mock implements _i8.PostService {
  MockPostService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i2.Post>> getSpecialistPosts(String? specialistId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSpecialistPosts,
          [specialistId],
        ),
        returnValue: _i5.Future<List<_i2.Post>>.value(<_i2.Post>[]),
      ) as _i5.Future<List<_i2.Post>>);

  @override
  _i5.Stream<List<_i2.Post>> getSpecialistPostsStream(String? specialistId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSpecialistPostsStream,
          [specialistId],
        ),
        returnValue: _i5.Stream<List<_i2.Post>>.empty(),
      ) as _i5.Stream<List<_i2.Post>>);

  @override
  _i5.Future<_i2.Post> createPost({
    required String? specialistId,
    String? text,
    required List<String>? mediaUrls,
    Map<String, dynamic>? metadata,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createPost,
          [],
          {
            #specialistId: specialistId,
            #text: text,
            #mediaUrls: mediaUrls,
            #metadata: metadata,
          },
        ),
        returnValue: _i5.Future<_i2.Post>.value(_FakePost_0(
          this,
          Invocation.method(
            #createPost,
            [],
            {
              #specialistId: specialistId,
              #text: text,
              #mediaUrls: mediaUrls,
              #metadata: metadata,
            },
          ),
        )),
      ) as _i5.Future<_i2.Post>);

  @override
  _i5.Future<void> updatePost(
    String? postId, {
    String? text,
    List<String>? mediaUrls,
    Map<String, dynamic>? metadata,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updatePost,
          [postId],
          {
            #text: text,
            #mediaUrls: mediaUrls,
            #metadata: metadata,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deletePost(String? postId) => (super.noSuchMethod(
        Invocation.method(
          #deletePost,
          [postId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> toggleLike(
    String? postId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #toggleLike,
          [
            postId,
            userId,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<bool> isPostLiked(
    String? postId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #isPostLiked,
          [
            postId,
            userId,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<List<_i2.Post>> getFeedPosts({int? limit = 20}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFeedPosts,
          [],
          {#limit: limit},
        ),
        returnValue: _i5.Future<List<_i2.Post>>.value(<_i2.Post>[]),
      ) as _i5.Future<List<_i2.Post>>);

  @override
  _i5.Stream<List<_i2.Post>> getFeedStream({int? limit = 20}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFeedStream,
          [],
          {#limit: limit},
        ),
        returnValue: _i5.Stream<List<_i2.Post>>.empty(),
      ) as _i5.Stream<List<_i2.Post>>);
}

/// A class which mocks [StoryService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStoryService extends _i1.Mock implements _i9.StoryService {
  MockStoryService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i3.Story>> getSpecialistStories(String? specialistId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSpecialistStories,
          [specialistId],
        ),
        returnValue: _i5.Future<List<_i3.Story>>.value(<_i3.Story>[]),
      ) as _i5.Future<List<_i3.Story>>);

  @override
  _i5.Stream<List<_i3.Story>> getSpecialistStoriesStream(
          String? specialistId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSpecialistStoriesStream,
          [specialistId],
        ),
        returnValue: _i5.Stream<List<_i3.Story>>.empty(),
      ) as _i5.Stream<List<_i3.Story>>);

  @override
  _i5.Future<List<_i3.Story>> getAllActiveStories() => (super.noSuchMethod(
        Invocation.method(
          #getAllActiveStories,
          [],
        ),
        returnValue: _i5.Future<List<_i3.Story>>.value(<_i3.Story>[]),
      ) as _i5.Future<List<_i3.Story>>);

  @override
  _i5.Future<_i3.Story> createStory({
    required String? specialistId,
    required String? mediaUrl,
    String? text,
    Map<String, dynamic>? metadata,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createStory,
          [],
          {
            #specialistId: specialistId,
            #mediaUrl: mediaUrl,
            #text: text,
            #metadata: metadata,
          },
        ),
        returnValue: _i5.Future<_i3.Story>.value(_FakeStory_1(
          this,
          Invocation.method(
            #createStory,
            [],
            {
              #specialistId: specialistId,
              #mediaUrl: mediaUrl,
              #text: text,
              #metadata: metadata,
            },
          ),
        )),
      ) as _i5.Future<_i3.Story>);

  @override
  _i5.Future<void> markStoryAsViewed(
    String? storyId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #markStoryAsViewed,
          [
            storyId,
            userId,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteStory(String? storyId) => (super.noSuchMethod(
        Invocation.method(
          #deleteStory,
          [storyId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteExpiredStories() => (super.noSuchMethod(
        Invocation.method(
          #deleteExpiredStories,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<Map<String, int>> getStoryStats(String? specialistId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStoryStats,
          [specialistId],
        ),
        returnValue: _i5.Future<Map<String, int>>.value(<String, int>{}),
      ) as _i5.Future<Map<String, int>>);

  @override
  _i5.Future<bool> hasViewedStory(
    String? storyId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #hasViewedStory,
          [
            storyId,
            userId,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<List<_i3.Story>> getAllStories() => (super.noSuchMethod(
        Invocation.method(
          #getAllStories,
          [],
        ),
        returnValue: _i5.Future<List<_i3.Story>>.value(<_i3.Story>[]),
      ) as _i5.Future<List<_i3.Story>>);

  @override
  _i5.Future<List<_i3.Story>> getUserStories(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserStories,
          [userId],
        ),
        returnValue: _i5.Future<List<_i3.Story>>.value(<_i3.Story>[]),
      ) as _i5.Future<List<_i3.Story>>);

  @override
  _i5.Future<bool> hasViewed(
    String? storyId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #hasViewed,
          [
            storyId,
            userId,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<void> likeStory(
    String? storyId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #likeStory,
          [
            storyId,
            userId,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

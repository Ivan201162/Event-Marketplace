import 'package:event_marketplace_app/models/specialist.dart';
import 'package:event_marketplace_app/models/booking.dart';
import 'package:event_marketplace_app/models/payment.dart';
import 'package:event_marketplace_app/models/chat.dart';
import 'package:event_marketplace_app/models/notification.dart';
import 'package:event_marketplace_app/models/review.dart';
import 'package:event_marketplace_app/models/analytics.dart';
import 'package:event_marketplace_app/models/user.dart';
import 'package:event_marketplace_app/models/specialist_schedule.dart';

class TestData {
  // Test Specialists
  static List<Specialist> get testSpecialists => [
    Specialist(
      id: 'specialist_1',
      userId: 'user_1',
      name: 'Анна Петрова',
      description: 'Профессиональный фотограф с 5-летним опытом',
      category: SpecialistCategory.photographer,
      subcategories: ['свадебная фотография', 'портретная съемка'],
      experienceLevel: ExperienceLevel.advanced,
      yearsOfExperience: 5,
      hourlyRate: 3000.0,
      minBookingHours: 2.0,
      maxBookingHours: 12.0,
      serviceAreas: ['Москва', 'Московская область'],
      languages: ['Русский', 'Английский'],
      equipment: ['Canon EOS R5', 'Sony A7R IV'],
      portfolio: ['https://example.com/portfolio1', 'https://example.com/portfolio2'],
      isAvailable: true,
      isVerified: true,
      rating: 4.8,
      reviewCount: 47,
      createdAt: DateTime.now().subtract(Duration(days: 30)),
      updatedAt: DateTime.now(),
    ),
    Specialist(
      id: 'specialist_2',
      userId: 'user_2',
      name: 'Михаил Иванов',
      description: 'Опытный видеограф и монтажер',
      category: SpecialistCategory.videographer,
      subcategories: ['свадебная видеосъемка', 'корпоративные видео'],
      experienceLevel: ExperienceLevel.expert,
      yearsOfExperience: 8,
      hourlyRate: 4000.0,
      minBookingHours: 3.0,
      maxBookingHours: 10.0,
      serviceAreas: ['Санкт-Петербург'],
      languages: ['Русский'],
      equipment: ['Sony FX6', 'DJI Mavic 3'],
      portfolio: ['https://example.com/portfolio3'],
      isAvailable: true,
      isVerified: true,
      rating: 4.9,
      reviewCount: 32,
      createdAt: DateTime.now().subtract(Duration(days: 60)),
      updatedAt: DateTime.now(),
    ),
    Specialist(
      id: 'specialist_3',
      userId: 'user_3',
      name: 'Елена Смирнова',
      description: 'Творческий декоратор и флорист',
      category: SpecialistCategory.decorator,
      subcategories: ['свадебный декор', 'корпоративные мероприятия'],
      experienceLevel: ExperienceLevel.intermediate,
      yearsOfExperience: 3,
      hourlyRate: 2500.0,
      minBookingHours: 4.0,
      maxBookingHours: 8.0,
      serviceAreas: ['Москва'],
      languages: ['Русский'],
      equipment: ['Цветы', 'Декор', 'Инструменты'],
      portfolio: ['https://example.com/portfolio4'],
      isAvailable: false,
      isVerified: false,
      rating: 4.5,
      reviewCount: 18,
      createdAt: DateTime.now().subtract(Duration(days: 15)),
      updatedAt: DateTime.now(),
    ),
  ];

  // Test Bookings
  static List<Booking> get testBookings => [
    Booking(
      id: 'booking_1',
      customerId: 'customer_1',
      specialistId: 'specialist_1',
      eventName: 'Свадебная фотосессия',
      eventDescription: 'Свадебная церемония в парке',
      eventLocation: 'Парк Сокольники, Москва',
      eventDate: DateTime.now().add(Duration(days: 7)),
      duration: Duration(hours: 6),
      totalPrice: 18000.0,
      status: BookingStatus.pending,
      customerPhone: '+7 (999) 123-45-67',
      customerEmail: 'customer@example.com',
      specialRequests: 'Нужна съемка на закате',
      createdAt: DateTime.now().subtract(Duration(days: 2)),
      updatedAt: DateTime.now().subtract(Duration(days: 2)),
    ),
    Booking(
      id: 'booking_2',
      customerId: 'customer_2',
      specialistId: 'specialist_2',
      eventName: 'Корпоративное видео',
      eventDescription: 'Съемка презентации продукта',
      eventLocation: 'Офис компании, СПб',
      eventDate: DateTime.now().add(Duration(days: 14)),
      duration: Duration(hours: 4),
      totalPrice: 16000.0,
      status: BookingStatus.confirmed,
      customerPhone: '+7 (812) 987-65-43',
      customerEmail: 'corporate@example.com',
      specialRequests: 'Нужен монтаж в течение недели',
      createdAt: DateTime.now().subtract(Duration(days: 5)),
      updatedAt: DateTime.now().subtract(Duration(days: 1)),
    ),
    Booking(
      id: 'booking_3',
      customerId: 'customer_3',
      specialistId: 'specialist_3',
      eventName: 'День рождения',
      eventDescription: 'Декор для детского дня рождения',
      eventLocation: 'Кафе, Москва',
      eventDate: DateTime.now().add(Duration(days: 3)),
      duration: Duration(hours: 3),
      totalPrice: 7500.0,
      status: BookingStatus.rejected,
      customerPhone: '+7 (495) 555-12-34',
      customerEmail: 'birthday@example.com',
      specialRequests: 'Тема: принцессы',
      createdAt: DateTime.now().subtract(Duration(days: 1)),
      updatedAt: DateTime.now().subtract(Duration(hours: 12)),
    ),
  ];

  // Test Payments
  static List<Payment> get testPayments => [
    Payment(
      id: 'payment_1',
      bookingId: 'booking_1',
      customerId: 'customer_1',
      specialistId: 'specialist_1',
      amount: 5400.0,
      type: PaymentType.advance,
      status: PaymentStatus.pending,
      createdAt: DateTime.now().subtract(Duration(days: 2)),
      updatedAt: DateTime.now().subtract(Duration(days: 2)),
      dueDate: DateTime.now().add(Duration(days: 5)),
      paymentMethod: 'card',
      transactionId: null,
      isPrepayment: true,
      isFinalPayment: false,
    ),
    Payment(
      id: 'payment_2',
      bookingId: 'booking_1',
      customerId: 'customer_1',
      specialistId: 'specialist_1',
      amount: 12600.0,
      type: PaymentType.final,
      status: PaymentStatus.pending,
      createdAt: DateTime.now().subtract(Duration(days: 2)),
      updatedAt: DateTime.now().subtract(Duration(days: 2)),
      dueDate: DateTime.now().add(Duration(days: 2)),
      paymentMethod: 'card',
      transactionId: null,
      isPrepayment: false,
      isFinalPayment: true,
    ),
    Payment(
      id: 'payment_3',
      bookingId: 'booking_2',
      customerId: 'customer_2',
      specialistId: 'specialist_2',
      amount: 16000.0,
      type: PaymentType.full,
      status: PaymentStatus.completed,
      createdAt: DateTime.now().subtract(Duration(days: 5)),
      updatedAt: DateTime.now().subtract(Duration(days: 1)),
      dueDate: DateTime.now().subtract(Duration(days: 1)),
      paymentMethod: 'card',
      transactionId: 'txn_123456789',
      isPrepayment: false,
      isFinalPayment: true,
    ),
  ];

  // Test Chat Messages
  static List<ChatMessage> get testChatMessages => [
    ChatMessage(
      id: 'message_1',
      chatId: 'chat_1',
      senderId: 'customer_1',
      receiverId: 'specialist_1',
      content: 'Здравствуйте! Интересует фотосессия на свадьбу',
      timestamp: DateTime.now().subtract(Duration(hours: 2)),
      type: MessageType.text,
      isRead: true,
      bookingId: 'booking_1',
      paymentId: null,
    ),
    ChatMessage(
      id: 'message_2',
      chatId: 'chat_1',
      senderId: 'specialist_1',
      receiverId: 'customer_1',
      content: 'Добро пожаловать! Расскажите подробнее о мероприятии',
      timestamp: DateTime.now().subtract(Duration(hours: 1, minutes: 30)),
      type: MessageType.text,
      isRead: true,
      bookingId: 'booking_1',
      paymentId: null,
    ),
    ChatMessage(
      id: 'message_3',
      chatId: 'chat_1',
      senderId: 'customer_1',
      receiverId: 'specialist_1',
      content: 'Свадьба будет 15 июня в парке Сокольники',
      timestamp: DateTime.now().subtract(Duration(hours: 1)),
      type: MessageType.text,
      isRead: false,
      bookingId: 'booking_1',
      paymentId: null,
    ),
  ];

  // Test Chats
  static List<Chat> get testChats => [
    Chat(
      id: 'chat_1',
      participants: ['customer_1', 'specialist_1'],
      lastMessage: 'Свадьба будет 15 июня в парке Сокольники',
      lastMessageTimestamp: DateTime.now().subtract(Duration(hours: 1)),
      unreadCount: 1,
      createdAt: DateTime.now().subtract(Duration(days: 2)),
      updatedAt: DateTime.now().subtract(Duration(hours: 1)),
    ),
    Chat(
      id: 'chat_2',
      participants: ['customer_2', 'specialist_2'],
      lastMessage: 'Спасибо за отличную работу!',
      lastMessageTimestamp: DateTime.now().subtract(Duration(days: 1)),
      unreadCount: 0,
      createdAt: DateTime.now().subtract(Duration(days: 5)),
      updatedAt: DateTime.now().subtract(Duration(days: 1)),
    ),
  ];

  // Test Notifications
  static List<AppNotification> get testNotifications => [
    AppNotification(
      id: 'notification_1',
      userId: 'customer_1',
      type: NotificationType.booking_confirmed,
      title: 'Заявка подтверждена!',
      body: 'Ваша заявка на фотосессию подтверждена',
      timestamp: DateTime.now().subtract(Duration(hours: 3)),
      isRead: false,
      priority: NotificationPriority.high,
      bookingId: 'booking_1',
      paymentId: null,
      chatId: null,
    ),
    AppNotification(
      id: 'notification_2',
      userId: 'specialist_1',
      type: NotificationType.booking_confirmed,
      title: 'Новая заявка',
      body: 'Получена новая заявка на фотосессию',
      timestamp: DateTime.now().subtract(Duration(days: 1)),
      isRead: true,
      priority: NotificationPriority.medium,
      bookingId: 'booking_1',
      paymentId: null,
      chatId: null,
    ),
    AppNotification(
      id: 'notification_3',
      userId: 'customer_2',
      type: NotificationType.payment_completed,
      title: 'Платеж завершен!',
      body: 'Ваш платеж успешно обработан',
      timestamp: DateTime.now().subtract(Duration(hours: 6)),
      isRead: false,
      priority: NotificationPriority.high,
      bookingId: 'booking_2',
      paymentId: 'payment_3',
      chatId: null,
    ),
  ];

  // Test Reviews
  static List<Review> get testReviews => [
    Review(
      id: 'review_1',
      bookingId: 'booking_2',
      specialistId: 'specialist_2',
      customerId: 'customer_2',
      rating: 5.0,
      comment: 'Отличная работа! Видео получилось просто потрясающим',
      createdAt: DateTime.now().subtract(Duration(days: 3)),
      updatedAt: DateTime.now().subtract(Duration(days: 3)),
      detailedRating: DetailedRating(
        quality: 5.0,
        communication: 5.0,
        punctuality: 4.0,
        value: 5.0,
      ),
      tags: ReviewTags(
        positive: ['профессионализм', 'качество', 'пунктуальность'],
        negative: [],
      ),
    ),
    Review(
      id: 'review_2',
      bookingId: 'booking_1',
      specialistId: 'specialist_1',
      customerId: 'customer_1',
      rating: 4.5,
      comment: 'Хороший фотограф, но немного дорого',
      createdAt: DateTime.now().subtract(Duration(days: 7)),
      updatedAt: DateTime.now().subtract(Duration(days: 7)),
      detailedRating: DetailedRating(
        quality: 5.0,
        communication: 4.0,
        punctuality: 4.0,
        value: 4.0,
      ),
      tags: ReviewTags(
        positive: ['качество'],
        negative: ['цена'],
      ),
    ),
  ];

  // Test Analytics
  static List<Metric> get testMetrics => [
    Metric(
      id: 'metric_1',
      name: 'total_bookings',
      value: 25.0,
      type: MetricType.count,
      timestamp: DateTime.now(),
      period: AnalyticsPeriod.month,
    ),
    Metric(
      id: 'metric_2',
      name: 'total_revenue',
      value: 150000.0,
      type: MetricType.currency,
      timestamp: DateTime.now(),
      period: AnalyticsPeriod.month,
    ),
    Metric(
      id: 'metric_3',
      name: 'average_rating',
      value: 4.7,
      type: MetricType.rating,
      timestamp: DateTime.now(),
      period: AnalyticsPeriod.month,
    ),
  ];

  // Test Users
  static List<AppUser> get testUsers => [
    AppUser(
      id: 'user_1',
      email: 'anna@example.com',
      name: 'Анна Петрова',
      role: UserRole.specialist,
      phone: '+7 (999) 123-45-67',
      avatar: 'https://example.com/avatar1.jpg',
      isVerified: true,
      createdAt: DateTime.now().subtract(Duration(days: 30)),
      updatedAt: DateTime.now(),
    ),
    AppUser(
      id: 'user_2',
      email: 'mikhail@example.com',
      name: 'Михаил Иванов',
      role: UserRole.specialist,
      phone: '+7 (812) 987-65-43',
      avatar: 'https://example.com/avatar2.jpg',
      isVerified: true,
      createdAt: DateTime.now().subtract(Duration(days: 60)),
      updatedAt: DateTime.now(),
    ),
    AppUser(
      id: 'user_3',
      email: 'customer@example.com',
      name: 'Иван Клиентов',
      role: UserRole.customer,
      phone: '+7 (495) 555-12-34',
      avatar: 'https://example.com/avatar3.jpg',
      isVerified: false,
      createdAt: DateTime.now().subtract(Duration(days: 15)),
      updatedAt: DateTime.now(),
    ),
  ];

  // Test Schedule Events
  static List<ScheduleEvent> get testScheduleEvents => [
    ScheduleEvent(
      id: 'event_1',
      specialistId: 'specialist_1',
      type: ScheduleEventType.booking,
      title: 'Свадебная фотосессия',
      description: 'Свадебная церемония в парке',
      startTime: DateTime.now().add(Duration(days: 7)),
      endTime: DateTime.now().add(Duration(days: 7, hours: 6)),
      isAllDay: false,
      bookingId: 'booking_1',
      createdAt: DateTime.now().subtract(Duration(days: 2)),
      updatedAt: DateTime.now().subtract(Duration(days: 2)),
    ),
    ScheduleEvent(
      id: 'event_2',
      specialistId: 'specialist_1',
      type: ScheduleEventType.unavailable,
      title: 'Личное время',
      description: 'Недоступен для бронирования',
      startTime: DateTime.now().add(Duration(days: 10)),
      endTime: DateTime.now().add(Duration(days: 10, hours: 4)),
      isAllDay: false,
      bookingId: null,
      createdAt: DateTime.now().subtract(Duration(days: 1)),
      updatedAt: DateTime.now().subtract(Duration(days: 1)),
    ),
    ScheduleEvent(
      id: 'event_3',
      specialistId: 'specialist_1',
      type: ScheduleEventType.vacation,
      title: 'Отпуск',
      description: 'Летний отпуск',
      startTime: DateTime.now().add(Duration(days: 20)),
      endTime: DateTime.now().add(Duration(days: 27)),
      isAllDay: true,
      bookingId: null,
      createdAt: DateTime.now().subtract(Duration(days: 5)),
      updatedAt: DateTime.now().subtract(Duration(days: 5)),
    ),
  ];

  // Helper methods for creating test data
  static Specialist createTestSpecialist({
    String? id,
    String? name,
    SpecialistCategory? category,
    double? hourlyRate,
    bool? isAvailable,
  }) {
    return Specialist(
      id: id ?? 'test_specialist_${DateTime.now().millisecondsSinceEpoch}',
      userId: 'test_user_${DateTime.now().millisecondsSinceEpoch}',
      name: name ?? 'Test Specialist',
      description: 'Test description',
      category: category ?? SpecialistCategory.photographer,
      subcategories: ['test subcategory'],
      experienceLevel: ExperienceLevel.intermediate,
      yearsOfExperience: 3,
      hourlyRate: hourlyRate ?? 2500.0,
      minBookingHours: 2.0,
      maxBookingHours: 8.0,
      serviceAreas: ['Test City'],
      languages: ['Русский'],
      equipment: ['Test Equipment'],
      portfolio: ['https://example.com/test'],
      isAvailable: isAvailable ?? true,
      isVerified: true,
      rating: 4.5,
      reviewCount: 10,
      createdAt: DateTime.now(),
      updatedAt: DateTime.now(),
    );
  }

  static Booking createTestBooking({
    String? id,
    String? customerId,
    String? specialistId,
    String? eventName,
    BookingStatus? status,
    DateTime? eventDate,
  }) {
    return Booking(
      id: id ?? 'test_booking_${DateTime.now().millisecondsSinceEpoch}',
      customerId: customerId ?? 'test_customer',
      specialistId: specialistId ?? 'test_specialist',
      eventName: eventName ?? 'Test Event',
      eventDescription: 'Test event description',
      eventLocation: 'Test Location',
      eventDate: eventDate ?? DateTime.now().add(Duration(days: 7)),
      duration: Duration(hours: 3),
      totalPrice: 7500.0,
      status: status ?? BookingStatus.pending,
      customerPhone: '+7 (999) 123-45-67',
      customerEmail: 'test@example.com',
      specialRequests: 'Test requests',
      createdAt: DateTime.now(),
      updatedAt: DateTime.now(),
    );
  }

  static Payment createTestPayment({
    String? id,
    String? bookingId,
    String? customerId,
    String? specialistId,
    double? amount,
    PaymentType? type,
    PaymentStatus? status,
  }) {
    return Payment(
      id: id ?? 'test_payment_${DateTime.now().millisecondsSinceEpoch}',
      bookingId: bookingId ?? 'test_booking',
      customerId: customerId ?? 'test_customer',
      specialistId: specialistId ?? 'test_specialist',
      amount: amount ?? 2500.0,
      type: type ?? PaymentType.advance,
      status: status ?? PaymentStatus.pending,
      createdAt: DateTime.now(),
      updatedAt: DateTime.now(),
      dueDate: DateTime.now().add(Duration(days: 7)),
      paymentMethod: 'card',
      transactionId: null,
      isPrepayment: true,
      isFinalPayment: false,
    );
  }
}


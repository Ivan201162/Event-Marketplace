import 'package:event_marketplace_app/models/specialist.dart';
import 'package:event_marketplace_app/models/booking.dart';
import 'package:event_marketplace_app/models/payment.dart';
import 'package:event_marketplace_app/models/chat.dart';
import 'package:event_marketplace_app/models/notification.dart';
import 'package:event_marketplace_app/models/review.dart';
import 'package:event_marketplace_app/models/analytics.dart';
import 'package:event_marketplace_app/models/user.dart';
import 'package:event_marketplace_app/models/specialist_schedule.dart';

class TestData {
  // Test Specialists
  static List<Specialist> get testSpecialists => [
        Specialist(
          id: 'specialist_1',
          userId: 'user_1',
          name: 'Анна Петрова',
          description: 'Профессиональный фотограф с 5-летним опытом',
          category: SpecialistCategory.photographer,
          subcategories: ['свадебная фотография', 'портретная съемка'],
          experienceLevel: ExperienceLevel.advanced,
          yearsOfExperience: 5,
          hourlyRate: 3000.0,
          minBookingHours: 2.0,
          maxBookingHours: 12.0,
          serviceAreas: ['Москва', 'Московская область'],
          languages: ['Русский', 'Английский'],
          equipment: ['Canon EOS R5', 'Sony A7R IV'],
          portfolio: [
            'https://example.com/portfolio1',
            'https://example.com/portfolio2'
          ],
          isAvailable: true,
          isVerified: true,
          rating: 4.8,
          reviewCount: 47,
          createdAt: DateTime.now().subtract(Duration(days: 30)),
          updatedAt: DateTime.now(),
        ),
        Specialist(
          id: 'specialist_2',
          userId: 'user_2',
          name: 'Михаил Иванов',
          description: 'Опытный видеограф и монтажер',
          category: SpecialistCategory.videographer,
          subcategories: ['свадебная видеосъемка', 'корпоративные видео'],
          experienceLevel: ExperienceLevel.expert,
          yearsOfExperience: 8,
          hourlyRate: 4000.0,
          minBookingHours: 3.0,
          maxBookingHours: 10.0,
          serviceAreas: ['Санкт-Петербург'],
          languages: ['Русский'],
          equipment: ['Sony FX6', 'DJI Mavic 3'],
          portfolio: ['https://example.com/portfolio3'],
          isAvailable: true,
          isVerified: true,
          rating: 4.9,
          reviewCount: 32,
          createdAt: DateTime.now().subtract(Duration(days: 60)),
          updatedAt: DateTime.now(),
        ),
        Specialist(
          id: 'specialist_3',
          userId: 'user_3',
          name: 'Елена Смирнова',
          description: 'Творческий декоратор и флорист',
          category: SpecialistCategory.decorator,
          subcategories: ['свадебный декор', 'корпоративные мероприятия'],
          experienceLevel: ExperienceLevel.intermediate,
          yearsOfExperience: 3,
          hourlyRate: 2500.0,
          minBookingHours: 4.0,
          maxBookingHours: 8.0,
          serviceAreas: ['Москва'],
          languages: ['Русский'],
          equipment: ['Цветы', 'Декор', 'Инструменты'],
          portfolio: ['https://example.com/portfolio4'],
          isAvailable: false,
          isVerified: false,
          rating: 4.5,
          reviewCount: 18,
          createdAt: DateTime.now().subtract(Duration(days: 15)),
          updatedAt: DateTime.now(),
        ),
      ];

  // Test Bookings
  static List<Booking> get testBookings => [
        Booking(
          id: 'booking_1',
          eventId: 'event_1',
          eventTitle: 'Свадебная фотосессия',
          userId: 'customer_1',
          userName: 'Иван Петров',
          userEmail: 'customer@example.com',
          userPhone: '+7 (999) 123-45-67',
          status: BookingStatus.pending,
          bookingDate: DateTime.now(),
          eventDate: DateTime.now().add(Duration(days: 7)),
          participantsCount: 2,
          totalPrice: 18000.0,
          notes: 'Нужна съемка на закате',
          createdAt: DateTime.now().subtract(Duration(days: 2)),
          updatedAt: DateTime.now().subtract(Duration(days: 2)),
        ),
        Booking(
          id: 'booking_2',
          eventId: 'event_2',
          eventTitle: 'Корпоративное видео',
          userId: 'customer_2',
          userName: 'Мария Сидорова',
          userEmail: 'corporate@example.com',
          userPhone: '+7 (812) 987-65-43',
          status: BookingStatus.confirmed,
          bookingDate: DateTime.now(),
          eventDate: DateTime.now().add(Duration(days: 14)),
          participantsCount: 5,
          totalPrice: 16000.0,
          notes: 'Нужен монтаж в течение недели',
          createdAt: DateTime.now().subtract(Duration(days: 5)),
          updatedAt: DateTime.now().subtract(Duration(days: 1)),
        ),
        Booking(
          id: 'booking_3',
          eventId: 'event_3',
          eventTitle: 'День рождения',
          userId: 'customer_3',
          userName: 'Елена Козлова',
          userEmail: 'birthday@example.com',
          userPhone: '+7 (495) 555-12-34',
          status: BookingStatus.rejected,
          bookingDate: DateTime.now(),
          eventDate: DateTime.now().add(Duration(days: 3)),
          participantsCount: 15,
          totalPrice: 7500.0,
          notes: 'Тема: принцессы',
          createdAt: DateTime.now().subtract(Duration(days: 1)),
          updatedAt: DateTime.now().subtract(Duration(hours: 12)),
        ),
      ];

  // Test Payments
  static List<Payment> get testPayments => [
        Payment(
          id: 'payment_1',
          bookingId: 'booking_1',
          customerId: 'customer_1',
          specialistId: 'specialist_1',
          amount: 5400.0,
          type: PaymentType.advance,
          status: PaymentStatus.pending,
          currency: 'RUB',
          createdAt: DateTime.now().subtract(Duration(days: 2)),
          paymentMethod: 'card',
          transactionId: null,
          organizationType: OrganizationType.individual,
        ),
        Payment(
          id: 'payment_2',
          bookingId: 'booking_1',
          customerId: 'customer_1',
          specialistId: 'specialist_1',
          amount: 12600.0,
          type: PaymentType.finalPayment,
          status: PaymentStatus.pending,
          currency: 'RUB',
          createdAt: DateTime.now().subtract(Duration(days: 2)),
          paymentMethod: 'card',
          transactionId: null,
          organizationType: OrganizationType.individual,
        ),
        Payment(
          id: 'payment_3',
          bookingId: 'booking_2',
          customerId: 'customer_2',
          specialistId: 'specialist_2',
          amount: 16000.0,
          type: PaymentType.fullPayment,
          status: PaymentStatus.completed,
          currency: 'RUB',
          createdAt: DateTime.now().subtract(Duration(days: 5)),
          completedAt: DateTime.now().subtract(Duration(days: 1)),
          paymentMethod: 'card',
          transactionId: 'txn_123456789',
          organizationType: OrganizationType.commercial,
        ),
      ];

  // Test Chat Messages
  static List<ChatMessage> get testChatMessages => [
        ChatMessage(
          id: 'message_1',
          chatId: 'chat_1',
          senderId: 'customer_1',
          receiverId: 'specialist_1',
          content: 'Здравствуйте! Интересует фотосессия на свадьбу',
          createdAt: DateTime.now().subtract(Duration(hours: 2)),
          type: MessageType.text,
          status: MessageStatus.read,
          readAt: DateTime.now().subtract(Duration(hours: 1)),
        ),
        ChatMessage(
          id: 'message_2',
          chatId: 'chat_1',
          senderId: 'specialist_1',
          receiverId: 'customer_1',
          content: 'Добро пожаловать! Расскажите подробнее о мероприятии',
          createdAt: DateTime.now().subtract(Duration(hours: 1, minutes: 30)),
          type: MessageType.text,
          status: MessageStatus.read,
          readAt: DateTime.now().subtract(Duration(hours: 1)),
        ),
        ChatMessage(
          id: 'message_3',
          chatId: 'chat_1',
          senderId: 'customer_1',
          receiverId: 'specialist_1',
          content: 'Свадьба будет 15 июня в парке Сокольники',
          createdAt: DateTime.now().subtract(Duration(hours: 1)),
          type: MessageType.text,
          status: MessageStatus.delivered,
        ),
      ];

  // Test Chats
  static List<Chat> get testChats => [
        Chat(
          id: 'chat_1',
          customerId: 'customer_1',
          specialistId: 'specialist_1',
          bookingId: 'booking_1',
          lastMessage: ChatMessage(
            id: 'message_3',
            chatId: 'chat_1',
            senderId: 'customer_1',
            receiverId: 'specialist_1',
            content: 'Свадьба будет 15 июня в парке Сокольники',
            createdAt: DateTime.now().subtract(Duration(hours: 1)),
            type: MessageType.text,
            status: MessageStatus.delivered,
          ),
          unreadCount: 1,
          createdAt: DateTime.now().subtract(Duration(days: 2)),
          updatedAt: DateTime.now().subtract(Duration(hours: 1)),
          isActive: true,
        ),
        Chat(
          id: 'chat_2',
          customerId: 'customer_2',
          specialistId: 'specialist_2',
          bookingId: 'booking_2',
          lastMessage: ChatMessage(
            id: 'message_4',
            chatId: 'chat_2',
            senderId: 'customer_2',
            receiverId: 'specialist_2',
            content: 'Спасибо за отличную работу!',
            createdAt: DateTime.now().subtract(Duration(days: 1)),
            type: MessageType.text,
            status: MessageStatus.read,
            readAt: DateTime.now().subtract(Duration(days: 1)),
          ),
          unreadCount: 0,
          createdAt: DateTime.now().subtract(Duration(days: 5)),
          updatedAt: DateTime.now().subtract(Duration(days: 1)),
          isActive: true,
        ),
      ];

  // Test Notifications
  static List<AppNotification> get testNotifications => [
        AppNotification(
          id: 'notification_1',
          userId: 'customer_1',
          type: NotificationType.booking_confirmed,
          title: 'Заявка подтверждена!',
          content: 'Ваша заявка на фотосессию подтверждена',
          timestamp: DateTime.now().subtract(Duration(hours: 3)),
          isRead: false,
          priority: NotificationPriority.high,
          bookingId: 'booking_1',
          paymentId: null,
          createdAt: DateTime.now().subtract(Duration(hours: 3)),
        ),
        AppNotification(
          id: 'notification_2',
          userId: 'specialist_1',
          type: NotificationType.booking_confirmed,
          title: 'Новая заявка',
          content: 'Получена новая заявка на фотосессию',
          timestamp: DateTime.now().subtract(Duration(days: 1)),
          isRead: true,
          priority: NotificationPriority.normal,
          bookingId: 'booking_1',
          paymentId: null,
          createdAt: DateTime.now().subtract(Duration(days: 1)),
          readAt: DateTime.now().subtract(Duration(hours: 12)),
        ),
        AppNotification(
          id: 'notification_3',
          userId: 'customer_2',
          type: NotificationType.payment_completed,
          title: 'Платеж завершен!',
          content: 'Ваш платеж успешно обработан',
          timestamp: DateTime.now().subtract(Duration(hours: 6)),
          isRead: false,
          priority: NotificationPriority.high,
          bookingId: 'booking_2',
          paymentId: 'payment_3',
          createdAt: DateTime.now().subtract(Duration(hours: 6)),
        ),
      ];

  // Test Reviews
  static List<Review> get testReviews => [
        Review(
          id: 'review_1',
          reviewerId: 'customer_2',
          reviewerName: 'Мария Сидорова',
          targetId: 'specialist_2',
          type: ReviewType.specialist,
          rating: 5,
          title: 'Отличная работа!',
          content: 'Отличная работа! Видео получилось просто потрясающим',
          status: ReviewStatus.approved,
          createdAt: DateTime.now().subtract(Duration(days: 3)),
          updatedAt: DateTime.now().subtract(Duration(days: 3)),
          isVerified: true,
          isHelpful: true,
          helpfulCount: 3,
          notHelpfulCount: 0,
          helpfulVotes: {'user1': true, 'user2': true, 'user3': true},
          images: [],
          tags: ['профессионализм', 'качество', 'пунктуальность'],
        ),
        Review(
          id: 'review_2',
          reviewerId: 'customer_1',
          reviewerName: 'Иван Петров',
          targetId: 'specialist_1',
          type: ReviewType.specialist,
          rating: 4,
          title: 'Хороший фотограф',
          content: 'Хороший фотограф, но немного дорого',
          status: ReviewStatus.approved,
          createdAt: DateTime.now().subtract(Duration(days: 7)),
          updatedAt: DateTime.now().subtract(Duration(days: 7)),
          isVerified: true,
          isHelpful: false,
          helpfulCount: 1,
          notHelpfulCount: 1,
          helpfulVotes: {'user1': true, 'user2': false},
          images: [],
          tags: ['качество', 'цена'],
        ),
      ];

  // Test Analytics
  static List<Metric> get testMetrics => [
        Metric(
          id: 'metric_1',
          name: 'total_bookings',
          value: 25.0,
          type: MetricType.count,
          timestamp: DateTime.now(),
          period: AnalyticsPeriod.month,
        ),
        Metric(
          id: 'metric_2',
          name: 'total_revenue',
          value: 150000.0,
          type: MetricType.currency,
          timestamp: DateTime.now(),
          period: AnalyticsPeriod.month,
        ),
        Metric(
          id: 'metric_3',
          name: 'average_rating',
          value: 4.7,
          type: MetricType.rating,
          timestamp: DateTime.now(),
          period: AnalyticsPeriod.month,
        ),
      ];

  // Test Users
  static List<AppUser> get testUsers => [
        AppUser(
          id: 'user_1',
          email: 'anna@example.com',
          displayName: 'Анна Петрова',
          photoURL: 'https://example.com/avatar1.jpg',
          role: UserRole.specialist,
          createdAt: DateTime.now().subtract(Duration(days: 30)),
          lastLoginAt: DateTime.now(),
          isActive: true,
          socialProvider: 'email',
        ),
        AppUser(
          id: 'user_2',
          email: 'mikhail@example.com',
          displayName: 'Михаил Иванов',
          photoURL: 'https://example.com/avatar2.jpg',
          role: UserRole.specialist,
          createdAt: DateTime.now().subtract(Duration(days: 60)),
          lastLoginAt: DateTime.now(),
          isActive: true,
          socialProvider: 'email',
        ),
        AppUser(
          id: 'user_3',
          email: 'customer@example.com',
          displayName: 'Иван Клиентов',
          photoURL: 'https://example.com/avatar3.jpg',
          role: UserRole.customer,
          createdAt: DateTime.now().subtract(Duration(days: 15)),
          lastLoginAt: DateTime.now(),
          isActive: true,
          socialProvider: 'email',
        ),
      ];

  // Test Schedule Events
  static List<ScheduleEvent> get testScheduleEvents => [
        ScheduleEvent(
          id: 'event_1',
          type: ScheduleEventType.booking,
          title: 'Свадебная фотосессия',
          description: 'Свадебная церемония в парке',
          startTime: DateTime.now().add(Duration(days: 7)),
          endTime: DateTime.now().add(Duration(days: 7, hours: 6)),
          bookingId: 'booking_1',
        ),
        ScheduleEvent(
          id: 'event_2',
          type: ScheduleEventType.unavailable,
          title: 'Личное время',
          description: 'Недоступен для бронирования',
          startTime: DateTime.now().add(Duration(days: 10)),
          endTime: DateTime.now().add(Duration(days: 10, hours: 4)),
          bookingId: null,
        ),
        ScheduleEvent(
          id: 'event_3',
          type: ScheduleEventType.vacation,
          title: 'Отпуск',
          description: 'Летний отпуск',
          startTime: DateTime.now().add(Duration(days: 20)),
          endTime: DateTime.now().add(Duration(days: 27)),
          bookingId: null,
        ),
      ];

  // Helper methods for creating test data
  static Specialist createTestSpecialist({
    String? id,
    String? name,
    SpecialistCategory? category,
    double? hourlyRate,
    bool? isAvailable,
  }) {
    return Specialist(
      id: id ?? 'test_specialist_${DateTime.now().millisecondsSinceEpoch}',
      userId: 'test_user_${DateTime.now().millisecondsSinceEpoch}',
      name: name ?? 'Test Specialist',
      description: 'Test description',
      category: category ?? SpecialistCategory.photographer,
      subcategories: ['test subcategory'],
      experienceLevel: ExperienceLevel.intermediate,
      yearsOfExperience: 3,
      hourlyRate: hourlyRate ?? 2500.0,
      minBookingHours: 2.0,
      maxBookingHours: 8.0,
      serviceAreas: ['Test City'],
      languages: ['Русский'],
      equipment: ['Test Equipment'],
      portfolio: ['https://example.com/test'],
      isAvailable: isAvailable ?? true,
      isVerified: true,
      rating: 4.5,
      reviewCount: 10,
      createdAt: DateTime.now(),
      updatedAt: DateTime.now(),
    );
  }

  static Booking createTestBooking({
    String? id,
    String? customerId,
    String? specialistId,
    String? eventName,
    BookingStatus? status,
    DateTime? eventDate,
  }) {
    return Booking(
      id: id ?? 'test_booking_${DateTime.now().millisecondsSinceEpoch}',
      customerId: customerId ?? 'test_customer',
      specialistId: specialistId ?? 'test_specialist',
      eventName: eventName ?? 'Test Event',
      eventDescription: 'Test event description',
      eventLocation: 'Test Location',
      eventDate: eventDate ?? DateTime.now().add(Duration(days: 7)),
      duration: Duration(hours: 3),
      totalPrice: 7500.0,
      status: status ?? BookingStatus.pending,
      customerPhone: '+7 (999) 123-45-67',
      customerEmail: 'test@example.com',
      specialRequests: 'Test requests',
      createdAt: DateTime.now(),
      updatedAt: DateTime.now(),
    );
  }

  static Payment createTestPayment({
    String? id,
    String? bookingId,
    String? customerId,
    String? specialistId,
    double? amount,
    PaymentType? type,
    PaymentStatus? status,
  }) {
    return Payment(
      id: id ?? 'test_payment_${DateTime.now().millisecondsSinceEpoch}',
      bookingId: bookingId ?? 'test_booking',
      customerId: customerId ?? 'test_customer',
      specialistId: specialistId ?? 'test_specialist',
      amount: amount ?? 2500.0,
      type: type ?? PaymentType.advance,
      status: status ?? PaymentStatus.pending,
      createdAt: DateTime.now(),
      updatedAt: DateTime.now(),
      dueDate: DateTime.now().add(Duration(days: 7)),
      paymentMethod: 'card',
      transactionId: null,
      isPrepayment: true,
      isFinalPayment: false,
    );
  }
}

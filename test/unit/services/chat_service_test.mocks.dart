// Mocks generated by Mockito 5.4.6 from annotations
// in event_marketplace_app/test/unit/services/chat_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:typed_data' as _i6;

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:event_marketplace_app/models/chat.dart' as _i4;
import 'package:event_marketplace_app/services/chat_service.dart' as _i2;
import 'package:event_marketplace_app/services/media_upload_service.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

/// A class which mocks [ChatService].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatService extends _i1.Mock implements _i2.ChatService {
  MockChatService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Chat>> getUserChats(String userId, {int limit = 20}) =>
      (super.noSuchMethod(
            Invocation.method(#getUserChats, [userId], {#limit: limit}),
            returnValue: _i3.Future<List<_i4.Chat>>.value(<_i4.Chat>[]),
          )
          as _i3.Future<List<_i4.Chat>>);

  @override
  _i3.Future<_i4.Chat?> getChatById(String chatId) =>
      (super.noSuchMethod(
            Invocation.method(#getChatById, [chatId]),
            returnValue: _i3.Future<_i4.Chat?>.value(null),
          )
          as _i3.Future<_i4.Chat?>);

  @override
  _i3.Future<List<_i4.Message>> getChatMessages(
    String chatId, {
    int limit = 50,
    DocumentSnapshot? lastDocument,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #getChatMessages,
              [chatId],
              {#limit: limit, #lastDocument: lastDocument},
            ),
            returnValue: _i3.Future<List<_i4.Message>>.value(<_i4.Message>[]),
          )
          as _i3.Future<List<_i4.Message>>);

  @override
  _i3.Future<String> uploadFile({
    required String? chatId,
    required String? senderId,
    required _i6.Uint8List? fileData,
    required String? fileName,
    required String? fileType,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#uploadFile, [], {
              #chatId: chatId,
              #senderId: senderId,
              #fileData: fileData,
              #fileName: fileName,
              #fileType: fileType,
            }),
            returnValue: _i3.Future<String>.value(
              _i7.dummyValue<String>(
                this,
                Invocation.method(#uploadFile, [], {
                  #chatId: chatId,
                  #senderId: senderId,
                  #fileData: fileData,
                  #fileName: fileName,
                  #fileType: fileType,
                }),
              ),
            ),
          )
          as _i3.Future<String>);

  @override
  _i3.Future<void> sendMessageWithFile({
    required String? chatId,
    required String? senderId,
    required String? senderName,
    required String? content,
    required String? fileUrl,
    required String? fileType,
    required String? fileName,
    required int? fileSize,
    String? thumbnailUrl,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#sendMessageWithFile, [], {
              #chatId: chatId,
              #senderId: senderId,
              #senderName: senderName,
              #content: content,
              #fileUrl: fileUrl,
              #fileType: fileType,
              #fileName: fileName,
              #fileSize: fileSize,
              #thumbnailUrl: thumbnailUrl,
            }),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> sendMessageWithMedia({
    required String? chatId,
    required String? senderId,
    required String? senderName,
    required String? content,
    required _i8.MediaUploadResult? mediaResult,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#sendMessageWithMedia, [], {
              #chatId: chatId,
              #senderId: senderId,
              #senderName: senderName,
              #content: content,
              #mediaResult: mediaResult,
            }),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<String> createChat(Map<String, dynamic>? chatData) =>
      (super.noSuchMethod(
            Invocation.method(#createChat, [chatData]),
            returnValue: _i3.Future<String>.value(
              _i7.dummyValue<String>(this, Invocation.method(#createChat, [chatData])),
            ),
          )
          as _i3.Future<String>);

  @override
  _i3.Future<void> updateMessageStatus(String? chatId, String? messageId, String? status) =>
      (super.noSuchMethod(
            Invocation.method(#updateMessageStatus, [chatId, messageId, status]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> markMessagesAsRead(String? chatId, String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#markMessagesAsRead, [chatId, userId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<bool> deleteMessage(String messageId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteMessage, [messageId]),
            returnValue: _i3.Future<bool>.value(true),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<int> getUnreadMessagesCount(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getUnreadMessagesCount, [userId]),
            returnValue: _i3.Future<int>.value(0),
          )
          as _i3.Future<int>);

  @override
  _i3.Future<void> sendMessageWithAttachment({
    required String? chatId,
    required String? senderId,
    required String? senderName,
    required String? content,
    required String? filePath,
    required String? fileName,
    required String? fileType,
    required int? fileSize,
    String? thumbnailUrl,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#sendMessageWithAttachment, [], {
              #chatId: chatId,
              #senderId: senderId,
              #senderName: senderName,
              #content: content,
              #filePath: filePath,
              #fileName: fileName,
              #fileType: fileType,
              #fileSize: fileSize,
              #thumbnailUrl: thumbnailUrl,
            }),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> clearChat(String? chatId) =>
      (super.noSuchMethod(
            Invocation.method(#clearChat, [chatId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<List<_i4.Chat>> getChatsByCategory(String? userId, String? category) =>
      (super.noSuchMethod(
            Invocation.method(#getChatsByCategory, [userId, category]),
            returnValue: _i3.Future<List<_i4.Chat>>.value(<_i4.Chat>[]),
          )
          as _i3.Future<List<_i4.Chat>>);

  @override
  _i3.Future<String> createChatWithCategory({
    required String? name,
    required List<String>? participants,
    required Map<String, String>? participantNames,
    required Map<String, String>? participantAvatars,
    required String? category,
    String? description,
    String? avatar,
    String? createdBy,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createChatWithCategory, [], {
              #name: name,
              #participants: participants,
              #participantNames: participantNames,
              #participantAvatars: participantAvatars,
              #category: category,
              #description: description,
              #avatar: avatar,
              #createdBy: createdBy,
            }),
            returnValue: _i3.Future<String>.value(
              _i7.dummyValue<String>(
                this,
                Invocation.method(#createChatWithCategory, [], {
                  #name: name,
                  #participants: participants,
                  #participantNames: participantNames,
                  #participantAvatars: participantAvatars,
                  #category: category,
                  #description: description,
                  #avatar: avatar,
                  #createdBy: createdBy,
                }),
              ),
            ),
          )
          as _i3.Future<String>);

  @override
  _i3.Future<void> markMessageAsReadByUser(String? chatId, String? messageId, String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#markMessageAsReadByUser, [chatId, messageId, userId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Stream<int> getUnreadMessagesCountStream(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getUnreadMessagesCountStream, [userId]),
            returnValue: _i3.Stream<int>.empty(),
          )
          as _i3.Stream<int>);
}

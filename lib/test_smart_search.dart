import 'package:flutter/material.dart';

import 'models/smart_specialist.dart';
import 'models/user_preferences.dart';
import 'services/ai_assistant_service.dart';
import 'services/smart_search_service.dart';
import 'services/smart_specialist_data_generator.dart';

/// –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
class SmartSearchTester {
  final SmartSearchService _smartSearchService = SmartSearchService();
  final AIAssistantService _aiAssistantService = AIAssistantService();
  final SmartSpecialistDataGenerator _dataGenerator = SmartSpecialistDataGenerator();

  /// –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã
  Future<void> runAllTests() async {
    print('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞...\n');

    try {
      // –¢–µ—Å—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      await _testDataGeneration();
      
      // –¢–µ—Å—Ç 2: –£–º–Ω—ã–π –ø–æ–∏—Å–∫
      await _testSmartSearch();
      
      // –¢–µ—Å—Ç 3: –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      await _testPersonalRecommendations();
      
      // –¢–µ—Å—Ç 4: AI-–ø–æ–º–æ—â–Ω–∏–∫
      await _testAIAssistant();
      
      // –¢–µ—Å—Ç 5: –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await _testUserPreferences();
      
      print('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    } catch (e) {
      print('\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: $e');
    }
  }

  /// –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  Future<void> _testDataGeneration() async {
    print('üìä –¢–µ—Å—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
    
    try {
      await _dataGenerator.generateTestSpecialists(count: 10);
      print('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: $e');
    }
    
    print('');
  }

  /// –¢–µ—Å—Ç —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
  Future<void> _testSmartSearch() async {
    print('üîç –¢–µ—Å—Ç 2: –£–º–Ω—ã–π –ø–æ–∏—Å–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤');
    
    try {
      // –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      final specialistsByCategory = await _smartSearchService.smartSearch(
        category: SpecialistCategory.host,
        limit: 5,
      );
      print('‚úÖ –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: –Ω–∞–π–¥–µ–Ω–æ ${specialistsByCategory.length} —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤');
      
      // –ü–æ–∏—Å–∫ –ø–æ –≥–æ—Ä–æ–¥—É
      final specialistsByCity = await _smartSearchService.smartSearch(
        city: '–ú–æ—Å–∫–≤–∞',
        limit: 5,
      );
      print('‚úÖ –ü–æ–∏—Å–∫ –ø–æ –≥–æ—Ä–æ–¥—É: –Ω–∞–π–¥–µ–Ω–æ ${specialistsByCity.length} —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤');
      
      // –ü–æ–∏—Å–∫ –ø–æ —Ü–µ–Ω–µ
      final specialistsByPrice = await _smartSearchService.smartSearch(
        minPrice: 10000,
        maxPrice: 30000,
        limit: 5,
      );
      print('‚úÖ –ü–æ–∏—Å–∫ –ø–æ —Ü–µ–Ω–µ: –Ω–∞–π–¥–µ–Ω–æ ${specialistsByPrice.length} —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤');
      
      // –ü–æ–∏—Å–∫ –ø–æ —Å—Ç–∏–ª—é
      final specialistsByStyle = await _smartSearchService.smartSearch(
        styles: ['–∫–ª–∞—Å—Å–∏–∫–∞', '—é–º–æ—Ä'],
        limit: 5,
      );
      print('‚úÖ –ü–æ–∏—Å–∫ –ø–æ —Å—Ç–∏–ª—é: –Ω–∞–π–¥–µ–Ω–æ ${specialistsByStyle.length} —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤');
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: $e');
    }
    
    print('');
  }

  /// –¢–µ—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  Future<void> _testPersonalRecommendations() async {
    print('üéØ –¢–µ—Å—Ç 3: –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏');
    
    try {
      const testUserId = 'test_user_123';
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
      final preferences = UserPreferences(
        userId: testUserId,
        likedStyles: ['–∫–ª–∞—Å—Å–∏–∫–∞', '—é–º–æ—Ä'],
        preferredBudget: 25000,
        preferredCities: ['–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'],
        pastRequests: ['–≤–µ–¥—É—â–∏–π', '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ'],
        favoriteCategories: ['host', 'photographer'],
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
      final saved = await _smartSearchService.saveUserPreferences(preferences);
      print('‚úÖ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: $saved');
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      final recommendations = await _smartSearchService.getPersonalRecommendations(
        testUserId,
        limit: 5,
      );
      print('‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –Ω–∞–π–¥–µ–Ω–æ ${recommendations.length} —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
      if (recommendations.isNotEmpty) {
        final specialist = recommendations.first;
        final compatibility = specialist.calculateCompatibility(
          preferences.getCompatibilityPreferences(),
        );
        print('‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø–µ—Ä–≤—ã–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º: ${(compatibility * 100).toStringAsFixed(1)}%');
      }
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: $e');
    }
    
    print('');
  }

  /// –¢–µ—Å—Ç AI-–ø–æ–º–æ—â–Ω–∏–∫–∞
  Future<void> _testAIAssistant() async {
    print('ü§ñ –¢–µ—Å—Ç 4: AI-–ø–æ–º–æ—â–Ω–∏–∫');
    
    try {
      // –ù–∞—á–∏–Ω–∞–µ–º –±–µ—Å–µ–¥—É
      final conversation = await _aiAssistantService.startConversation(
        userId: 'test_user_123',
      );
      print('‚úÖ –ë–µ—Å–µ–¥–∞ –Ω–∞—á–∞—Ç–∞: ${conversation.id}');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
      final messages = [
        '–ü—Ä–∏–≤–µ—Ç!',
        '–ú–Ω–µ –Ω—É–∂–µ–Ω –≤–µ–¥—É—â–∏–π –Ω–∞ —Å–≤–∞–¥—å–±—É',
        '–í –ú–æ—Å–∫–≤–µ',
        '–ë—é–¥–∂–µ—Ç 30000 —Ä—É–±–ª–µ–π',
        '–ù–∞ 15 –∏—é–Ω—è 2024',
        '–ù–∞–π–¥–∏ –º–Ω–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤',
      ];
      
      for (final message in messages) {
        final response = await _aiAssistantService.sendMessage(
          conversationId: conversation.id,
          message: message,
          userId: 'test_user_123',
        );
        print('‚úÖ –û—Ç–≤–µ—Ç AI: ${response.text.substring(0, 50)}...');
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        await Future.delayed(const Duration(milliseconds: 100));
      }
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ AI-–ø–æ–º–æ—â–Ω–∏–∫–∞: $e');
    }
    
    print('');
  }

  /// –¢–µ—Å—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> _testUserPreferences() async {
    print('üë§ –¢–µ—Å—Ç 5: –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    
    try {
      const testUserId = 'test_user_456';
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
      final preferences = UserPreferences(
        userId: testUserId,
        likedStyles: ['—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π', '–∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π'],
        preferredBudget: 40000,
        preferredCities: ['–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'],
        pastRequests: ['—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ', '–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä'],
        favoriteCategories: ['photographer', 'decorator'],
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º
      await _smartSearchService.saveUserPreferences(preferences);
      print('‚úÖ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º
      final loadedPreferences = await _smartSearchService.getUserPreferences(testUserId);
      print('‚úÖ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${loadedPreferences?.likedStyles.length} —Å—Ç–∏–ª–µ–π');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º
      await _smartSearchService.updateUserPreferences(
        testUserId,
        {'preferredBudget': 50000},
      );
      print('‚úÖ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
      await _smartSearchService.recordUserInteraction(
        userId: testUserId,
        specialistId: 'test_specialist_123',
        action: 'view',
        metadata: {'category': 'photographer'},
      );
      print('‚úÖ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ');
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
    }
    
    print('');
  }

  /// –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  Future<void> _testStatistics() async {
    print('üìà –¢–µ—Å—Ç 6: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞');
    
    try {
      final stats = await _smartSearchService.getSearchStats();
      print('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:');
      print('   - –í—Å–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤: ${stats['totalSpecialists']}');
      print('   - –î–æ—Å—Ç—É–ø–Ω—ã—Ö: ${stats['availableSpecialists']}');
      print('   - –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ${stats['averageRating']?.toStringAsFixed(1)}');
      print('   - –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${stats['averagePrice']?.toStringAsFixed(0)} ‚ÇΩ');
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: $e');
    }
    
    print('');
  }

  /// –¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  Future<void> _testCompatibility() async {
    print('üéØ –¢–µ—Å—Ç 7: –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤');
    
    try {
      const testUserId = 'test_user_789';
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
      final preferences = UserPreferences(
        userId: testUserId,
        likedStyles: ['–∫–ª–∞—Å—Å–∏–∫–∞', '—ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π'],
        preferredBudget: 35000,
        preferredCities: ['–ú–æ—Å–∫–≤–∞'],
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );
      
      await _smartSearchService.saveUserPreferences(preferences);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      final compatibleSpecialists = await _smartSearchService.getSpecialistsByCompatibility(
        testUserId,
        limit: 5,
      );
      
      print('‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –ø–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: –Ω–∞–π–¥–µ–Ω–æ ${compatibleSpecialists.length}');
      
      for (final specialist in compatibleSpecialists) {
        print('   - ${specialist.name}: ${(specialist.compatibilityScore * 100).toStringAsFixed(1)}%');
      }
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: $e');
    }
    
    print('');
  }
}

/// –í–∏–¥–∂–µ—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
class SmartSearchTestWidget extends StatefulWidget {
  const SmartSearchTestWidget({super.key});

  @override
  State<SmartSearchTestWidget> createState() => _SmartSearchTestWidgetState();
}

class _SmartSearchTestWidgetState extends State<SmartSearchTestWidget> {
  final SmartSearchTester _tester = SmartSearchTester();
  bool _isRunning = false;
  String _output = '';

  @override
  Widget build(BuildContext context) => Scaffold(
      appBar: AppBar(
        title: const Text('–¢–µ—Å—Ç—ã —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞'),
      ),
      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(16),
            child: ElevatedButton(
              onPressed: _isRunning ? null : _runTests,
              child: _isRunning
                  ? const Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        SizedBox(
                          width: 16,
                          height: 16,
                          child: CircularProgressIndicator(strokeWidth: 2),
                        ),
                        SizedBox(width: 8),
                        Text('–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...'),
                      ],
                    )
                  : const Text('–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã'),
            ),
          ),
          Expanded(
            child: Container(
              margin: const EdgeInsets.all(16),
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.black,
                borderRadius: BorderRadius.circular(8),
              ),
              child: SingleChildScrollView(
                child: Text(
                  _output,
                  style: const TextStyle(
                    color: Colors.green,
                    fontFamily: 'monospace',
                    fontSize: 12,
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );

  Future<void> _runTests() async {
    setState(() {
      _isRunning = true;
      _output = '';
    });

    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –≤ UI
    const originalPrint = print;
    print = (object) {
      setState(() {
        _output += '$object\n';
      });
    };

    try {
      await _tester.runAllTests();
    } finally {
      print = originalPrint;
      setState(() {
        _isRunning = false;
      });
    }
  }
}

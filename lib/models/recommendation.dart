import 'package:cloud_firestore/cloud_firestore.dart';
import 'specialist.dart';
// import 'user.dart';

/// –¢–∏–ø—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
enum RecommendationType {
  similarSpecialists,    // –ü–æ—Ö–æ–∂–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã
  popularInCategory,     // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  recentlyViewed,        // –ù–µ–¥–∞–≤–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ
  basedOnHistory,        // –ù–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏
  trending,              // –¢—Ä–µ–Ω–¥–æ–≤—ã–µ
  nearby,                // –†—è–¥–æ–º —Å –≤–∞–º–∏
  priceRange,            // –í —Ü–µ–Ω–æ–≤–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
  availability,          // –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ–π—á–∞—Å
}

/// –ú–æ–¥–µ–ª—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
class Recommendation {
  final String id;
  final String userId;
  final String specialistId;
  final RecommendationType type;
  final double score;
  final String reason;
  final Map<String, dynamic> metadata;
  final DateTime createdAt;
  final DateTime expiresAt;

  const Recommendation({
    required this.id,
    required this.userId,
    required this.specialistId,
    required this.type,
    required this.score,
    required this.reason,
    required this.metadata,
    required this.createdAt,
    required this.expiresAt,
  });

  /// –°–æ–∑–¥–∞—ë—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ Firestore
  factory Recommendation.fromDocument(DocumentSnapshot doc) {
    final data = doc.data() as Map<String, dynamic>;
    
    return Recommendation(
      id: doc.id,
      userId: data['userId'] as String,
      specialistId: data['specialistId'] as String,
      type: RecommendationType.values.firstWhere(
        (e) => e.name == data['type'],
        orElse: () => RecommendationType.similarSpecialists,
      ),
      score: (data['score'] as num).toDouble(),
      reason: data['reason'] as String,
      metadata: Map<String, dynamic>.from(data['metadata'] as Map? ?? {}),
      createdAt: (data['createdAt'] as Timestamp).toDate(),
      expiresAt: (data['expiresAt'] as Timestamp).toDate(),
    );
  }

  /// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –≤ Map –¥–ª—è Firestore
  Map<String, dynamic> toMap() {
    return {
      'userId': userId,
      'specialistId': specialistId,
      'type': type.name,
      'score': score,
      'reason': reason,
      'metadata': metadata,
      'createdAt': Timestamp.fromDate(createdAt),
      'expiresAt': Timestamp.fromDate(expiresAt),
    };
  }

  /// –°–æ–∑–¥–∞—ë—Ç –∫–æ–ø–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
  Recommendation copyWith({
    String? id,
    String? userId,
    String? specialistId,
    RecommendationType? type,
    double? score,
    String? reason,
    Map<String, dynamic>? metadata,
    DateTime? createdAt,
    DateTime? expiresAt,
  }) {
    return Recommendation(
      id: id ?? this.id,
      userId: userId ?? this.userId,
      specialistId: specialistId ?? this.specialistId,
      type: type ?? this.type,
      score: score ?? this.score,
      reason: reason ?? this.reason,
      metadata: metadata ?? this.metadata,
      createdAt: createdAt ?? this.createdAt,
      expiresAt: expiresAt ?? this.expiresAt,
    );
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
  bool get isValid => DateTime.now().isBefore(expiresAt);

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is Recommendation && other.id == id;
  }

  @override
  int get hashCode => id.hashCode;

  @override
  String toString() {
    return 'Recommendation(id: $id, type: $type, score: $score)';
  }
}

/// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è RecommendationType
extension RecommendationTypeExtension on RecommendationType {
  /// –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  RecommendationTypeInfo get info {
    switch (this) {
      case RecommendationType.similarSpecialists:
        return RecommendationTypeInfo(
          title: '–ü–æ—Ö–æ–∂–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã',
          description: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Å –ø–æ—Ö–æ–∂–∏–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏ –∏ –æ–ø—ã—Ç–æ–º',
          icon: 'üë•',
          color: '#4CAF50',
        );
      case RecommendationType.popularInCategory:
        return RecommendationTypeInfo(
          title: '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
          description: '–°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
          icon: 'üî•',
          color: '#FF5722',
        );
      case RecommendationType.recentlyViewed:
        return RecommendationTypeInfo(
          title: '–ù–µ–¥–∞–≤–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ',
          description: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –Ω–µ–¥–∞–≤–Ω–æ —Å–º–æ—Ç—Ä–µ–ª–∏',
          icon: 'üëÅÔ∏è',
          color: '#2196F3',
        );
      case RecommendationType.basedOnHistory:
        return RecommendationTypeInfo(
          title: '–ù–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏',
          description: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π',
          icon: 'üìä',
          color: '#9C27B0',
        );
      case RecommendationType.trending:
        return RecommendationTypeInfo(
          title: '–¢—Ä–µ–Ω–¥–æ–≤—ã–µ',
          description: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã, –Ω–∞–±–∏—Ä–∞—é—â–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å',
          icon: 'üìà',
          color: '#FF9800',
        );
      case RecommendationType.nearby:
        return RecommendationTypeInfo(
          title: '–†—è–¥–æ–º —Å –≤–∞–º–∏',
          description: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –≤ –≤–∞—à–µ–º —Ä–∞–π–æ–Ω–µ',
          icon: 'üìç',
          color: '#00BCD4',
        );
      case RecommendationType.priceRange:
        return RecommendationTypeInfo(
          title: '–í —Ü–µ–Ω–æ–≤–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ',
          description: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –≤ –≤–∞—à–µ–º —Ü–µ–Ω–æ–≤–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ',
          icon: 'üí∞',
          color: '#4CAF50',
        );
      case RecommendationType.availability:
        return RecommendationTypeInfo(
          title: '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ–π—á–∞—Å',
          description: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è',
          icon: '‚è∞',
          color: '#8BC34A',
        );
    }
  }
}

/// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
class RecommendationTypeInfo {
  final String title;
  final String description;
  final String icon;
  final String color;

  const RecommendationTypeInfo({
    required this.title,
    required this.description,
    required this.icon,
    required this.color,
  });
}

/// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
class SpecialistRecommendation {
  final Recommendation recommendation;
  final Specialist specialist;
  final double relevanceScore;

  const SpecialistRecommendation({
    required this.recommendation,
    required this.specialist,
    required this.relevanceScore,
  });

  /// –°–æ–∑–¥–∞—ë—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
  factory SpecialistRecommendation.create({
    required Recommendation recommendation,
    required Specialist specialist,
    double? relevanceScore,
  }) {
    return SpecialistRecommendation(
      recommendation: recommendation,
      specialist: specialist,
      relevanceScore: relevanceScore ?? recommendation.score,
    );
  }
}

/// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
extension RecommendationListExtension on List<Recommendation> {
  /// –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É
  List<Recommendation> byType(RecommendationType type) {
    return where((rec) => rec.type == type).toList();
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  List<Recommendation> get valid => where((rec) => rec.isValid).toList();

  /// –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
  List<Recommendation> get sortedByScore => 
      toList()..sort((a, b) => b.score.compareTo(a.score));

  /// –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É
  Map<RecommendationType, List<Recommendation>> get groupedByType {
    final Map<RecommendationType, List<Recommendation>> grouped = {};
    for (final recommendation in this) {
      grouped.putIfAbsent(recommendation.type, () => []).add(recommendation);
    }
    return grouped;
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  List<Recommendation> top(int count) {
    return sortedByScore.take(count).toList();
  }
}

/// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
extension SpecialistRecommendationListExtension on List<SpecialistRecommendation> {
  /// –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É
  List<SpecialistRecommendation> byType(RecommendationType type) {
    return where((rec) => rec.recommendation.type == type).toList();
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
  List<SpecialistRecommendation> get sortedByRelevance => 
      toList()..sort((a, b) => b.relevanceScore.compareTo(a.relevanceScore));

  /// –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  List<SpecialistRecommendation> top(int count) {
    return sortedByRelevance.take(count).toList();
  }

  /// –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É
  Map<RecommendationType, List<SpecialistRecommendation>> get groupedByType {
    final Map<RecommendationType, List<SpecialistRecommendation>> grouped = {};
    for (final recommendation in this) {
      grouped.putIfAbsent(recommendation.recommendation.type, () => [])
          .add(recommendation);
    }
    return grouped;
  }
}

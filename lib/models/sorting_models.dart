/// –¢–∏–ø —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
enum SortBy { rating, price, distance, availability, experience, reviews, popularity, newest, name }

/// –ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
enum SortOrder { ascending, descending }

/// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è SortBy
extension SortByExtension on SortBy {
  /// –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  String get displayName {
    switch (this) {
      case SortBy.rating:
        return '–ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É';
      case SortBy.price:
        return '–ü–æ —Ü–µ–Ω–µ';
      case SortBy.distance:
        return '–ü–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é';
      case SortBy.availability:
        return '–ü–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏';
      case SortBy.experience:
        return '–ü–æ –æ–ø—ã—Ç—É';
      case SortBy.reviews:
        return '–ü–æ –æ—Ç–∑—ã–≤–∞–º';
      case SortBy.popularity:
        return '–ü–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏';
      case SortBy.newest:
        return '–ü–æ –Ω–æ–≤–∏–∑–Ω–µ';
      case SortBy.name:
        return '–ü–æ –∏–º–µ–Ω–∏';
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É —Ç–∏–ø–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  String get icon {
    switch (this) {
      case SortBy.rating:
        return '‚≠ê';
      case SortBy.price:
        return 'üí∞';
      case SortBy.distance:
        return 'üìç';
      case SortBy.availability:
        return '‚úÖ';
      case SortBy.experience:
        return 'üéØ';
      case SortBy.reviews:
        return 'üí¨';
      case SortBy.popularity:
        return 'üî•';
      case SortBy.newest:
        return 'üÜï';
      case SortBy.name:
        return 'üî§';
    }
  }
}

/// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è SortOrder
extension SortOrderExtension on SortOrder {
  /// –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  String get displayName {
    switch (this) {
      case SortOrder.ascending:
        return '–ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é';
      case SortOrder.descending:
        return '–ü–æ —É–±—ã–≤–∞–Ω–∏—é';
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –ø–æ—Ä—è–¥–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  String get icon {
    switch (this) {
      case SortOrder.ascending:
        return '‚¨ÜÔ∏è';
      case SortOrder.descending:
        return '‚¨áÔ∏è';
    }
  }
}

/// –ú–æ–¥–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
class SortingSettings {
  const SortingSettings({
    this.sortBy = SortBy.rating,
    this.sortOrder = SortOrder.descending,
    this.isCustom = false,
  });

  final SortBy sortBy;
  final SortOrder sortOrder;
  final bool isCustom;

  /// –°–æ–∑–¥–∞—Ç—å –∏–∑ Map
  factory SortingSettings.fromMap(Map<String, dynamic> data) {
    return SortingSettings(
      sortBy: _parseSortBy(data['sortBy']),
      sortOrder: _parseSortOrder(data['sortOrder']),
      isCustom: data['isCustom'] as bool? ?? false,
    );
  }

  /// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ Map
  Map<String, dynamic> toMap() => {
    'sortBy': sortBy.name,
    'sortOrder': sortOrder.name,
    'isCustom': isCustom,
  };

  /// –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
  SortingSettings copyWith({SortBy? sortBy, SortOrder? sortOrder, bool? isCustom}) =>
      SortingSettings(
        sortBy: sortBy ?? this.sortBy,
        sortOrder: sortOrder ?? this.sortOrder,
        isCustom: isCustom ?? this.isCustom,
      );

  /// –ü–∞—Ä—Å–∏–Ω–≥ —Ç–∏–ø–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏
  static SortBy _parseSortBy(String? sortBy) {
    switch (sortBy) {
      case 'rating':
        return SortBy.rating;
      case 'price':
        return SortBy.price;
      case 'distance':
        return SortBy.distance;
      case 'availability':
        return SortBy.availability;
      case 'experience':
        return SortBy.experience;
      case 'reviews':
        return SortBy.reviews;
      case 'popularity':
        return SortBy.popularity;
      case 'newest':
        return SortBy.newest;
      case 'name':
        return SortBy.name;
      default:
        return SortBy.rating;
    }
  }

  /// –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ—Ä—è–¥–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏
  static SortOrder _parseSortOrder(String? sortOrder) {
    switch (sortOrder) {
      case 'ascending':
        return SortOrder.ascending;
      case 'descending':
        return SortOrder.descending;
      default:
        return SortOrder.descending;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  String get displayName {
    return '${sortBy.displayName} (${sortOrder.displayName})';
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  bool get isDefault {
    return sortBy == SortBy.rating && sortOrder == SortOrder.descending && !isCustom;
  }
}

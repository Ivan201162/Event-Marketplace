import 'package:cloud_firestore/cloud_firestore.dart';

/// –ú–æ–¥–µ–ª—å –ø—Ä–æ—Ñ–∏–ª—è –≤–µ–¥—É—â–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
class HostProfile {
  const HostProfile({
    required this.id,
    required this.firstName,
    required this.lastName,
    this.photoUrl,
    required this.city,
    required this.eventCategories,
    required this.priceRange,
    required this.about,
    required this.rating,
    required this.totalReviews,
    required this.reviews,
    required this.availableDates,
    this.isVerified = false,
    required this.createdAt,
    required this.updatedAt,
  });

  factory HostProfile.fromFirestore(DocumentSnapshot doc) {
    final data = doc.data()! as Map<String, dynamic>;

    return HostProfile(
      id: doc.id,
      firstName: data['firstName'] as String? ?? '',
      lastName: data['lastName'] as String? ?? '',
      photoUrl: data['photoUrl'] as String?,
      city: data['city'] as String? ?? '',
      eventCategories: List<String>.from((data['eventCategories'] as List<dynamic>?) ?? []),
      priceRange: PriceRange.fromMap(
        Map<String, dynamic>.from(
          (data['priceRange'] as Map<dynamic, dynamic>?) ?? {},
        ),
      ),
      about: data['about'] as String? ?? '',
      rating: (data['rating'] as num? ?? 0.0).toDouble(),
      totalReviews: data['totalReviews'] as int? ?? 0,
      reviews: (data['reviews'] as List<dynamic>?)
              ?.map((review) => Review.fromMap(review as Map<String, dynamic>))
              .toList() ??
          [],
      availableDates: (data['availableDates'] as List<dynamic>?)
              ?.map((date) => (date as Timestamp).toDate())
              .toList() ??
          [],
      isVerified: data['isVerified'] as bool? ?? false,
      createdAt: (data['createdAt'] as Timestamp).toDate(),
      updatedAt: (data['updatedAt'] as Timestamp).toDate(),
    );
  }
  final String id;
  final String firstName;
  final String lastName;
  final String? photoUrl;
  final String city;
  final List<String> eventCategories;
  final PriceRange priceRange;
  final String about;
  final double rating;
  final int totalReviews;
  final List<Review> reviews;
  final List<DateTime> availableDates;
  final bool isVerified;
  final DateTime createdAt;
  final DateTime updatedAt;

  String get fullName => '$firstName $lastName';

  String get displayName => '$firstName $lastName';

  String get priceRangeText =>
      '–æ—Ç ${priceRange.minPrice.toStringAsFixed(0)} ‚ÇΩ –¥–æ ${priceRange.maxPrice.toStringAsFixed(0)} ‚ÇΩ';

  Map<String, dynamic> toFirestore() => {
        'firstName': firstName,
        'lastName': lastName,
        'photoUrl': photoUrl,
        'city': city,
        'eventCategories': eventCategories,
        'priceRange': priceRange.toMap(),
        'about': about,
        'rating': rating,
        'totalReviews': totalReviews,
        'reviews': reviews.map((review) => review.toMap()).toList(),
        'availableDates': availableDates.map(Timestamp.fromDate).toList(),
        'isVerified': isVerified,
        'createdAt': Timestamp.fromDate(createdAt),
        'updatedAt': Timestamp.fromDate(updatedAt),
      };

  HostProfile copyWith({
    String? id,
    String? firstName,
    String? lastName,
    String? photoUrl,
    String? city,
    List<String>? eventCategories,
    PriceRange? priceRange,
    String? about,
    double? rating,
    int? totalReviews,
    List<Review>? reviews,
    List<DateTime>? availableDates,
    bool? isVerified,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) =>
      HostProfile(
        id: id ?? this.id,
        firstName: firstName ?? this.firstName,
        lastName: lastName ?? this.lastName,
        photoUrl: photoUrl ?? this.photoUrl,
        city: city ?? this.city,
        eventCategories: eventCategories ?? this.eventCategories,
        priceRange: priceRange ?? this.priceRange,
        about: about ?? this.about,
        rating: rating ?? this.rating,
        totalReviews: totalReviews ?? this.totalReviews,
        reviews: reviews ?? this.reviews,
        availableDates: availableDates ?? this.availableDates,
        isVerified: isVerified ?? this.isVerified,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
      );
}

/// –ú–æ–¥–µ–ª—å —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
class PriceRange {
  const PriceRange({
    required this.minPrice,
    required this.maxPrice,
    this.currency = 'RUB',
  });

  factory PriceRange.fromMap(Map<String, dynamic> map) => PriceRange(
        minPrice: (map['minPrice'] as num? ?? 0.0).toDouble(),
        maxPrice: (map['maxPrice'] as num? ?? 0.0).toDouble(),
        currency: map['currency'] as String? ?? 'RUB',
      );
  final double minPrice;
  final double maxPrice;
  final String currency;

  Map<String, dynamic> toMap() => {
        'minPrice': minPrice,
        'maxPrice': maxPrice,
        'currency': currency,
      };
}

/// –ú–æ–¥–µ–ª—å –æ—Ç–∑—ã–≤–∞
class Review {
  const Review({
    required this.id,
    required this.userId,
    required this.userName,
    this.userPhotoUrl,
    required this.rating,
    required this.comment,
    required this.createdAt,
    required this.eventType,
  });

  factory Review.fromMap(Map<String, dynamic> map) => Review(
        id: map['id'] as String? ?? '',
        userId: map['userId'] as String? ?? '',
        userName: map['userName'] as String? ?? '',
        userPhotoUrl: map['userPhotoUrl'] as String?,
        rating: (map['rating'] as num? ?? 0.0).toDouble(),
        comment: map['comment'] as String? ?? '',
        createdAt: (map['createdAt'] as Timestamp).toDate(),
        eventType: map['eventType'] as String? ?? '',
      );
  final String id;
  final String userId;
  final String userName;
  final String? userPhotoUrl;
  final double rating;
  final String comment;
  final DateTime createdAt;
  final String eventType;

  Map<String, dynamic> toMap() => {
        'id': id,
        'userId': userId,
        'userName': userName,
        'userPhotoUrl': userPhotoUrl,
        'rating': rating,
        'comment': comment,
        'createdAt': Timestamp.fromDate(createdAt),
        'eventType': eventType,
      };
}

/// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
enum EventCategory {
  wedding('–°–≤–∞–¥—å–±—ã', 'üíí'),
  anniversary('–Æ–±–∏–ª–µ–∏', 'üéÇ'),
  corporate('–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤—ã', 'üè¢'),
  birthday('–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è', 'üéâ'),
  graduation('–í—ã–ø—É—Å–∫–Ω—ã–µ', 'üéì'),
  children('–î–µ—Ç—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏', 'üéà'),
  newYear('–ù–æ–≤–æ–≥–æ–¥–Ω–∏–µ', 'üéÑ'),
  other('–î—Ä—É–≥–∏–µ', 'üéä');

  const EventCategory(this.displayName, this.emoji);

  final String displayName;
  final String emoji;
}

/// Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class MockHostData {
  static HostProfile get sampleHost => HostProfile(
        id: 'host_001',
        firstName: '–ê–ª–µ–∫—Å–µ–π',
        lastName: '–°–º–∏—Ä–Ω–æ–≤',
        photoUrl:
            'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=400&h=400&fit=crop&crop=face',
        city: '–ú–æ—Å–∫–≤–∞',
        eventCategories: [
          EventCategory.wedding.displayName,
          EventCategory.anniversary.displayName,
          EventCategory.corporate.displayName,
          EventCategory.birthday.displayName,
        ],
        priceRange: const PriceRange(
          minPrice: 15000,
          maxPrice: 35000,
        ),
        about:
            '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤–µ–¥—É—â–∏–π —Å 8-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ —Å–≤–∞–¥–µ–±–Ω—ã—Ö —Ü–µ—Ä–µ–º–æ–Ω–∏—è—Ö –∏ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö. –°–æ–∑–¥–∞—é –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞, —É—á–∏—Ç—ã–≤–∞—è –≤—Å–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –ò–º–µ—é –º—É–∑—ã–∫–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º–∏ –≥—Ä—É–ø–ø–∞–º–∏.',
        rating: 4.8,
        totalReviews: 127,
        reviews: MockHostData.sampleReviews,
        availableDates: MockHostData.sampleAvailableDates,
        isVerified: true,
        createdAt: DateTime.now().subtract(const Duration(days: 365)),
        updatedAt: DateTime.now(),
      );

  static List<Review> get sampleReviews => [
        Review(
          id: 'review_001',
          userId: 'user_001',
          userName: '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞',
          userPhotoUrl:
              'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=100&h=100&fit=crop&crop=face',
          rating: 5,
          comment:
              '–ê–ª–µ–∫—Å–µ–π - –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–π –≤–µ–¥—É—â–∏–π! –ù–∞—à–∞ —Å–≤–∞–¥—å–±–∞ –ø—Ä–æ—à–ª–∞ –∏–¥–µ–∞–ª—å–Ω–æ. –û–Ω —É–º–µ–µ—Ç —Å–æ–∑–¥–∞—Ç—å –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –¥–µ—Ä–∂–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –≥–æ—Å—Ç–µ–π. –û—á–µ–Ω—å —Ä–µ–∫–æ–º–µ–Ω–¥—É—é!',
          createdAt: DateTime(2024, 11, 15),
          eventType: '–°–≤–∞–¥—å–±–∞',
        ),
        Review(
          id: 'review_002',
          userId: 'user_002',
          userName: '–ú–∏—Ö–∞–∏–ª –ö–æ–∑–ª–æ–≤',
          userPhotoUrl:
              'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face',
          rating: 4.5,
          comment:
              '–û—Ç–ª–∏—á–Ω—ã–π –≤–µ–¥—É—â–∏–π –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–∞! –í—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –æ—Å—Ç–∞–ª–∏—Å—å –¥–æ–≤–æ–ª—å–Ω—ã. –ê–ª–µ–∫—Å–µ–π —É–º–µ–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ª—é–±–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π.',
          createdAt: DateTime(2024, 10, 28),
          eventType: '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤',
        ),
        Review(
          id: 'review_003',
          userId: 'user_003',
          userName: '–ï–ª–µ–Ω–∞ –í–æ–ª–∫–æ–≤–∞',
          userPhotoUrl:
              'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=100&h=100&fit=crop&crop=face',
          rating: 5,
          comment:
              '–í–µ–¥—É—â–∏–π —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã! –û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–ª —é–±–∏–ª–µ–π –º–æ–∏—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π –Ω–∞ –≤—ã—Å—à–µ–º —É—Ä–æ–≤–Ω–µ. –í—Å–µ –≥–æ—Å—Ç–∏ –¥–æ —Å–∏—Ö –ø–æ—Ä –≤—Å–ø–æ–º–∏–Ω–∞—é—Ç —ç—Ç–æ—Ç –≤–µ—á–µ—Ä.',
          createdAt: DateTime(2024, 9, 12),
          eventType: '–Æ–±–∏–ª–µ–π',
        ),
      ];

  static List<DateTime> get sampleAvailableDates => [
        DateTime.now().add(const Duration(days: 7)),
        DateTime.now().add(const Duration(days: 14)),
        DateTime.now().add(const Duration(days: 21)),
        DateTime.now().add(const Duration(days: 28)),
        DateTime.now().add(const Duration(days: 35)),
        DateTime.now().add(const Duration(days: 42)),
        DateTime.now().add(const Duration(days: 49)),
        DateTime.now().add(const Duration(days: 56)),
      ];
}

import 'package:cloud_firestore/cloud_firestore.dart';

/// –¢–∏–ø—ã –±–µ–π–¥–∂–µ–π
enum BadgeType {
  // –ë–µ–π–¥–∂–∏ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
  firstBooking, // –ü–µ—Ä–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
  tenBookings, // 10 —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
  fiftyBookings, // 50 —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
  hundredBookings, // 100 —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
  fiveStarRating, // –†–µ–π—Ç–∏–Ω–≥ 5.0
  topRated, // –¢–æ–ø-—Ä–µ–π—Ç–∏–Ω–≥
  quickResponder, // –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç
  popularSpecialist, // –ü–æ–ø—É–ª—è—Ä–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç
  qualityMaster, // –ú–∞—Å—Ç–µ—Ä –∫–∞—á–µ—Å—Ç–≤–∞
  customerFavorite, // –õ—é–±–∏–º–µ—Ü –∫–ª–∏–µ–Ω—Ç–æ–≤
  // –ë–µ–π–¥–∂–∏ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–æ–≤
  firstEvent, // –ü–µ—Ä–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
  regularCustomer, // –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
  eventOrganizer, // –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
  reviewWriter, // –ê–∫—Ç–∏–≤–Ω—ã–π —Ä–µ—Ü–µ–Ω–∑–µ–Ω—Ç
  earlyBird, // –†–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞ (–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞ –º–µ—Å—è—Ü)
  loyalCustomer, // –õ–æ—è–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
  socialButterfly, // –°–æ—Ü–∏–∞–ª—å–Ω–∞—è –±–∞–±–æ—á–∫–∞ (–º–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π)
  trendsetter, // –¢—Ä–µ–Ω–¥—Å–µ—Ç—Ç–µ—Ä (–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
  // –û–±—â–∏–µ –±–µ–π–¥–∂–∏
  earlyAdopter, // –†–∞–Ω–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  communityHelper, // –ü–æ–º–æ—â–Ω–∏–∫ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
  feedbackProvider, // –ü–æ—Å—Ç–∞–≤—â–∏–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
}

/// –ú–æ–¥–µ–ª—å –±–µ–π–¥–∂–∞
class Badge {
  const Badge({
    required this.id,
    required this.userId,
    required this.type,
    required this.title,
    required this.description,
    required this.icon,
    required this.color,
    required this.earnedAt,
    this.isVisible = true,
    this.metadata = const {},
  });

  /// –°–æ–∑–¥–∞—ë—Ç –±–µ–π–¥–∂ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ Firestore
  factory Badge.fromDocument(DocumentSnapshot doc) {
    final data = doc.data()! as Map<String, dynamic>;

    return Badge(
      id: doc.id,
      userId: data['userId'] as String,
      type: BadgeType.values.firstWhere(
        (e) => e.name == data['type'],
        orElse: () => BadgeType.firstBooking,
      ),
      title: data['title'] as String,
      description: data['description'] as String,
      icon: data['icon'] as String,
      color: data['color'] as String,
      earnedAt: (data['earnedAt'] as Timestamp).toDate(),
      isVisible: data['isVisible'] as bool? ?? true,
      metadata: Map<String, dynamic>.from(data['metadata'] as Map? ?? {}),
    );
  }
  final String id;
  final String userId;
  final BadgeType type;
  final String title;
  final String description;
  final String icon;
  final String color;
  final DateTime earnedAt;
  final bool isVisible;
  final Map<String, dynamic> metadata;

  /// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –±–µ–π–¥–∂ –≤ Map –¥–ª—è Firestore
  Map<String, dynamic> toMap() => {
    'userId': userId,
    'type': type.name,
    'title': title,
    'description': description,
    'icon': icon,
    'color': color,
    'earnedAt': Timestamp.fromDate(earnedAt),
    'isVisible': isVisible,
    'metadata': metadata,
  };

  /// –°–æ–∑–¥–∞—ë—Ç –∫–æ–ø–∏—é –±–µ–π–¥–∂–∞ —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
  Badge copyWith({
    String? id,
    String? userId,
    BadgeType? type,
    String? title,
    String? description,
    String? icon,
    String? color,
    DateTime? earnedAt,
    bool? isVisible,
    Map<String, dynamic>? metadata,
  }) => Badge(
    id: id ?? this.id,
    userId: userId ?? this.userId,
    type: type ?? this.type,
    title: title ?? this.title,
    description: description ?? this.description,
    icon: icon ?? this.icon,
    color: color ?? this.color,
    earnedAt: earnedAt ?? this.earnedAt,
    isVisible: isVisible ?? this.isVisible,
    metadata: metadata ?? this.metadata,
  );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is Badge && other.id == id;
  }

  @override
  int get hashCode => id.hashCode;

  @override
  String toString() => 'Badge(id: $id, type: $type, title: $title)';
}

/// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è BadgeType
extension BadgeTypeExtension on BadgeType {
  /// –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–µ–π–¥–∂–µ
  BadgeInfo get info {
    switch (this) {
      // –ë–µ–π–¥–∂–∏ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
      case BadgeType.firstBooking:
        return const BadgeInfo(
          title: '–ü–µ—Ä–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
          description: '–ü–æ–ª—É—á–∏–ª–∏ –ø–µ—Ä–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
          icon: 'üéØ',
          color: '#4CAF50',
          category: BadgeCategory.specialist,
        );
      case BadgeType.tenBookings:
        return const BadgeInfo(
          title: '10 —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤',
          description: '–í—ã–ø–æ–ª–Ω–∏–ª–∏ 10 —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤',
          icon: '‚≠ê',
          color: '#FFD700',
          category: BadgeCategory.specialist,
        );
      case BadgeType.fiftyBookings:
        return const BadgeInfo(
          title: '50 —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤',
          description: '–í—ã–ø–æ–ª–Ω–∏–ª–∏ 50 —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤',
          icon: 'üèÜ',
          color: '#FF9800',
          category: BadgeCategory.specialist,
        );
      case BadgeType.hundredBookings:
        return const BadgeInfo(
          title: '100 —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤',
          description: '–í—ã–ø–æ–ª–Ω–∏–ª–∏ 100 —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤',
          icon: 'üëë',
          color: '#9C27B0',
          category: BadgeCategory.specialist,
        );
      case BadgeType.fiveStarRating:
        return const BadgeInfo(
          title: '–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥',
          description: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ 5.0',
          icon: '‚ú®',
          color: '#E91E63',
          category: BadgeCategory.specialist,
        );
      case BadgeType.topRated:
        return const BadgeInfo(
          title: '–¢–æ–ø-—Ä–µ–π—Ç–∏–Ω–≥',
          description: '–í—Ö–æ–¥–∏—Ç–µ –≤ —Ç–æ–ø-10 —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤',
          icon: 'ü•á',
          color: '#FF5722',
          category: BadgeCategory.specialist,
        );
      case BadgeType.quickResponder:
        return const BadgeInfo(
          title: '–ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç',
          description: '–û—Ç–≤–µ—á–∞–µ—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞',
          icon: '‚ö°',
          color: '#00BCD4',
          category: BadgeCategory.specialist,
        );
      case BadgeType.popularSpecialist:
        return const BadgeInfo(
          title: '–ü–æ–ø—É–ª—è—Ä–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç',
          description: '–ü–æ–ø—É–ª—è—Ä–Ω—ã —Å—Ä–µ–¥–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤',
          icon: 'üî•',
          color: '#F44336',
          category: BadgeCategory.specialist,
        );
      case BadgeType.qualityMaster:
        return const BadgeInfo(
          title: '–ú–∞—Å—Ç–µ—Ä –∫–∞—á–µ—Å—Ç–≤–∞',
          description: '–í—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç–µ –æ—Ç–ª–∏—á–Ω—ã–µ –æ—Ç–∑—ã–≤—ã',
          icon: 'üé®',
          color: '#3F51B5',
          category: BadgeCategory.specialist,
        );
      case BadgeType.customerFavorite:
        return const BadgeInfo(
          title: '–õ—é–±–∏–º–µ—Ü –∫–ª–∏–µ–Ω—Ç–æ–≤',
          description: '–ö–ª–∏–µ–Ω—Ç—ã —á–∞—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –∫ –≤–∞–º',
          icon: 'üíñ',
          color: '#E91E63',
          category: BadgeCategory.specialist,
        );

      // –ë–µ–π–¥–∂–∏ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–æ–≤
      case BadgeType.firstEvent:
        return const BadgeInfo(
          title: '–ü–µ—Ä–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ',
          description: '–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–ª–∏ –ø–µ—Ä–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ',
          icon: 'üéâ',
          color: '#4CAF50',
          category: BadgeCategory.customer,
        );
      case BadgeType.regularCustomer:
        return const BadgeInfo(
          title: '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç',
          description: '–†–µ–≥—É–ª—è—Ä–Ω–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å —É—Å–ª—É–≥–∞–º–∏',
          icon: 'üîÑ',
          color: '#2196F3',
          category: BadgeCategory.customer,
        );
      case BadgeType.eventOrganizer:
        return const BadgeInfo(
          title: '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π',
          description: '–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–ª–∏ 5+ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π',
          icon: 'üìÖ',
          color: '#FF9800',
          category: BadgeCategory.customer,
        );
      case BadgeType.reviewWriter:
        return const BadgeInfo(
          title: '–ê–∫—Ç–∏–≤–Ω—ã–π —Ä–µ—Ü–µ–Ω–∑–µ–Ω—Ç',
          description: '–û—Å—Ç–∞–≤–ª—è–µ—Ç–µ –æ—Ç–∑—ã–≤—ã –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞',
          icon: '‚úçÔ∏è',
          color: '#9C27B0',
          category: BadgeCategory.customer,
        );
      case BadgeType.earlyBird:
        return const BadgeInfo(
          title: '–†–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞',
          description: '–ë—Ä–æ–Ω–∏—Ä—É–µ—Ç–µ —É—Å–ª—É–≥–∏ –∑–∞—Ä–∞–Ω–µ–µ',
          icon: 'üê¶',
          color: '#00BCD4',
          category: BadgeCategory.customer,
        );
      case BadgeType.loyalCustomer:
        return const BadgeInfo(
          title: '–õ–æ—è–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç',
          description: '–ü–æ–ª—å–∑—É–µ—Ç–µ—Å—å —É—Å–ª—É–≥–∞–º–∏ –±–æ–ª–µ–µ –≥–æ–¥–∞',
          icon: 'üíé',
          color: '#607D8B',
          category: BadgeCategory.customer,
        );
      case BadgeType.socialButterfly:
        return const BadgeInfo(
          title: '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –±–∞–±–æ—á–∫–∞',
          description: '–û—Ä–≥–∞–Ω–∏–∑—É–µ—Ç–µ –º–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π',
          icon: 'ü¶ã',
          color: '#E91E63',
          category: BadgeCategory.customer,
        );
      case BadgeType.trendsetter:
        return const BadgeInfo(
          title: '–¢—Ä–µ–Ω–¥—Å–µ—Ç—Ç–µ—Ä',
          description: '–í—ã–±–∏—Ä–∞–µ—Ç–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
          icon: 'üìà',
          color: '#4CAF50',
          category: BadgeCategory.customer,
        );

      // –û–±—â–∏–µ –±–µ–π–¥–∂–∏
      case BadgeType.earlyAdopter:
        return const BadgeInfo(
          title: '–†–∞–Ω–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          description: '–û–¥–Ω–∏ –∏–∑ –ø–µ—Ä–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
          icon: 'üöÄ',
          color: '#FF5722',
          category: BadgeCategory.general,
        );
      case BadgeType.communityHelper:
        return const BadgeInfo(
          title: '–ü–æ–º–æ—â–Ω–∏–∫ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞',
          description: '–ü–æ–º–æ–≥–∞–µ—Ç–µ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
          icon: 'ü§ù',
          color: '#4CAF50',
          category: BadgeCategory.general,
        );
      case BadgeType.feedbackProvider:
        return const BadgeInfo(
          title: '–ü–æ—Å—Ç–∞–≤—â–∏–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏',
          description: '–ê–∫—Ç–∏–≤–Ω–æ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —É–ª—É—á—à–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
          icon: 'üí°',
          color: '#FF9800',
          category: BadgeCategory.general,
        );
    }
  }
}

/// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–µ–π–¥–∂–µ
class BadgeInfo {
  const BadgeInfo({
    required this.title,
    required this.description,
    required this.icon,
    required this.color,
    required this.category,
  });
  final String title;
  final String description;
  final String icon;
  final String color;
  final BadgeCategory category;
}

/// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–µ–π–¥–∂–µ–π
enum BadgeCategory { specialist, customer, general }

/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–π–¥–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class BadgeStats {
  const BadgeStats({
    required this.totalBadges,
    required this.earnedBadges,
    required this.availableBadges,
    required this.recentBadges,
    required this.badgesByCategory,
    this.specialistBadges = 0,
    this.customerBadges = 0,
    this.generalBadges = 0,
  });

  final int totalBadges;
  final int earnedBadges;
  final int availableBadges;
  final List<Badge> recentBadges;
  final Map<BadgeCategory, int> badgesByCategory;
  final int specialistBadges;
  final int customerBadges;
  final int generalBadges;

  static const BadgeStats empty = BadgeStats(
    totalBadges: 0,
    earnedBadges: 0,
    availableBadges: 0,
    recentBadges: [],
    badgesByCategory: {},
  );
}

/// –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –±–µ–π–¥–∂–∞–º
class BadgeLeaderboardEntry {
  const BadgeLeaderboardEntry({
    required this.userId,
    required this.userName,
    required this.userAvatar,
    required this.badgeCount,
    required this.rank,
    required this.recentBadges,
  });

  final String userId;
  final String userName;
  final String? userAvatar;
  final int badgeCount;
  final int rank;
  final List<Badge> recentBadges;
}

/// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–µ–π–¥–∂–∞–º–∏
extension BadgeListExtension on List<Badge> {
  /// –ü–æ–ª—É—á–∞–µ—Ç –±–µ–π–¥–∂–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  List<Badge> byCategory(BadgeCategory category) =>
      where((badge) => badge.type.info.category == category).toList();

  /// –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –±–µ–π–¥–∂–∏
  List<Badge> get recent => toList()..sort((a, b) => b.earnedAt.compareTo(a.earnedAt));

  /// –ü–æ–ª—É—á–∞–µ—Ç –≤–∏–¥–∏–º—ã–µ –±–µ–π–¥–∂–∏
  List<Badge> get visible => where((badge) => badge.isVisible).toList();

  /// –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –±–µ–π–¥–∂–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  Map<BadgeCategory, List<Badge>> get groupedByCategory {
    final grouped = <BadgeCategory, List<Badge>>{};
    for (final badge in this) {
      final category = badge.type.info.category;
      grouped.putIfAbsent(category, () => []).add(badge);
    }
    return grouped;
  }
}

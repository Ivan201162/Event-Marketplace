import 'package:cloud_firestore/cloud_firestore.dart';

import 'price_range.dart';
import 'tax_info.dart';

/// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
enum SpecialistCategory {
  // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  photographer, // –§–æ—Ç–æ–≥—Ä–∞—Ñ
  videographer, // –í–∏–¥–µ–æ–≥—Ä–∞—Ñ
  dj, // DJ
  host, // –í–µ–¥—É—â–∏–π
  decorator, // –î–µ–∫–æ—Ä–∞—Ç–æ—Ä
  musician, // –ú—É–∑—ã–∫–∞–Ω—Ç
  caterer, // –ö–µ–π—Ç–µ—Ä–∏–Ω–≥
  security, // –û—Ö—Ä–∞–Ω–∞
  technician, // –¢–µ—Ö–Ω–∏–∫

  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  animator, // –ê–Ω–∏–º–∞—Ç–æ—Ä
  florist, // –§–ª–æ—Ä–∏—Å—Ç
  lighting, // –°–≤–µ—Ç–æ–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
  sound, // –ó–≤—É–∫–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
  costume, // –ü–ª–∞—Ç—å—è/–∫–æ—Å—Ç—é–º—ã
  fireShow, // –§–∞–µ—Ä-—à–æ—É
  fireworks, // –°–∞–ª—é—Ç—ã
  lightShow, // –°–≤–µ—Ç–æ–≤—ã–µ —à–æ—É
  coverBand, // –ö–∞–≤–µ—Ä-–≥—Ä—É–ø–ø—ã
  teamBuilding, // –¢–∏–º–±–∏–ª–¥–∏–Ω–≥–∏
  cleaning, // –ö–ª–∏–Ω–∏–Ω–≥
  rental, // –ê—Ä–µ–Ω–¥–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
  makeup, // –í–∏–∑–∞–∂–∏—Å—Ç
  hairstylist, // –ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä
  stylist, // –°—Ç–∏–ª–∏—Å—Ç
  choreographer, // –•–æ—Ä–µ–æ–≥—Ä–∞—Ñ
  dance, // –¢–∞–Ω—Ü—ã
  magic, // –§–æ–∫—É—Å—ã/–∏–ª–ª—é–∑–∏–æ–Ω–∏—Å—Ç
  clown, // –ö–ª–æ—É–Ω
  balloon, // –ê—ç—Ä–æ–¥–∏–∑–∞–π–Ω
  cake, // –¢–æ—Ä—Ç—ã/–∫–æ–Ω–¥–∏—Ç–µ—Ä
  transport, // –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
  venue, // –ü–ª–æ—â–∞–¥–∫–∏
  studio, // –§–æ—Ç–æ—Å—Ç—É–¥–∏—è
  other, // –î—Ä—É–≥–æ–µ
}

/// –£—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
enum ExperienceLevel {
  beginner, // –ù–∞—á–∏–Ω–∞—é—â–∏–π
  intermediate, // –°—Ä–µ–¥–Ω–∏–π
  advanced, // –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π
  expert, // –≠–∫—Å–ø–µ—Ä—Ç
}

/// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è SpecialistCategory
extension SpecialistCategoryExtension on SpecialistCategory {
  /// –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  String get displayName {
    switch (this) {
      case SpecialistCategory.photographer:
        return '–§–æ—Ç–æ–≥—Ä–∞—Ñ';
      case SpecialistCategory.videographer:
        return '–í–∏–¥–µ–æ–≥—Ä–∞—Ñ';
      case SpecialistCategory.dj:
        return 'DJ';
      case SpecialistCategory.host:
        return '–í–µ–¥—É—â–∏–π';
      case SpecialistCategory.decorator:
        return '–î–µ–∫–æ—Ä–∞—Ç–æ—Ä';
      case SpecialistCategory.musician:
        return '–ú—É–∑—ã–∫–∞–Ω—Ç';
      case SpecialistCategory.caterer:
        return '–ö–µ–π—Ç–µ—Ä–∏–Ω–≥';
      case SpecialistCategory.security:
        return '–û—Ö—Ä–∞–Ω–∞';
      case SpecialistCategory.technician:
        return '–¢–µ—Ö–Ω–∏–∫';
      case SpecialistCategory.animator:
        return '–ê–Ω–∏–º–∞—Ç–æ—Ä';
      case SpecialistCategory.florist:
        return '–§–ª–æ—Ä–∏—Å—Ç';
      case SpecialistCategory.lighting:
        return '–°–≤–µ—Ç–æ–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ';
      case SpecialistCategory.sound:
        return '–ó–≤—É–∫–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ';
      case SpecialistCategory.costume:
        return '–ü–ª–∞—Ç—å—è/–∫–æ—Å—Ç—é–º—ã';
      case SpecialistCategory.fireShow:
        return '–§–∞–µ—Ä-—à–æ—É';
      case SpecialistCategory.fireworks:
        return '–°–∞–ª—é—Ç—ã';
      case SpecialistCategory.lightShow:
        return '–°–≤–µ—Ç–æ–≤—ã–µ —à–æ—É';
      case SpecialistCategory.coverBand:
        return '–ö–∞–≤–µ—Ä-–≥—Ä—É–ø–ø—ã';
      case SpecialistCategory.teamBuilding:
        return '–¢–∏–º–±–∏–ª–¥–∏–Ω–≥–∏';
      case SpecialistCategory.cleaning:
        return '–ö–ª–∏–Ω–∏–Ω–≥';
      case SpecialistCategory.rental:
        return '–ê—Ä–µ–Ω–¥–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è';
      case SpecialistCategory.makeup:
        return '–í–∏–∑–∞–∂–∏—Å—Ç';
      case SpecialistCategory.hairstylist:
        return '–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä';
      case SpecialistCategory.stylist:
        return '–°—Ç–∏–ª–∏—Å—Ç';
      case SpecialistCategory.choreographer:
        return '–•–æ—Ä–µ–æ–≥—Ä–∞—Ñ';
      case SpecialistCategory.dance:
        return '–¢–∞–Ω—Ü—ã';
      case SpecialistCategory.magic:
        return '–§–æ–∫—É—Å—ã/–∏–ª–ª—é–∑–∏–æ–Ω–∏—Å—Ç';
      case SpecialistCategory.clown:
        return '–ö–ª–æ—É–Ω';
      case SpecialistCategory.balloon:
        return '–ê—ç—Ä–æ–¥–∏–∑–∞–π–Ω';
      case SpecialistCategory.cake:
        return '–¢–æ—Ä—Ç—ã/–∫–æ–Ω–¥–∏—Ç–µ—Ä';
      case SpecialistCategory.transport:
        return '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç';
      case SpecialistCategory.venue:
        return '–ü–ª–æ—â–∞–¥–∫–∏';
      case SpecialistCategory.studio:
        return '–§–æ—Ç–æ—Å—Ç—É–¥–∏—è';
      case SpecialistCategory.other:
        return '–î—Ä—É–≥–æ–µ';
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –ø—É—Å—Ç–∞—è –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
  bool get isNotEmpty => this != SpecialistCategory.other;

  String get icon {
    switch (this) {
      case SpecialistCategory.photographer:
        return 'üì∏';
      case SpecialistCategory.videographer:
        return 'üé•';
      case SpecialistCategory.dj:
        return 'üéß';
      case SpecialistCategory.host:
        return 'üé§';
      case SpecialistCategory.decorator:
        return 'üé®';
      case SpecialistCategory.musician:
        return 'üéµ';
      case SpecialistCategory.caterer:
        return 'üçΩÔ∏è';
      case SpecialistCategory.security:
        return 'üõ°Ô∏è';
      case SpecialistCategory.technician:
        return 'üîß';
      case SpecialistCategory.animator:
        return 'üé≠';
      case SpecialistCategory.florist:
        return 'üå∏';
      case SpecialistCategory.lighting:
        return 'üí°';
      case SpecialistCategory.sound:
        return 'üîä';
      case SpecialistCategory.costume:
        return 'üëó';
      case SpecialistCategory.fireShow:
        return 'üî•';
      case SpecialistCategory.fireworks:
        return 'üéÜ';
      case SpecialistCategory.lightShow:
        return '‚ú®';
      case SpecialistCategory.coverBand:
        return 'üé∏';
      case SpecialistCategory.teamBuilding:
        return 'ü§ù';
      case SpecialistCategory.cleaning:
        return 'üßπ';
      case SpecialistCategory.rental:
        return 'üì¶';
      case SpecialistCategory.makeup:
        return 'üíÑ';
      case SpecialistCategory.hairstylist:
        return 'üíá';
      case SpecialistCategory.stylist:
        return 'üëî';
      case SpecialistCategory.choreographer:
        return 'üíÉ';
      case SpecialistCategory.dance:
        return 'üï∫';
      case SpecialistCategory.magic:
        return 'üé©';
      case SpecialistCategory.clown:
        return 'ü§°';
      case SpecialistCategory.balloon:
        return 'üéà';
      case SpecialistCategory.cake:
        return 'üéÇ';
      case SpecialistCategory.transport:
        return 'üöó';
      case SpecialistCategory.venue:
        return 'üè¢';
      case SpecialistCategory.studio:
        return 'üì∏';
      case SpecialistCategory.other:
        return '‚≠ê';
    }
  }
}

/// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π —É—Ä–æ–≤–Ω–µ–π –æ–ø—ã—Ç–∞
extension ExperienceLevelExtension on ExperienceLevel {
  String get displayName {
    switch (this) {
      case ExperienceLevel.beginner:
        return '–ù–∞—á–∏–Ω–∞—é—â–∏–π';
      case ExperienceLevel.intermediate:
        return '–°—Ä–µ–¥–Ω–∏–π';
      case ExperienceLevel.advanced:
        return '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π';
      case ExperienceLevel.expert:
        return '–≠–∫—Å–ø–µ—Ä—Ç';
    }
  }
}

/// –ú–æ–¥–µ–ª—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
class Specialist {
  const Specialist({
    required this.id,
    required this.userId,
    required this.name,
    this.description,
    this.bio,
    required this.category,
    this.categories = const [],
    this.subcategories = const [],
    required this.experienceLevel,
    required this.yearsOfExperience,
    required this.hourlyRate,
    required this.price, // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ —Ü–µ–Ω—ã
    this.pricePerHour,
    this.minBookingHours,
    this.maxBookingHours,
    this.min,
    this.serviceAreas = const [],
    this.languages = const [],
    this.equipment = const [],
    this.services = const [],
    this.portfolio = const [],
    this.portfolioImages = const [],
    this.portfolioVideos = const [],
    this.portfolioItems = const [],
    this.reviews = const [],
    this.avgRating = 0.0,
    this.workingHours = const {},
    this.location,
    this.contactInfo,
    this.businessInfo,
    this.isAvailable = true,
    this.isVerified = false,
    this.rating = 0.0,
    this.reviewCount = 0,
    this.imageUrl,
    this.experience,
    this.availableDates = const [],
    required this.createdAt,
    required this.updatedAt,
    this.lastActiveAt,
    this.metadata,
    this.avatarUrl,
    this.avatar,
    this.specialization,
    this.phone,
    this.profileImageUrl,
    this.coverImageUrl,
    this.socialLinks = const {},
    this.certifications = const [],
    this.awards = const [],
    this.insurance = false,
    this.travelRadius,
    this.busyDates = const [], // –ó–∞–Ω—è—Ç—ã–µ –¥–∞—Ç—ã
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    this.firstName,
    this.lastName,
    this.city,
    this.photoUrl,
    this.totalReviews,
    this.priceRange,
    this.responseTime,
    this.completionRate,
    this.cancellationRate,
    this.averageResponseTime,
    this.totalBookings,
    this.totalEarnings,
    this.isOnline,
    this.isPremium,
    this.premiumExpiresAt,
    this.email,
    this.lastPriceUpdateAt,
    this.avgPriceByService, // –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ —É—Å–ª—É–≥–∞–º
    this.taxType, // –¢–∏–ø –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è
    // –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è Instagram/–í–ö-—Å—Ç–∏–ª—è –ø—Ä–æ—Ñ–∏–ª—è
    this.contacts = const {}, // –ö–æ–Ω—Ç–∞–∫—Ç—ã (—Ç–µ–ª–µ—Ñ–æ–Ω, email, —Å–æ—Ü—Å–µ—Ç–∏)
    this.servicesWithPrices = const {}, // –£—Å–ª—É–≥–∏ —Å —Ü–µ–Ω–∞–º–∏ (–Ω–∞–∑–≤–∞–Ω–∏–µ -> —Ü–µ–Ω–∞)
  });

  /// –°–æ–∑–¥–∞—Ç—å –∏–∑ Map
  factory Specialist.fromMap(Map<String, dynamic> data) {
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    return Specialist(
      id: data['id'] as String? ?? '',
      userId: data['userId'] as String? ?? '',
      name: data['name'] as String? ?? '',
      phone: data['phone'] as String?,
      description: data['description'] as String?,
      category: SpecialistCategory.values.firstWhere(
        (e) => e.name == (data['category'] as String?),
        orElse: () => SpecialistCategory.other,
      ),
      hourlyRate: (data['hourlyRate'] as num?)?.toDouble() ?? 0.0,
      price: (data['price'] as num?)?.toDouble() ?? 0.0, // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞
      yearsOfExperience: data['yearsOfExperience'] as int? ?? 0,
      categories: (data['categories'] as List<dynamic>?)
              ?.map(
                (e) => SpecialistCategory.values.firstWhere(
                  (cat) => cat.name == e,
                  orElse: () => SpecialistCategory.other,
                ),
              )
              .toList() ??
          [],
      experienceLevel: ExperienceLevel.values.firstWhere(
        (e) => e.name == data['experienceLevel'],
        orElse: () => ExperienceLevel.beginner,
      ),
      rating: (data['rating'] as num?)?.toDouble() ?? 0.0,
      reviewCount: data['reviewCount'] as int? ?? 0,
      imageUrl: data['imageUrl'] as String?,
      experience: data['experience'] as String?,
      availableDates: (data['availableDates'] as List<dynamic>? ?? [])
          .map(
            (e) => e is String
                ? DateTime.tryParse(e)
                : e is Timestamp
                    ? e.toDate()
                    : null,
          )
          .where((e) => e != null)
          .cast<DateTime>()
          .toList(),
      pricePerHour: (data['pricePerHour'] as num?)?.toDouble(),
      location: data['location'] as String?,
      isAvailable: data['isAvailable'] as bool? ?? true,
      isVerified: data['isVerified'] as bool? ?? false,
      portfolioImages: List<String>.from(data['portfolioImages'] as List<dynamic>? ?? []),
      portfolioVideos: List<String>.from(data['portfolioVideos'] as List<dynamic>? ?? []),
      portfolioItems: (data['portfolioItems'] as List<dynamic>?)
              ?.map((e) => Map<String, dynamic>.from(e))
              .toList() ??
          [],
      reviews:
          (data['reviews'] as List<dynamic>?)?.map((e) => Map<String, dynamic>.from(e)).toList() ??
              [],
      avgRating: (data['avgRating'] as num?)?.toDouble() ?? 0.0,
      services: List<String>.from(data['services'] as List<dynamic>? ?? []),
      equipment: List<String>.from(data['equipment'] as List<dynamic>? ?? []),
      languages: List<String>.from(data['languages'] as List<dynamic>? ?? []),
      workingHours: Map<String, String>.from(
        data['workingHours'] as Map<dynamic, dynamic>? ?? {},
      ),
      createdAt: data['createdAt'] != null
          ? (data['createdAt'] is Timestamp
              ? (data['createdAt'] as Timestamp).toDate()
              : DateTime.parse(data['createdAt'].toString()))
          : DateTime.now(),
      updatedAt: data['updatedAt'] != null
          ? (data['updatedAt'] is Timestamp
              ? (data['updatedAt'] as Timestamp).toDate()
              : DateTime.parse(data['updatedAt'].toString()))
          : DateTime.now(),
      lastActiveAt: data['lastActiveAt'] != null
          ? (data['lastActiveAt'] is Timestamp
              ? (data['lastActiveAt'] as Timestamp).toDate()
              : DateTime.tryParse(data['lastActiveAt'].toString()))
          : null,
      profileImageUrl: data['profileImageUrl'] as String?,
      coverImageUrl: data['coverImageUrl'] as String?,
      socialLinks: Map<String, String>.from(data['socialLinks'] ?? {}),
      certifications: List<String>.from(data['certifications'] ?? []),
      awards: List<String>.from(data['awards'] ?? []),
      insurance: data['insurance'] as bool? ?? false,
      travelRadius: data['travelRadius'] as int? ?? 0,
      responseTime: data['responseTime']?.toString(),
      completionRate: (data['completionRate'] as num?)?.toDouble() ?? 0.0,
      cancellationRate: (data['cancellationRate'] as num?)?.toDouble() ?? 0.0,
      averageResponseTime: data['averageResponseTime']?.toString(),
      totalBookings: data['totalBookings'] as int? ?? 0,
      totalEarnings: (data['totalEarnings'] as num?)?.toDouble() ?? 0.0,
      isOnline: data['isOnline'] as bool? ?? false,
      isPremium: data['isPremium'] as bool? ?? false,
      premiumExpiresAt: data['premiumExpiresAt'] != null
          ? (data['premiumExpiresAt'] is Timestamp
              ? (data['premiumExpiresAt'] as Timestamp).toDate()
              : DateTime.tryParse(data['premiumExpiresAt'].toString()))
          : null,
      metadata: Map<String, dynamic>.from(data['metadata'] ?? {}),
      avatar: data['avatar'],
      specialization: data['specialization'],
      avgPriceByService: data['avgPriceByService'] != null
          ? Map<String, double>.from(data['avgPriceByService'])
          : null,
      busyDates: (data['busyDates'] as List<dynamic>?)
              ?.map(
                (e) => e is Timestamp ? e.toDate() : DateTime.tryParse(e.toString()),
              )
              .where((e) => e != null)
              .cast<DateTime>()
              .toList() ??
          [],
      taxType: data['taxType'] != null
          ? TaxType.values.firstWhere(
              (e) => e.name == data['taxType'],
              orElse: () => TaxType.individual,
            )
          : null,
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
      firstName: data['firstName'],
      lastName: data['lastName'],
      city: data['city'],
      photoUrl: data['photoUrl'],
      totalReviews: data['totalReviews'],
      priceRange: data['priceRange'] != null
          ? PriceRange.fromMap(Map<String, dynamic>.from(data['priceRange']))
          : null,
      // –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è Instagram/–í–ö-—Å—Ç–∏–ª—è –ø—Ä–æ—Ñ–∏–ª—è
      contacts: data['contacts'] != null ? Map<String, String>.from(data['contacts']) : const {},
      servicesWithPrices: data['servicesWithPrices'] != null
          ? Map<String, double>.from(data['servicesWithPrices'])
          : const {},
    );
  }

  /// –°–æ–∑–¥–∞—Ç—å –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ Firestore
  factory Specialist.fromDocument(DocumentSnapshot doc) {
    final data = doc.data()! as Map<String, dynamic>;
    return Specialist(
      id: doc.id,
      userId: data['userId'] as String? ?? '',
      name: data['name'] as String? ?? '',
      description: data['description'],
      bio: data['bio'],
      category: _parseCategory(data['category']),
      subcategories: List<String>.from(data['subcategories'] ?? []),
      experienceLevel: _parseExperienceLevel(data['experienceLevel']),
      yearsOfExperience: data['yearsOfExperience'] as int? ?? 0,
      hourlyRate: (data['hourlyRate'] as num? ?? 0.0).toDouble(),
      price: (data['price'] as num? ?? 0.0).toDouble(), // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞
      minBookingHours: data['minBookingHours']?.toDouble(),
      maxBookingHours: data['maxBookingHours']?.toDouble(),
      serviceAreas: List<String>.from(data['serviceAreas'] ?? []),
      languages: List<String>.from(data['languages'] ?? []),
      equipment: List<String>.from(data['equipment'] ?? []),
      portfolio: List<String>.from(data['portfolio'] ?? []),
      contactInfo: data['contactInfo'],
      businessInfo: data['businessInfo'],
      isAvailable: data['isAvailable'] as bool? ?? true,
      isVerified: data['isVerified'] as bool? ?? false,
      rating: (data['rating'] as num? ?? 0.0).toDouble(),
      reviewCount: data['reviewCount'] as int? ?? 0,
      createdAt:
          data['createdAt'] != null ? (data['createdAt'] as Timestamp).toDate() : DateTime.now(),
      updatedAt:
          data['updatedAt'] != null ? (data['updatedAt'] as Timestamp).toDate() : DateTime.now(),
      metadata: data['metadata'],
      avatarUrl: data['avatarUrl'],
      avatar: data['avatar'],
      specialization: data['specialization'],
      avgPriceByService: data['avgPriceByService'] != null
          ? Map<String, double>.from(data['avgPriceByService'])
          : null,
      busyDates:
          (data['busyDates'] as List<dynamic>?)?.map((e) => (e as Timestamp).toDate()).toList() ??
              [],
      taxType: data['taxType'] != null
          ? TaxType.values.firstWhere(
              (e) => e.name == data['taxType'],
              orElse: () => TaxType.individual,
            )
          : null,
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
      firstName: data['firstName'],
      lastName: data['lastName'],
      city: data['city'],
      photoUrl: data['photoUrl'],
      totalReviews: data['totalReviews'],
      priceRange: data['priceRange'] != null
          ? PriceRange.fromMap(Map<String, dynamic>.from(data['priceRange']))
          : null,
      // –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è Instagram/–í–ö-—Å—Ç–∏–ª—è –ø—Ä–æ—Ñ–∏–ª—è
      contacts: data['contacts'] != null ? Map<String, String>.from(data['contacts']) : const {},
      servicesWithPrices: data['servicesWithPrices'] != null
          ? Map<String, double>.from(data['servicesWithPrices'])
          : const {},
    );
  }

  /// –°–æ–∑–¥–∞—Ç—å –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ Firestore
  factory Specialist.fromFirestore(DocumentSnapshot doc) {
    final data = doc.data();
    if (data == null) {
      throw Exception('Document data is null');
    }

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    Map<String, dynamic> safeData;
    if (data is Map<String, dynamic>) {
      safeData = data;
    } else if (data is Map<dynamic, dynamic>) {
      safeData = data.map((key, value) => MapEntry(key.toString(), value));
    } else {
      throw Exception('Document data is not a Map: ${data.runtimeType}');
    }

    return Specialist.fromMap({
      'id': doc.id,
      ...safeData,
    });
  }

  final String id;
  final String userId; // –°–≤—è–∑—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  final String name;
  final String? description;
  final String? bio;
  final SpecialistCategory category;
  final List<SpecialistCategory> categories; // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
  final List<String> subcategories; // –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  final ExperienceLevel experienceLevel;
  final int yearsOfExperience;
  final double hourlyRate;
  final double price; // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —É—Å–ª—É–≥–∏
  final double? pricePerHour;
  final double? minBookingHours;
  final double? maxBookingHours;
  final double? min; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
  final List<String> serviceAreas; // –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ–±–ª–∞—Å—Ç–∏
  final List<String> languages; // –Ø–∑—ã–∫–∏
  final List<String> equipment; // –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
  final List<String> services; // –£—Å–ª—É–≥–∏
  final List<String> portfolio; // –°—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
  final List<String> portfolioImages; // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
  final List<String> portfolioVideos; // –í–∏–¥–µ–æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
  final List<Map<String, dynamic>> portfolioItems; // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
  final List<Map<String, dynamic>> reviews; // –û—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤
  final double avgRating; // –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
  final Map<String, String> workingHours; // –†–∞–±–æ—á–∏–µ —á–∞—Å—ã
  final String? location; // –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
  final Map<String, dynamic>? contactInfo;
  final Map<String, dynamic>? businessInfo;
  final bool isAvailable;
  final bool isVerified;
  final double rating;
  final int reviewCount;
  final String? imageUrl;
  final String? experience;
  final List<DateTime> availableDates;
  final DateTime createdAt;
  final DateTime updatedAt;
  final DateTime? lastActiveAt;
  final Map<String, dynamic>? metadata;
  final String? avatarUrl;
  final String? avatar;
  final String? specialization;
  final String? phone;
  final String? profileImageUrl;
  final String? coverImageUrl;
  final Map<String, String> socialLinks;
  final List<String> certifications;
  final List<String> awards;
  final bool insurance;
  final int? travelRadius;
  final List<DateTime> busyDates; // –ó–∞–Ω—è—Ç—ã–µ –¥–∞—Ç—ã
  final String? responseTime;
  final double? completionRate;
  final double? cancellationRate;
  final String? averageResponseTime;
  final int? totalBookings;
  final double? totalEarnings;
  final bool? isOnline;
  final bool? isPremium;
  final DateTime? premiumExpiresAt;
  final String? email;
  final DateTime? lastPriceUpdateAt;
  final Map<String, double>? avgPriceByService; // –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ —É—Å–ª—É–≥–∞–º
  final TaxType? taxType; // –¢–∏–ø –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è

  // –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è Instagram/–í–ö-—Å—Ç–∏–ª—è –ø—Ä–æ—Ñ–∏–ª—è
  final Map<String, String> contacts; // –ö–æ–Ω—Ç–∞–∫—Ç—ã (—Ç–µ–ª–µ—Ñ–æ–Ω, email, —Å–æ—Ü—Å–µ—Ç–∏)
  final Map<String, double> servicesWithPrices; // –£—Å–ª—É–≥–∏ —Å —Ü–µ–Ω–∞–º–∏ (–Ω–∞–∑–≤–∞–Ω–∏–µ -> —Ü–µ–Ω–∞)

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  final String? firstName;
  final String? lastName;
  final String? city;
  final String? photoUrl;
  final int? totalReviews;
  final PriceRange? priceRange;

  /// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ Map –¥–ª—è Firestore
  Map<String, dynamic> toMap() => {
        'userId': userId,
        'name': name,
        'description': description,
        'bio': bio,
        'category': category.name,
        'subcategories': subcategories,
        'experienceLevel': experienceLevel.name,
        'yearsOfExperience': yearsOfExperience,
        'hourlyRate': hourlyRate,
        'price': price, // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞
        'minBookingHours': minBookingHours,
        'maxBookingHours': maxBookingHours,
        'serviceAreas': serviceAreas,
        'languages': languages,
        'equipment': equipment,
        'portfolio': portfolio,
        'portfolioItems': portfolioItems,
        'reviews': reviews,
        'avgRating': avgRating,
        'contactInfo': contactInfo,
        'businessInfo': businessInfo,
        'isAvailable': isAvailable,
        'isVerified': isVerified,
        'rating': rating,
        'reviewCount': reviewCount,
        'imageUrl': imageUrl,
        'experience': experience,
        'availableDates': availableDates.map((date) => date.toIso8601String()).toList(),
        'createdAt': Timestamp.fromDate(createdAt),
        'updatedAt': Timestamp.fromDate(updatedAt),
        'metadata': metadata,
        'avatarUrl': avatarUrl,
        'avatar': avatar,
        'specialization': specialization,
        'avgPriceByService': avgPriceByService,
        'busyDates': busyDates.map(Timestamp.fromDate).toList(),
        'taxType': taxType?.name,
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        'firstName': firstName,
        'lastName': lastName,
        'city': city,
        'photoUrl': photoUrl,
        'totalReviews': totalReviews,
        'priceRange': priceRange?.toMap(),
        // –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è Instagram/–í–ö-—Å—Ç–∏–ª—è –ø—Ä–æ—Ñ–∏–ª—è
        'contacts': contacts,
        'servicesWithPrices': servicesWithPrices,
      };

  /// –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
  Specialist copyWith({
    String? id,
    String? userId,
    String? name,
    String? description,
    String? bio,
    SpecialistCategory? category,
    List<String>? subcategories,
    ExperienceLevel? experienceLevel,
    int? yearsOfExperience,
    double? hourlyRate,
    double? price,
    double? minBookingHours,
    double? maxBookingHours,
    List<String>? serviceAreas,
    List<String>? languages,
    List<String>? equipment,
    List<String>? portfolio,
    List<Map<String, dynamic>>? portfolioItems,
    List<Map<String, dynamic>>? reviews,
    double? avgRating,
    Map<String, dynamic>? contactInfo,
    Map<String, dynamic>? businessInfo,
    bool? isAvailable,
    bool? isVerified,
    double? rating,
    int? reviewCount,
    DateTime? createdAt,
    DateTime? updatedAt,
    Map<String, dynamic>? metadata,
    String? avatarUrl,
    String? avatar,
    String? specialization,
    Map<String, double>? avgPriceByService,
    List<DateTime>? busyDates,
    List<DateTime>? availableDates,
    TaxType? taxType,
    String? firstName,
    String? lastName,
    String? city,
    String? photoUrl,
    int? totalReviews,
    PriceRange? priceRange,
    // –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è Instagram/–í–ö-—Å—Ç–∏–ª—è –ø—Ä–æ—Ñ–∏–ª—è
    Map<String, String>? contacts,
    Map<String, double>? servicesWithPrices,
  }) =>
      Specialist(
        id: id ?? this.id,
        userId: userId ?? this.userId,
        name: name ?? this.name,
        description: description ?? this.description,
        bio: bio ?? this.bio,
        category: category ?? this.category,
        subcategories: subcategories ?? this.subcategories,
        experienceLevel: experienceLevel ?? this.experienceLevel,
        yearsOfExperience: yearsOfExperience ?? this.yearsOfExperience,
        hourlyRate: hourlyRate ?? this.hourlyRate,
        price: price ?? this.price,
        minBookingHours: minBookingHours ?? this.minBookingHours,
        maxBookingHours: maxBookingHours ?? this.maxBookingHours,
        serviceAreas: serviceAreas ?? this.serviceAreas,
        languages: languages ?? this.languages,
        equipment: equipment ?? this.equipment,
        portfolio: portfolio ?? this.portfolio,
        portfolioItems: portfolioItems ?? this.portfolioItems,
        reviews: reviews ?? this.reviews,
        avgRating: avgRating ?? this.avgRating,
        contactInfo: contactInfo ?? this.contactInfo,
        businessInfo: businessInfo ?? this.businessInfo,
        isAvailable: isAvailable ?? this.isAvailable,
        isVerified: isVerified ?? this.isVerified,
        rating: rating ?? this.rating,
        reviewCount: reviewCount ?? this.reviewCount,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        metadata: metadata ?? this.metadata,
        avatarUrl: avatarUrl ?? this.avatarUrl,
        avatar: avatar ?? this.avatar,
        specialization: specialization ?? this.specialization,
        avgPriceByService: avgPriceByService ?? this.avgPriceByService,
        busyDates: busyDates ?? this.busyDates,
        availableDates: availableDates ?? this.availableDates,
        taxType: taxType ?? this.taxType,
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        firstName: firstName ?? this.firstName,
        lastName: lastName ?? this.lastName,
        city: city ?? this.city,
        photoUrl: photoUrl ?? this.photoUrl,
        totalReviews: totalReviews ?? this.totalReviews,
        priceRange: priceRange ?? this.priceRange,
        // –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è Instagram/–í–ö-—Å—Ç–∏–ª—è –ø—Ä–æ—Ñ–∏–ª—è
        contacts: contacts ?? this.contacts,
        servicesWithPrices: servicesWithPrices ?? this.servicesWithPrices,
      );

  /// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω–æ–µ –∏–º—è
  String get fullName {
    if (firstName != null && lastName != null) {
      return '$firstName $lastName';
    }
    return name;
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
  String get displayName => fullName;

  /// –ü–æ–ª—É—á–∏—Ç—å URL —Ñ–æ—Ç–æ
  String? get imageUrlValue => photoUrl ?? profileImageUrl ?? avatarUrl;

  /// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
  int get reviewsCount => totalReviews ?? reviewCount;

  /// –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  String get categoryDisplayName {
    switch (category) {
      case SpecialistCategory.photographer:
        return '–§–æ—Ç–æ–≥—Ä–∞—Ñ';
      case SpecialistCategory.videographer:
        return '–í–∏–¥–µ–æ–≥—Ä–∞—Ñ';
      case SpecialistCategory.dj:
        return 'DJ';
      case SpecialistCategory.host:
        return '–í–µ–¥—É—â–∏–π';
      case SpecialistCategory.decorator:
        return '–î–µ–∫–æ—Ä–∞—Ç–æ—Ä';
      case SpecialistCategory.musician:
        return '–ú—É–∑—ã–∫–∞–Ω—Ç';
      case SpecialistCategory.caterer:
        return '–ö–µ–π—Ç–µ—Ä–∏–Ω–≥';
      case SpecialistCategory.security:
        return '–û—Ö—Ä–∞–Ω–∞';
      case SpecialistCategory.technician:
        return '–¢–µ—Ö–Ω–∏–∫';
      case SpecialistCategory.animator:
        return '–ê–Ω–∏–º–∞—Ç–æ—Ä';
      case SpecialistCategory.florist:
        return '–§–ª–æ—Ä–∏—Å—Ç';
      case SpecialistCategory.lighting:
        return '–°–≤–µ—Ç–æ–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ';
      case SpecialistCategory.sound:
        return '–ó–≤—É–∫–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ';
      case SpecialistCategory.costume:
        return '–ü–ª–∞—Ç—å—è/–∫–æ—Å—Ç—é–º—ã';
      case SpecialistCategory.fireShow:
        return '–§–∞–µ—Ä-—à–æ—É';
      case SpecialistCategory.fireworks:
        return '–°–∞–ª—é—Ç—ã';
      case SpecialistCategory.lightShow:
        return '–°–≤–µ—Ç–æ–≤—ã–µ —à–æ—É';
      case SpecialistCategory.coverBand:
        return '–ö–∞–≤–µ—Ä-–≥—Ä—É–ø–ø—ã';
      case SpecialistCategory.teamBuilding:
        return '–¢–∏–º–±–∏–ª–¥–∏–Ω–≥–∏';
      case SpecialistCategory.cleaning:
        return '–ö–ª–∏–Ω–∏–Ω–≥';
      case SpecialistCategory.rental:
        return '–ê—Ä–µ–Ω–¥–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è';
      case SpecialistCategory.makeup:
        return '–í–∏–∑–∞–∂–∏—Å—Ç';
      case SpecialistCategory.hairstylist:
        return '–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä';
      case SpecialistCategory.stylist:
        return '–°—Ç–∏–ª–∏—Å—Ç';
      case SpecialistCategory.choreographer:
        return '–•–æ—Ä–µ–æ–≥—Ä–∞—Ñ';
      case SpecialistCategory.dance:
        return '–¢–∞–Ω—Ü—ã';
      case SpecialistCategory.magic:
        return '–§–æ–∫—É—Å—ã/–∏–ª–ª—é–∑–∏–æ–Ω–∏—Å—Ç';
      case SpecialistCategory.clown:
        return '–ö–ª–æ—É–Ω';
      case SpecialistCategory.balloon:
        return '–ê—ç—Ä–æ–¥–∏–∑–∞–π–Ω';
      case SpecialistCategory.cake:
        return '–¢–æ—Ä—Ç—ã/–∫–æ–Ω–¥–∏—Ç–µ—Ä';
      case SpecialistCategory.transport:
        return '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç';
      case SpecialistCategory.venue:
        return '–ü–ª–æ—â–∞–¥–∫–∏';
      case SpecialistCategory.studio:
        return '–§–æ—Ç–æ—Å—Ç—É–¥–∏—è';
      case SpecialistCategory.other:
        return '–î—Ä—É–≥–æ–µ';
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞
  String get experienceLevelDisplayName {
    switch (experienceLevel) {
      case ExperienceLevel.beginner:
        return '–ù–∞—á–∏–Ω–∞—é—â–∏–π';
      case ExperienceLevel.intermediate:
        return '–°—Ä–µ–¥–Ω–∏–π';
      case ExperienceLevel.advanced:
        return '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π';
      case ExperienceLevel.expert:
        return '–≠–∫—Å–ø–µ—Ä—Ç';
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω
  String get priceRangeString {
    if (minBookingHours != null && maxBookingHours != null) {
      final minPrice = hourlyRate * minBookingHours!;
      final maxPrice = hourlyRate * maxBookingHours!;
      return '${minPrice.toStringAsFixed(0)} - ${maxPrice.toStringAsFixed(0)} ‚ÇΩ';
    }
    return '${hourlyRate.toStringAsFixed(0)} ‚ÇΩ/—á–∞—Å';
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
  bool isAvailableOnDate(DateTime date) {
    if (!isAvailable) return false;
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    return true;
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
  bool isAvailableOnDateTime(DateTime dateTime) {
    if (!isAvailable) return false;
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç–∞ –ª–∏ –¥–∞—Ç–∞
    final date = DateTime(dateTime.year, dateTime.month, dateTime.day);
    return !busyDates.any(
      (busyDate) =>
          busyDate.year == date.year && busyDate.month == date.month && busyDate.day == date.day,
    );
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–Ω—è—Ç–∞ –ª–∏ –¥–∞—Ç–∞
  bool isDateBusy(DateTime date) {
    final normalizedDate = DateTime(date.year, date.month, date.day);
    return busyDates.any(
      (busyDate) =>
          busyDate.year == normalizedDate.year &&
          busyDate.month == normalizedDate.month &&
          busyDate.day == normalizedDate.day,
    );
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –¥–∞—Ç—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
  List<DateTime> getAvailableDates(DateTime startDate, DateTime endDate) {
    final availableDates = <DateTime>[];
    var current = DateTime(startDate.year, startDate.month, startDate.day);
    final end = DateTime(endDate.year, endDate.month, endDate.day);

    while (current.isBefore(end) || current.isAtSameMomentAs(end)) {
      if (!isDateBusy(current)) {
        availableDates.add(DateTime(current.year, current.month, current.day));
      }
      current = current.add(const Duration(days: 1));
    }

    return availableDates;
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  String get categoryIcon {
    switch (category) {
      case SpecialistCategory.photographer:
        return 'üì∏';
      case SpecialistCategory.videographer:
        return 'üé•';
      case SpecialistCategory.dj:
        return 'üéß';
      case SpecialistCategory.host:
        return 'üé§';
      case SpecialistCategory.decorator:
        return 'üé®';
      case SpecialistCategory.musician:
        return 'üéµ';
      case SpecialistCategory.caterer:
        return 'üçΩÔ∏è';
      case SpecialistCategory.security:
        return 'üõ°Ô∏è';
      case SpecialistCategory.technician:
        return 'üîß';
      case SpecialistCategory.animator:
        return 'üé≠';
      case SpecialistCategory.florist:
        return 'üå∏';
      case SpecialistCategory.lighting:
        return 'üí°';
      case SpecialistCategory.sound:
        return 'üîä';
      case SpecialistCategory.costume:
        return 'üëó';
      case SpecialistCategory.fireShow:
        return 'üî•';
      case SpecialistCategory.fireworks:
        return 'üéÜ';
      case SpecialistCategory.lightShow:
        return '‚ú®';
      case SpecialistCategory.coverBand:
        return 'üé∏';
      case SpecialistCategory.teamBuilding:
        return 'ü§ù';
      case SpecialistCategory.cleaning:
        return 'üßπ';
      case SpecialistCategory.rental:
        return 'üì¶';
      case SpecialistCategory.makeup:
        return 'üíÑ';
      case SpecialistCategory.hairstylist:
        return 'üíá';
      case SpecialistCategory.stylist:
        return 'üëî';
      case SpecialistCategory.choreographer:
        return 'üíÉ';
      case SpecialistCategory.dance:
        return 'üï∫';
      case SpecialistCategory.magic:
        return 'üé©';
      case SpecialistCategory.clown:
        return 'ü§°';
      case SpecialistCategory.balloon:
        return 'üéà';
      case SpecialistCategory.cake:
        return 'üéÇ';
      case SpecialistCategory.transport:
        return 'üöó';
      case SpecialistCategory.venue:
        return 'üè¢';
      case SpecialistCategory.studio:
        return 'üì∏';
      case SpecialistCategory.other:
        return '‚≠ê';
    }
  }

  /// –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏
  static SpecialistCategory _parseCategory(String? category) {
    switch (category) {
      case 'photographer':
        return SpecialistCategory.photographer;
      case 'videographer':
        return SpecialistCategory.videographer;
      case 'dj':
        return SpecialistCategory.dj;
      case 'host':
        return SpecialistCategory.host;
      case 'decorator':
        return SpecialistCategory.decorator;
      case 'musician':
        return SpecialistCategory.musician;
      case 'caterer':
        return SpecialistCategory.caterer;
      case 'security':
        return SpecialistCategory.security;
      case 'technician':
        return SpecialistCategory.technician;
      case 'studio':
        return SpecialistCategory.studio;
      case 'other':
        return SpecialistCategory.other;
      default:
        return SpecialistCategory.other;
    }
  }

  /// –ü–∞—Ä—Å–∏–Ω–≥ —É—Ä–æ–≤–Ω—è –æ–ø—ã—Ç–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏
  static ExperienceLevel _parseExperienceLevel(String? level) {
    switch (level) {
      case 'beginner':
        return ExperienceLevel.beginner;
      case 'intermediate':
        return ExperienceLevel.intermediate;
      case 'advanced':
        return ExperienceLevel.advanced;
      case 'expert':
        return ExperienceLevel.expert;
      default:
        return ExperienceLevel.beginner;
    }
  }
}

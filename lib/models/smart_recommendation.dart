import 'package:cloud_firestore/cloud_firestore.dart';

/// –¢–∏–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
enum RecommendationType {
  topWeekly, // –¢–æ–ø —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –Ω–µ–¥–µ–ª–∏
  trending, // –¢—Ä–µ–Ω–¥–æ–≤—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã
  nearby, // –†—è–¥–æ–º —Å –≤–∞–º–∏
  similar, // –ü–æ—Ö–æ–∂–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ
  category, // –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  price, // –ü–æ —Ü–µ–Ω–µ
  rating, // –ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É
  availability, // –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ–π—á–∞—Å
}

/// –ú–æ–¥–µ–ª—å —É–º–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
class SmartRecommendation {
  final String id;
  final String specialistId;
  final String specialistName;
  final String specialistCategory;
  final String? specialistPhoto;
  final double rating;
  final int reviewCount;
  final double price;
  final String? location;
  final double distance; // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–º
  final RecommendationType type;
  final double score; // –û—Ü–µ–Ω–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ (0-100)
  final List<String> reasons; // –ü—Ä–∏—á–∏–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  final bool isAvailable; // –î–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Å–µ–π—á–∞—Å
  final DateTime? nextAvailableDate;
  final Map<String, dynamic> metadata; // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  final DateTime createdAt;
  final DateTime expiresAt; // –ö–æ–≥–¥–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —É—Å—Ç–∞—Ä–µ–≤–∞–µ—Ç

  const SmartRecommendation({
    required this.id,
    required this.specialistId,
    required this.specialistName,
    required this.specialistCategory,
    this.specialistPhoto,
    required this.rating,
    required this.reviewCount,
    required this.price,
    this.location,
    required this.distance,
    required this.type,
    required this.score,
    required this.reasons,
    required this.isAvailable,
    this.nextAvailableDate,
    this.metadata = const {},
    required this.createdAt,
    required this.expiresAt,
  });

  /// –°–æ–∑–¥–∞—Ç—å –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ Firestore
  factory SmartRecommendation.fromDocument(DocumentSnapshot doc) {
    final data = doc.data()! as Map<String, dynamic>;
    return SmartRecommendation(
      id: doc.id,
      specialistId: data['specialistId'] as String,
      specialistName: data['specialistName'] as String,
      specialistCategory: data['specialistCategory'] as String,
      specialistPhoto: data['specialistPhoto'] as String?,
      rating: (data['rating'] as num).toDouble(),
      reviewCount: data['reviewCount'] as int,
      price: (data['price'] as num).toDouble(),
      location: data['location'] as String?,
      distance: (data['distance'] as num).toDouble(),
      type: RecommendationType.values.firstWhere(
        (e) => e.name == data['type'],
        orElse: () => RecommendationType.category,
      ),
      score: (data['score'] as num).toDouble(),
      reasons: List<String>.from(data['reasons'] ?? []),
      isAvailable: data['isAvailable'] as bool,
      nextAvailableDate: data['nextAvailableDate'] != null 
          ? (data['nextAvailableDate'] as Timestamp).toDate() 
          : null,
      metadata: Map<String, dynamic>.from(data['metadata'] ?? {}),
      createdAt: (data['createdAt'] as Timestamp).toDate(),
      expiresAt: (data['expiresAt'] as Timestamp).toDate(),
    );
  }

  /// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ Map –¥–ª—è Firestore
  Map<String, dynamic> toMap() {
    return {
      'specialistId': specialistId,
      'specialistName': specialistName,
      'specialistCategory': specialistCategory,
      'specialistPhoto': specialistPhoto,
      'rating': rating,
      'reviewCount': reviewCount,
      'price': price,
      'location': location,
      'distance': distance,
      'type': type.name,
      'score': score,
      'reasons': reasons,
      'isAvailable': isAvailable,
      'nextAvailableDate': nextAvailableDate != null 
          ? Timestamp.fromDate(nextAvailableDate!) 
          : null,
      'metadata': metadata,
      'createdAt': Timestamp.fromDate(createdAt),
      'expiresAt': Timestamp.fromDate(expiresAt),
    };
  }

  /// –°–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
  SmartRecommendation copyWith({
    String? id,
    String? specialistId,
    String? specialistName,
    String? specialistCategory,
    String? specialistPhoto,
    double? rating,
    int? reviewCount,
    double? price,
    String? location,
    double? distance,
    RecommendationType? type,
    double? score,
    List<String>? reasons,
    bool? isAvailable,
    DateTime? nextAvailableDate,
    Map<String, dynamic>? metadata,
    DateTime? createdAt,
    DateTime? expiresAt,
  }) {
    return SmartRecommendation(
      id: id ?? this.id,
      specialistId: specialistId ?? this.specialistId,
      specialistName: specialistName ?? this.specialistName,
      specialistCategory: specialistCategory ?? this.specialistCategory,
      specialistPhoto: specialistPhoto ?? this.specialistPhoto,
      rating: rating ?? this.rating,
      reviewCount: reviewCount ?? this.reviewCount,
      price: price ?? this.price,
      location: location ?? this.location,
      distance: distance ?? this.distance,
      type: type ?? this.type,
      score: score ?? this.score,
      reasons: reasons ?? this.reasons,
      isAvailable: isAvailable ?? this.isAvailable,
      nextAvailableDate: nextAvailableDate ?? this.nextAvailableDate,
      metadata: metadata ?? this.metadata,
      createdAt: createdAt ?? this.createdAt,
      expiresAt: expiresAt ?? this.expiresAt,
    );
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞
  String get typeDisplayName {
    switch (type) {
      case RecommendationType.topWeekly:
        return '–¢–æ–ø –Ω–µ–¥–µ–ª–∏';
      case RecommendationType.trending:
        return '–í —Ç—Ä–µ–Ω–¥–µ';
      case RecommendationType.nearby:
        return '–†—è–¥–æ–º —Å –≤–∞–º–∏';
      case RecommendationType.similar:
        return '–ü–æ—Ö–æ–∂–∏–µ';
      case RecommendationType.category:
        return '–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏';
      case RecommendationType.price:
        return '–ü–æ —Ü–µ–Ω–µ';
      case RecommendationType.rating:
        return '–ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É';
      case RecommendationType.availability:
        return '–î–æ—Å—Ç—É–ø–Ω—ã–µ';
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É —Ç–∏–ø–∞
  String get typeIcon {
    switch (type) {
      case RecommendationType.topWeekly:
        return 'üèÜ';
      case RecommendationType.trending:
        return 'üìà';
      case RecommendationType.nearby:
        return 'üìç';
      case RecommendationType.similar:
        return 'üë•';
      case RecommendationType.category:
        return 'üìÇ';
      case RecommendationType.price:
        return 'üí∞';
      case RecommendationType.rating:
        return '‚≠ê';
      case RecommendationType.availability:
        return '‚úÖ';
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞–∫—Ç—É–∞–ª—å–Ω–∞ –ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
  bool get isExpired {
    return DateTime.now().isAfter(expiresAt);
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π —Ä–µ–π—Ç–∏–Ω–≥
  String get ratingStars {
    return '‚òÖ' * rating.round() + '‚òÜ' * (5 - rating.round());
  }
}

/// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–∏–ø–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
extension RecommendationTypeExtension on RecommendationType {
  String get displayName {
    switch (this) {
      case RecommendationType.topWeekly:
        return '–¢–æ–ø –Ω–µ–¥–µ–ª–∏';
      case RecommendationType.trending:
        return '–í —Ç—Ä–µ–Ω–¥–µ';
      case RecommendationType.nearby:
        return '–†—è–¥–æ–º —Å –≤–∞–º–∏';
      case RecommendationType.similar:
        return '–ü–æ—Ö–æ–∂–∏–µ';
      case RecommendationType.category:
        return '–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏';
      case RecommendationType.price:
        return '–ü–æ —Ü–µ–Ω–µ';
      case RecommendationType.rating:
        return '–ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É';
      case RecommendationType.availability:
        return '–î–æ—Å—Ç—É–ø–Ω—ã–µ';
    }
  }
}

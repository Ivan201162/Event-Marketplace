import 'package:cloud_firestore/cloud_firestore.dart';

/// –°–µ–º–µ–π–Ω—ã–π —Å—Ç–∞—Ç—É—Å
enum MaritalStatus {
  single, // –•–æ–ª–æ—Å—Ç/–Ω–µ –∑–∞–º—É–∂–µ–º
  married, // –ñ–µ–Ω–∞—Ç/–∑–∞–º—É–∂–µ–º
  divorced, // –†–∞–∑–≤–µ–¥–µ–Ω/—Ä–∞–∑–≤–µ–¥–µ–Ω–∞
  widowed, // –í–¥–æ–≤–µ—Ü/–≤–¥–æ–≤–∞
  inRelationship, // –í –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö
}

/// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è MaritalStatus
extension MaritalStatusExtension on MaritalStatus {
  String get displayName {
    switch (this) {
      case MaritalStatus.single:
        return '–•–æ–ª–æ—Å—Ç/–Ω–µ –∑–∞–º—É–∂–µ–º';
      case MaritalStatus.married:
        return '–ñ–µ–Ω–∞—Ç/–∑–∞–º—É–∂–µ–º';
      case MaritalStatus.divorced:
        return '–†–∞–∑–≤–µ–¥–µ–Ω/—Ä–∞–∑–≤–µ–¥–µ–Ω–∞';
      case MaritalStatus.widowed:
        return '–í–¥–æ–≤–µ—Ü/–≤–¥–æ–≤–∞';
      case MaritalStatus.inRelationship:
        return '–í –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö';
    }
  }
}

/// –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ
enum UserRole {
  customer, // –ó–∞–∫–∞–∑—á–∏–∫
  specialist, // –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å/—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç
  organizer, // –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä
  moderator, // –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä
  guest, // –ì–æ—Å—Ç—å
  admin, // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
}

/// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è UserRole
extension UserRoleExtension on UserRole {
  /// –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Ä–æ–ª–∏
  String get roleDisplayName {
    switch (this) {
      case UserRole.customer:
        return '–ö–ª–∏–µ–Ω—Ç';
      case UserRole.specialist:
        return '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç';
      case UserRole.organizer:
        return '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä';
      case UserRole.moderator:
        return '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä';
      case UserRole.guest:
        return '–ì–æ—Å—Ç—å';
      case UserRole.admin:
        return '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä';
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏
  String get description {
    switch (this) {
      case UserRole.admin:
        return '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º —Å–∏—Å—Ç–µ–º—ã';
      case UserRole.moderator:
        return '–ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏';
      case UserRole.specialist:
        return '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º';
      case UserRole.organizer:
        return '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤';
      case UserRole.customer:
        return '–ó–∞–∫–∞–∑ —É—Å–ª—É–≥ –∏ —É—á–∞—Å—Ç–∏–µ –≤ —Å–æ–±—ã—Ç–∏—è—Ö';
      case UserRole.guest:
        return '–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞';
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É —Ä–æ–ª–∏
  String get icon {
    switch (this) {
      case UserRole.admin:
        return 'üëë';
      case UserRole.moderator:
        return 'üõ°Ô∏è';
      case UserRole.specialist:
        return 'üé®';
      case UserRole.organizer:
        return 'üéâ';
      case UserRole.customer:
        return 'üë§';
      case UserRole.guest:
        return 'üë•';
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ä–æ–ª–∏
  int get priority {
    switch (this) {
      case UserRole.admin:
        return 100;
      case UserRole.moderator:
        return 80;
      case UserRole.specialist:
        return 60;
      case UserRole.organizer:
        return 40;
      case UserRole.customer:
        return 20;
      case UserRole.guest:
        return 0;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ä–æ–ª–∏
  List<String> get defaultPermissions {
    switch (this) {
      case UserRole.admin:
        return [
          'users.manage',
          'roles.manage',
          'permissions.manage',
          'content.moderate',
          'analytics.view',
          'settings.manage',
          'system.manage',
        ];
      case UserRole.moderator:
        return [
          'users.moderate',
          'content.moderate',
          'reports.view',
          'analytics.view',
        ];
      case UserRole.specialist:
        return [
          'profile.manage',
          'services.manage',
          'bookings.manage',
          'content.upload',
          'analytics.view',
        ];
      case UserRole.organizer:
        return [
          'profile.manage',
          'events.manage',
          'proposals.create',
          'analytics.view',
        ];
      case UserRole.customer:
        return [
          'profile.manage',
          'bookings.create',
          'reviews.create',
          'content.view',
        ];
      case UserRole.guest:
        return [
          'content.view',
        ];
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É —Ä–æ–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –ø—Ä–∞–≤–æ
  bool hasPermission(String permission) =>
      defaultPermissions.contains(permission);

  /// –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  String get displayName => roleDisplayName;
}

/// –ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class AppUser {
  const AppUser({
    required this.id,
    required this.email,
    this.displayName,
    this.photoURL,
    required this.role,
    required this.createdAt,
    this.lastLoginAt,
    this.isActive = true,
    this.socialProvider,
    this.socialId,
    this.additionalData,
    this.maritalStatus,
    this.weddingDate,
    this.partnerName,
    this.anniversaryRemindersEnabled = false,
  });

  /// –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ Firestore
  factory AppUser.fromDocument(DocumentSnapshot doc) {
    final data = doc.data()! as Map<String, dynamic>;
    return AppUser.fromMap(data, doc.id);
  }

  /// –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Map
  factory AppUser.fromMap(Map<String, dynamic> data, [String? id]) => AppUser(
        id: id ?? data['id'] ?? '',
        email: data['email'] ?? '',
        displayName: data['displayName'],
        photoURL: data['photoURL'],
        role: _parseUserRole(data['role']),
        createdAt: data['createdAt'] != null
            ? (data['createdAt'] is Timestamp
                ? (data['createdAt'] as Timestamp).toDate()
                : DateTime.parse(data['createdAt'].toString()))
            : DateTime.now(),
        lastLoginAt: data['lastLoginAt'] != null
            ? (data['lastLoginAt'] is Timestamp
                ? (data['lastLoginAt'] as Timestamp).toDate()
                : DateTime.parse(data['lastLoginAt'].toString()))
            : null,
        isActive: data['isActive'] as bool? ?? true,
        socialProvider: data['socialProvider'],
        socialId: data['socialId'],
        additionalData: data['additionalData'],
        maritalStatus: data['maritalStatus'] != null
            ? MaritalStatus.values.firstWhere(
                (e) => e.name == data['maritalStatus'],
                orElse: () => MaritalStatus.single,
              )
            : null,
        weddingDate: data['weddingDate'] != null
            ? (data['weddingDate'] is Timestamp
                ? (data['weddingDate'] as Timestamp).toDate()
                : DateTime.parse(data['weddingDate'].toString()))
            : null,
        partnerName: data['partnerName'],
        anniversaryRemindersEnabled:
            data['anniversaryRemindersEnabled'] as bool? ?? false,
      );

  /// –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Firebase User
  factory AppUser.fromFirebaseUser(
    String uid,
    String email, {
    String? displayName,
    String? photoURL,
    UserRole role = UserRole.customer,
    String? socialProvider,
    String? socialId,
  }) =>
      AppUser(
        id: uid,
        email: email,
        displayName: displayName,
        photoURL: photoURL,
        role: role,
        createdAt: DateTime.now(),
        lastLoginAt: DateTime.now(),
        socialProvider: socialProvider,
        socialId: socialId,
      );
  final String id;
  final String email;

  /// –ì–µ—Ç—Ç–µ—Ä –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å uid
  String get uid => id;
  final String? displayName;
  final String? photoURL;
  final UserRole role;
  final DateTime createdAt;
  final DateTime? lastLoginAt;
  final bool isActive;
  final String? socialProvider; // 'google', 'vk', 'email'
  final String? socialId; // ID –≤ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
  final Map<String, dynamic>? additionalData;

  // –°–µ–º–µ–π–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  final MaritalStatus? maritalStatus;
  final DateTime? weddingDate;
  final String? partnerName;
  final bool anniversaryRemindersEnabled;

  /// –ì–µ—Ç—Ç–µ—Ä –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  String? get phoneNumber => additionalData?['phoneNumber'];

  /// –ì–µ—Ç—Ç–µ—Ä –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∫–æ–¥–æ–º, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–º lastLogin
  DateTime? get lastLogin => lastLoginAt;

  /// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ Map –¥–ª—è Firestore
  Map<String, dynamic> toMap() => {
        'email': email,
        'displayName': displayName,
        'photoURL': photoURL,
        'role': role.name,
        'createdAt': Timestamp.fromDate(createdAt),
        'lastLoginAt':
            lastLoginAt != null ? Timestamp.fromDate(lastLoginAt!) : null,
        'isActive': isActive,
        'socialProvider': socialProvider,
        'socialId': socialId,
        'additionalData': additionalData,
        'maritalStatus': maritalStatus?.name,
        'weddingDate':
            weddingDate != null ? Timestamp.fromDate(weddingDate!) : null,
        'partnerName': partnerName,
        'anniversaryRemindersEnabled': anniversaryRemindersEnabled,
      };

  /// –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
  AppUser copyWith({
    String? id,
    String? email,
    String? displayName,
    String? photoURL,
    UserRole? role,
    DateTime? createdAt,
    DateTime? lastLoginAt,
    bool? isActive,
    String? socialProvider,
    String? socialId,
    Map<String, dynamic>? additionalData,
    MaritalStatus? maritalStatus,
    DateTime? weddingDate,
    String? partnerName,
    bool? anniversaryRemindersEnabled,
  }) =>
      AppUser(
        id: id ?? this.id,
        email: email ?? this.email,
        displayName: displayName ?? this.displayName,
        photoURL: photoURL ?? this.photoURL,
        role: role ?? this.role,
        createdAt: createdAt ?? this.createdAt,
        lastLoginAt: lastLoginAt ?? this.lastLoginAt,
        isActive: isActive ?? this.isActive,
        socialProvider: socialProvider ?? this.socialProvider,
        socialId: socialId ?? this.socialId,
        additionalData: additionalData ?? this.additionalData,
        maritalStatus: maritalStatus ?? this.maritalStatus,
        weddingDate: weddingDate ?? this.weddingDate,
        partnerName: partnerName ?? this.partnerName,
        anniversaryRemindersEnabled:
            anniversaryRemindersEnabled ?? this.anniversaryRemindersEnabled,
      );

  /// –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
  String get displayNameOrEmail => displayName ?? email.split('@').first;

  /// –ì–µ—Ç—Ç–µ—Ä –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∫–æ–¥–æ–º, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–º name
  String get name => displayName ?? email.split('@').first;

  /// –ì–µ—Ç—Ç–µ—Ä –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∫–æ–¥–æ–º, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–º photoUrl
  String? get photoUrl => photoURL;

  /// –ì–µ—Ç—Ç–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  bool get isBanned => !isActive;

  /// –ì–µ—Ç—Ç–µ—Ä –¥–ª—è –ø—Ä–∏—á–∏–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
  String? get banReason => additionalData?['banReason'] as String?;

  /// –ì–µ—Ç—Ç–µ—Ä –¥–ª—è –±–∏–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  String? get bio => additionalData?['bio'] as String?;

  /// –ì–µ—Ç—Ç–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
  bool get isVerified => additionalData?['isVerified'] as bool? ?? false;

  /// –ì–µ—Ç—Ç–µ—Ä –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
  List<String> get specialties =>
      List<String>.from(additionalData?['specialties'] ?? []);

  /// –ì–µ—Ç—Ç–µ—Ä –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (—Å—Ç—Ä–æ–∫–∞)
  String? get specialization => additionalData?['specialization'] as String?;

  /// –ì–µ—Ç—Ç–µ—Ä –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  String? get phone => additionalData?['phone'] as String?;

  /// –ì–µ—Ç—Ç–µ—Ä –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ (–∞–ª–∏–∞—Å –¥–ª—è photoURL)
  String? get avatar => photoURL;

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º
  bool get isSpecialist => role == UserRole.specialist;

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–∞–∑—á–∏–∫–æ–º
  bool get isCustomer => role == UserRole.customer;

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ—Å—Ç–µ–º
  bool get isGuest => role == UserRole.guest;

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  bool get isAdmin => role == UserRole.admin;

  /// –ü–æ–ª—É—á–∏—Ç—å —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏
  String get roleDisplayName {
    switch (role) {
      case UserRole.customer:
        return '–ó–∞–∫–∞–∑—á–∏–∫';
      case UserRole.specialist:
        return '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç';
      case UserRole.organizer:
        return '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä';
      case UserRole.moderator:
        return '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä';
      case UserRole.guest:
        return '–ì–æ—Å—Ç—å';
      case UserRole.admin:
        return '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä';
    }
  }

  /// –ü–∞—Ä—Å–∏–Ω–≥ —Ä–æ–ª–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏
  static UserRole _parseUserRole(roleData) {
    if (roleData == null) return UserRole.customer;

    final roleString = roleData.toString().toLowerCase();
    switch (roleString) {
      case 'specialist':
        return UserRole.specialist;
      case 'guest':
        return UserRole.guest;
      case 'admin':
        return UserRole.admin;
      case 'customer':
      default:
        return UserRole.customer;
    }
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is AppUser && other.id == id;
  }

  @override
  int get hashCode => id.hashCode;

  @override
  String toString() =>
      'AppUser(id: $id, email: $email, role: $role, displayName: $displayName)';
}

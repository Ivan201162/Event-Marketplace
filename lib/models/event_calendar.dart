/// –°–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
class CalendarEvent {
  const CalendarEvent({
    required this.id,
    required this.userId,
    required this.title,
    required this.date,
    required this.type,
    this.description,
    this.location,
    this.reminderTime,
    this.isRecurring = false,
    this.recurringPattern,
    this.relatedBookingId,
    this.createdAt,
    this.updatedAt,
  });

  final String id;
  final String userId;
  final String title;
  final DateTime date;
  final EventType type;
  final String? description;
  final String? location;
  final DateTime? reminderTime;
  final bool isRecurring;
  final RecurringPattern? recurringPattern;
  final String? relatedBookingId;
  final DateTime? createdAt;
  final DateTime? updatedAt;

  factory CalendarEvent.fromMap(Map<String, dynamic> map) {
    return CalendarEvent(
      id: map['id'] as String,
      userId: map['userId'] as String,
      title: map['title'] as String,
      date: (map['date'] as DateTime),
      type: EventType.values.firstWhere(
        (e) => e.name == map['type'],
        orElse: () => EventType.other,
      ),
      description: map['description'] as String?,
      location: map['location'] as String?,
      reminderTime: map['reminderTime'] != null 
          ? (map['reminderTime'] as DateTime)
          : null,
      isRecurring: map['isRecurring'] as bool? ?? false,
      recurringPattern: map['recurringPattern'] != null
          ? RecurringPattern.fromMap(map['recurringPattern'] as Map<String, dynamic>)
          : null,
      relatedBookingId: map['relatedBookingId'] as String?,
      createdAt: map['createdAt'] != null 
          ? (map['createdAt'] as DateTime)
          : null,
      updatedAt: map['updatedAt'] != null 
          ? (map['updatedAt'] as DateTime)
          : null,
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'userId': userId,
      'title': title,
      'date': date,
      'type': type.name,
      'description': description,
      'location': location,
      'reminderTime': reminderTime,
      'isRecurring': isRecurring,
      'recurringPattern': recurringPattern?.toMap(),
      'relatedBookingId': relatedBookingId,
      'createdAt': createdAt,
      'updatedAt': updatedAt,
    };
  }

  CalendarEvent copyWith({
    String? id,
    String? userId,
    String? title,
    DateTime? date,
    EventType? type,
    String? description,
    String? location,
    DateTime? reminderTime,
    bool? isRecurring,
    RecurringPattern? recurringPattern,
    String? relatedBookingId,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return CalendarEvent(
      id: id ?? this.id,
      userId: userId ?? this.userId,
      title: title ?? this.title,
      date: date ?? this.date,
      type: type ?? this.type,
      description: description ?? this.description,
      location: location ?? this.location,
      reminderTime: reminderTime ?? this.reminderTime,
      isRecurring: isRecurring ?? this.isRecurring,
      recurringPattern: recurringPattern ?? this.recurringPattern,
      relatedBookingId: relatedBookingId ?? this.relatedBookingId,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
    );
  }
}

/// –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
enum EventType {
  anniversary, // –ì–æ–¥–æ–≤—â–∏–Ω–∞
  birthday, // –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
  wedding, // –°–≤–∞–¥—å–±–∞
  corporate, // –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
  holiday, // –ü—Ä–∞–∑–¥–Ω–∏–∫
  reminder, // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
  booking, // –°–≤—è–∑–∞–Ω–Ω–æ–µ —Å –∑–∞—è–≤–∫–æ–π
  other, // –î—Ä—É–≥–æ–µ
}

/// –ü–∞—Ç—Ç–µ—Ä–Ω –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
class RecurringPattern {
  const RecurringPattern({
    required this.frequency,
    required this.interval,
    this.endDate,
    this.daysOfWeek,
    this.dayOfMonth,
  });

  final RecurringFrequency frequency;
  final int interval;
  final DateTime? endDate;
  final List<int>? daysOfWeek; // 1-7 (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
  final int? dayOfMonth; // 1-31

  factory RecurringPattern.fromMap(Map<String, dynamic> map) {
    return RecurringPattern(
      frequency: RecurringFrequency.values.firstWhere(
        (e) => e.name == map['frequency'],
        orElse: () => RecurringFrequency.yearly,
      ),
      interval: map['interval'] as int,
      endDate: map['endDate'] != null 
          ? (map['endDate'] as DateTime)
          : null,
      daysOfWeek: map['daysOfWeek'] != null 
          ? List<int>.from(map['daysOfWeek'] as List)
          : null,
      dayOfMonth: map['dayOfMonth'] as int?,
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'frequency': frequency.name,
      'interval': interval,
      'endDate': endDate,
      'daysOfWeek': daysOfWeek,
      'dayOfMonth': dayOfMonth,
    };
  }
}

/// –ß–∞—Å—Ç–æ—Ç–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
enum RecurringFrequency {
  daily, // –ï–∂–µ–¥–Ω–µ–≤–Ω–æ
  weekly, // –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ
  monthly, // –ï–∂–µ–º–µ—Å—è—á–Ω–æ
  yearly, // –ï–∂–µ–≥–æ–¥–Ω–æ
}

/// –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
class EventReminder {
  const EventReminder({
    required this.id,
    required this.eventId,
    required this.userId,
    required this.reminderTime,
    required this.message,
    this.isSent = false,
    this.sentAt,
  });

  final String id;
  final String eventId;
  final String userId;
  final DateTime reminderTime;
  final String message;
  final bool isSent;
  final DateTime? sentAt;

  factory EventReminder.fromMap(Map<String, dynamic> map) {
    return EventReminder(
      id: map['id'] as String,
      eventId: map['eventId'] as String,
      userId: map['userId'] as String,
      reminderTime: (map['reminderTime'] as DateTime),
      message: map['message'] as String,
      isSent: map['isSent'] as bool? ?? false,
      sentAt: map['sentAt'] != null 
          ? (map['sentAt'] as DateTime)
          : null,
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'eventId': eventId,
      'userId': userId,
      'reminderTime': reminderTime,
      'message': message,
      'isSent': isSent,
      'sentAt': sentAt,
    };
  }
}

/// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è EventType
extension EventTypeExtension on EventType {
  String get displayName {
    switch (this) {
      case EventType.anniversary:
        return '–ì–æ–¥–æ–≤—â–∏–Ω–∞';
      case EventType.birthday:
        return '–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è';
      case EventType.wedding:
        return '–°–≤–∞–¥—å–±–∞';
      case EventType.corporate:
        return '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ';
      case EventType.holiday:
        return '–ü—Ä–∞–∑–¥–Ω–∏–∫';
      case EventType.reminder:
        return '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ';
      case EventType.booking:
        return '–°–≤—è–∑–∞–Ω–Ω–æ–µ —Å –∑–∞—è–≤–∫–æ–π';
      case EventType.other:
        return '–î—Ä—É–≥–æ–µ';
    }
  }

  String get icon {
    switch (this) {
      case EventType.anniversary:
        return 'üéâ';
      case EventType.birthday:
        return 'üéÇ';
      case EventType.wedding:
        return 'üíí';
      case EventType.corporate:
        return 'üè¢';
      case EventType.holiday:
        return 'üéä';
      case EventType.reminder:
        return '‚è∞';
      case EventType.booking:
        return 'üìÖ';
      case EventType.other:
        return 'üìå';
    }
  }
}

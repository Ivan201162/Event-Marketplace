/// –°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
class SocialLink {
  const SocialLink({
    required this.id,
    required this.specialistId,
    required this.platform,
    required this.url,
    required this.username,
    required this.isVerified,
    required this.isPublic,
    this.followersCount,
    this.createdAt,
  });

  /// –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
  final String id;

  /// ID —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
  final String specialistId;

  /// –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞
  final SocialPlatform platform;

  /// URL –ø—Ä–æ—Ñ–∏–ª—è
  final String url;

  /// –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  final String username;

  /// –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç
  final bool isVerified;

  /// –ü—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø
  final bool isPublic;

  /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
  final int? followersCount;

  /// –î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
  final DateTime? createdAt;

  /// –°–æ–∑–¥–∞—Ç—å –∏–∑ Map
  factory SocialLink.fromMap(Map<String, dynamic> map) {
    return SocialLink(
      id: map['id'] as String,
      specialistId: map['specialistId'] as String,
      platform: SocialPlatform.fromString(map['platform'] as String),
      url: map['url'] as String,
      username: map['username'] as String,
      isVerified: (map['isVerified'] as bool?) ?? false,
      isPublic: (map['isPublic'] as bool?) ?? true,
      followersCount: map['followersCount'] as int?,
      createdAt: map['createdAt'] != null
          ? DateTime.fromMillisecondsSinceEpoch(map['createdAt'] as int)
          : null,
    );
  }

  /// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ Map
  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'specialistId': specialistId,
      'platform': platform.value,
      'url': url,
      'username': username,
      'isVerified': isVerified,
      'isPublic': isPublic,
      'followersCount': followersCount,
      'createdAt': createdAt?.millisecondsSinceEpoch,
    };
  }

  /// –°–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
  SocialLink copyWith({
    String? id,
    String? specialistId,
    SocialPlatform? platform,
    String? url,
    String? username,
    bool? isVerified,
    bool? isPublic,
    int? followersCount,
    DateTime? createdAt,
  }) {
    return SocialLink(
      id: id ?? this.id,
      specialistId: specialistId ?? this.specialistId,
      platform: platform ?? this.platform,
      url: url ?? this.url,
      username: username ?? this.username,
      isVerified: isVerified ?? this.isVerified,
      isPublic: isPublic ?? this.isPublic,
      followersCount: followersCount ?? this.followersCount,
      createdAt: createdAt ?? this.createdAt,
    );
  }
}

/// –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
enum SocialPlatform {
  instagram('instagram'),
  vk('vk'),
  telegram('telegram'),
  youtube('youtube'),
  tiktok('tiktok'),
  facebook('facebook'),
  twitter('twitter'),
  linkedin('linkedin'),
  website('website');

  const SocialPlatform(this.value);
  final String value;

  static SocialPlatform fromString(String value) {
    switch (value) {
      case 'instagram':
        return SocialPlatform.instagram;
      case 'vk':
        return SocialPlatform.vk;
      case 'telegram':
        return SocialPlatform.telegram;
      case 'youtube':
        return SocialPlatform.youtube;
      case 'tiktok':
        return SocialPlatform.tiktok;
      case 'facebook':
        return SocialPlatform.facebook;
      case 'twitter':
        return SocialPlatform.twitter;
      case 'linkedin':
        return SocialPlatform.linkedin;
      case 'website':
        return SocialPlatform.website;
      default:
        return SocialPlatform.website;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
  String get icon {
    switch (this) {
      case SocialPlatform.instagram:
        return 'üì∑';
      case SocialPlatform.vk:
        return 'üîµ';
      case SocialPlatform.telegram:
        return '‚úàÔ∏è';
      case SocialPlatform.youtube:
        return 'üì∫';
      case SocialPlatform.tiktok:
        return 'üéµ';
      case SocialPlatform.facebook:
        return 'üìò';
      case SocialPlatform.twitter:
        return 'üê¶';
      case SocialPlatform.linkedin:
        return 'üíº';
      case SocialPlatform.website:
        return 'üåê';
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
  String get color {
    switch (this) {
      case SocialPlatform.instagram:
        return '#E4405F';
      case SocialPlatform.vk:
        return '#0077FF';
      case SocialPlatform.telegram:
        return '#0088CC';
      case SocialPlatform.youtube:
        return '#FF0000';
      case SocialPlatform.tiktok:
        return '#000000';
      case SocialPlatform.facebook:
        return '#1877F2';
      case SocialPlatform.twitter:
        return '#1DA1F2';
      case SocialPlatform.linkedin:
        return '#0077B5';
      case SocialPlatform.website:
        return '#6B7280';
    }
  }
}


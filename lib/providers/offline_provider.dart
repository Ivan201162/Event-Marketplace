import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../services/offline_service.dart';

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
final connectivityProvider = StreamProvider<bool>((ref) => OfflineService.isOnline().asStream());

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞
final offlineModeProvider = NotifierProvider<OfflineModeNotifier, OfflineModeState>(
  (ref) => OfflineModeNotifier(),
);

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—ç—à–µ
final cacheInfoProvider = NotifierProvider<CacheInfoNotifier, CacheInfoState>(
  (ref) => CacheInfoNotifier(),
);

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
final syncProvider = NotifierProvider<SyncNotifier, SyncState>((ref) => SyncNotifier());

/// –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞
class OfflineModeState {
  const OfflineModeState({
    this.isOfflineMode = false,
    this.isOnline = true,
    this.lastSyncTime,
    this.isCacheStale = false,
    this.error,
  });
  final bool isOfflineMode;
  final bool isOnline;
  final DateTime? lastSyncTime;
  final bool isCacheStale;
  final String? error;

  OfflineModeState copyWith({
    bool? isOfflineMode,
    bool? isOnline,
    DateTime? lastSyncTime,
    bool? isCacheStale,
    String? error,
  }) => OfflineModeState(
    isOfflineMode: isOfflineMode ?? this.isOfflineMode,
    isOnline: isOnline ?? this.isOnline,
    lastSyncTime: lastSyncTime ?? this.lastSyncTime,
    isCacheStale: isCacheStale ?? this.isCacheStale,
    error: error ?? this.error,
  );

  /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  String get connectionStatus {
    if (isOfflineMode) return '–û—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º';
    if (isOnline) return '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ';
    return '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è';
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É —Å—Ç–∞—Ç—É—Å–∞
  String get statusIcon {
    if (isOfflineMode) return 'üì±';
    if (isOnline) return 'üåê';
    return '‚ùå';
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞
  int get statusColor {
    if (isOfflineMode) return 0xFFFF9800; // –û—Ä–∞–Ω–∂–µ–≤—ã–π
    if (isOnline) return 0xFF4CAF50; // –ó–µ–ª–µ–Ω—ã–π
    return 0xFFF44336; // –ö—Ä–∞—Å–Ω—ã–π
  }
}

/// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—ç—à–µ
class CacheInfoState {
  const CacheInfoState({
    this.isLoading = false,
    this.cacheSize = 0,
    this.cacheKeys = const [],
    this.cacheVersion = 0,
    this.error,
  });
  final bool isLoading;
  final int cacheSize;
  final List<String> cacheKeys;
  final int cacheVersion;
  final String? error;

  CacheInfoState copyWith({
    bool? isLoading,
    int? cacheSize,
    List<String>? cacheKeys,
    int? cacheVersion,
    String? error,
  }) => CacheInfoState(
    isLoading: isLoading ?? this.isLoading,
    cacheSize: cacheSize ?? this.cacheSize,
    cacheKeys: cacheKeys ?? this.cacheKeys,
    cacheVersion: cacheVersion ?? this.cacheVersion,
    error: error ?? this.error,
  );

  /// –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
  String get formattedCacheSize => OfflineService.formatBytes(cacheSize);

  /// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫—ç—à–µ
  int get cacheItemsCount => cacheKeys.length;
}

/// –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
class SyncState {
  const SyncState({
    this.isSyncing = false,
    this.lastSyncTime,
    this.error,
    this.syncProgress = 0,
    this.currentOperation,
  });
  final bool isSyncing;
  final DateTime? lastSyncTime;
  final String? error;
  final int syncProgress;
  final String? currentOperation;

  SyncState copyWith({
    bool? isSyncing,
    DateTime? lastSyncTime,
    String? error,
    int? syncProgress,
    String? currentOperation,
  }) => SyncState(
    isSyncing: isSyncing ?? this.isSyncing,
    lastSyncTime: lastSyncTime ?? this.lastSyncTime,
    error: error ?? this.error,
    syncProgress: syncProgress ?? this.syncProgress,
    currentOperation: currentOperation ?? this.currentOperation,
  );

  /// –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
  String get formattedLastSyncTime {
    if (lastSyncTime == null) return '–ù–∏–∫–æ–≥–¥–∞';

    final now = DateTime.now();
    final difference = now.difference(lastSyncTime!);

    if (difference.inMinutes < 1) {
      return '–¢–æ–ª—å–∫–æ —á—Ç–æ';
    } else if (difference.inMinutes < 60) {
      return '${difference.inMinutes} –º–∏–Ω. –Ω–∞–∑–∞–¥';
    } else if (difference.inHours < 24) {
      return '${difference.inHours} —á. –Ω–∞–∑–∞–¥';
    } else {
      return '${difference.inDays} –¥–Ω. –Ω–∞–∑–∞–¥';
    }
  }
}

/// –ù–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –æ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞
class OfflineModeNotifier extends Notifier<OfflineModeState> {
  OfflineModeNotifier() : super() {
    _initialize();
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  Future<void> _initialize() async {
    await _updateConnectionStatus();
    await _updateOfflineMode();
    await _updateLastSyncTime();
    await _updateCacheStatus();
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  Future<void> _updateConnectionStatus() async {
    try {
      final isOnline = await OfflineService.isOnline();
      state = state.copyWith(isOnline: isOnline);
    } catch (e) {
      state = state.copyWith(error: e.toString());
    }
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞
  Future<void> _updateOfflineMode() async {
    try {
      final isOfflineMode = await OfflineService.isOfflineMode();
      state = state.copyWith(isOfflineMode: isOfflineMode);
    } catch (e) {
      state = state.copyWith(error: e.toString());
    }
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  Future<void> _updateLastSyncTime() async {
    try {
      final lastSyncTime = await OfflineService.getLastSyncTime();
      state = state.copyWith(lastSyncTime: lastSyncTime);
    } catch (e) {
      state = state.copyWith(error: e.toString());
    }
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫—ç—à–∞
  Future<void> _updateCacheStatus() async {
    try {
      final isCacheStale = await OfflineService.isCacheStale();
      state = state.copyWith(isCacheStale: isCacheStale);
    } catch (e) {
      state = state.copyWith(error: e.toString());
    }
  }

  /// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –æ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º
  Future<void> toggleOfflineMode() async {
    try {
      final newMode = !state.isOfflineMode;
      await OfflineService.setOfflineMode(newMode);
      state = state.copyWith(isOfflineMode: newMode);
    } catch (e) {
      state = state.copyWith(error: e.toString());
    }
  }

  /// –í–∫–ª—é—á–∏—Ç—å –æ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º
  Future<void> enableOfflineMode() async {
    try {
      await OfflineService.setOfflineMode(true);
      state = state.copyWith(isOfflineMode: true);
    } catch (e) {
      state = state.copyWith(error: e.toString());
    }
  }

  /// –û—Ç–∫–ª—é—á–∏—Ç—å –æ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º
  Future<void> disableOfflineMode() async {
    try {
      await OfflineService.setOfflineMode(false);
      state = state.copyWith(isOfflineMode: false);
    } catch (e) {
      state = state.copyWith(error: e.toString());
    }
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  Future<void> updateConnectionStatus() async {
    await _updateConnectionStatus();
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
  Future<void> refresh() async {
    await _initialize();
  }

  /// –û—á–∏—Å—Ç–∏—Ç—å –æ—à–∏–±–∫–∏
  void clearError() {
    state = state.copyWith();
  }
}

/// –ù–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—ç—à–µ
class CacheInfoNotifier extends Notifier<CacheInfoState> {
  CacheInfoNotifier() : super() {
    _loadCacheInfo();
  }

  /// –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ
  Future<void> _loadCacheInfo() async {
    state = state.copyWith(isLoading: true);

    try {
      final cacheSize = await OfflineService.getCacheSize();
      final cacheKeys = await OfflineService.getCacheKeys();
      final cacheVersion = await OfflineService.getCacheVersion();

      state = state.copyWith(
        isLoading: false,
        cacheSize: cacheSize,
        cacheKeys: cacheKeys,
        cacheVersion: cacheVersion,
      );
    } catch (e) {
      state = state.copyWith(isLoading: false, error: e.toString());
    }
  }

  /// –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à
  Future<void> clearCache() async {
    state = state.copyWith(isLoading: true);

    try {
      await OfflineService.clearCache();
      state = state.copyWith(isLoading: false, cacheSize: 0, cacheKeys: []);
    } catch (e) {
      state = state.copyWith(isLoading: false, error: e.toString());
    }
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ
  Future<void> refresh() async {
    await _loadCacheInfo();
  }

  /// –û—á–∏—Å—Ç–∏—Ç—å –æ—à–∏–±–∫–∏
  void clearError() {
    state = state.copyWith();
  }
}

/// –ù–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
class SyncNotifier extends Notifier<SyncState> {
  SyncNotifier() : super() {
    _loadLastSyncTime();
  }

  /// –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  Future<void> _loadLastSyncTime() async {
    try {
      final lastSyncTime = await OfflineService.getLastSyncTime();
      state = state.copyWith(lastSyncTime: lastSyncTime);
    } catch (e) {
      state = state.copyWith(error: e.toString());
    }
  }

  /// –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
  Future<void> startSync() async {
    if (state.isSyncing) return;

    state = state.copyWith(
      isSyncing: true,
      syncProgress: 0,
      currentOperation: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...',
    );

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      final isOnline = await OfflineService.isOnline();
      if (!isOnline) {
        state = state.copyWith(isSyncing: false, error: '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      state = state.copyWith(
        syncProgress: 25,
        currentOperation: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...',
      );

      // TODO(developer): –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
      await Future.delayed(const Duration(seconds: 1));

      state = state.copyWith(syncProgress: 50, currentOperation: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π...');

      // TODO(developer): –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
      await Future.delayed(const Duration(seconds: 1));

      state = state.copyWith(syncProgress: 75, currentOperation: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π...');

      // TODO(developer): –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
      await Future.delayed(const Duration(seconds: 1));

      state = state.copyWith(syncProgress: 100, currentOperation: '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      await OfflineService.updateLastSyncTime();
      await OfflineService.updateCacheVersion();

      state = state.copyWith(isSyncing: false, lastSyncTime: DateTime.now(), syncProgress: 0);
    } catch (e) {
      state = state.copyWith(isSyncing: false, error: e.toString(), syncProgress: 0);
    }
  }

  /// –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
  void stopSync() {
    state = state.copyWith(isSyncing: false, syncProgress: 0);
  }

  /// –û—á–∏—Å—Ç–∏—Ç—å –æ—à–∏–±–∫–∏
  void clearError() {
    state = state.copyWith();
  }
}

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
final canPerformOperationProvider = Provider.family<bool, String>((ref, operation) {
  final offlineState = ref.watch(offlineModeProvider);

  if (offlineState.isOfflineMode) {
    return OfflineUtils.canPerformOffline(operation);
  }

  return true; // –í –æ–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
});

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö
final operationLimitationProvider = Provider.family<String, String>((ref, operation) {
  final offlineState = ref.watch(offlineModeProvider);

  if (offlineState.isOfflineMode && !OfflineUtils.canPerformOffline(operation)) {
    return OfflineUtils.getOfflineLimitationMessage(operation);
  }

  return '';
});

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞
final offlineRecommendationsProvider = Provider<List<String>>(
  (ref) => OfflineUtils.getOfflineRecommendations(),
);

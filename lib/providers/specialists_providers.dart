import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

import '../models/common_types.dart';
import '../models/price_range.dart';
import '../models/specialist.dart';
import '../services/mock_data_service.dart';

/// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
enum SpecialistCategory {
  host('–í–µ–¥—É—â–∏–µ', 'host', 'üé§'),
  dj('–î–∏–¥–∂–µ–∏', 'dj', 'üéß'),
  photographer('–§–æ—Ç–æ–≥—Ä–∞—Ñ—ã', 'photographer', 'üì∏'),
  animator('–ê–Ω–∏–º–∞—Ç–æ—Ä—ã', 'animator', 'üé≠'),
  videographer('–í–∏–¥–µ–æ–≥—Ä–∞—Ñ—ã', 'videographer', 'üé¨'),
  decorator('–î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã', 'decorator', 'üé®'),
  musician('–ú—É–∑—ã–∫–∞–Ω—Ç—ã', 'musician', 'üéµ'),
  makeup('–í–∏–∑–∞–∂–∏—Å—Ç—ã', 'makeup', 'üíÑ');

  const SpecialistCategory(this.displayName, this.value, this.emoji);

  final String displayName;
  final String value;
  final String emoji;

  static SpecialistCategory? fromValue(String value) {
    for (final category in SpecialistCategory.values) {
      if (category.value == value) {
        return category;
      }
    }
    return null;
  }
}

/// –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
class SpecialistFilters {
  const SpecialistFilters({
    this.minPrice,
    this.maxPrice,
    this.minRating,
    this.maxRating,
    this.city,
    this.availableDate,
    this.searchQuery,
  });
  final double? minPrice;
  final double? maxPrice;
  final double? minRating;
  final double? maxRating;
  final String? city;
  final DateTime? availableDate;
  final String? searchQuery;

  SpecialistFilters copyWith({
    double? minPrice,
    double? maxPrice,
    double? minRating,
    double? maxRating,
    String? city,
    DateTime? availableDate,
    String? searchQuery,
  }) =>
      SpecialistFilters(
        minPrice: minPrice ?? this.minPrice,
        maxPrice: maxPrice ?? this.maxPrice,
        minRating: minRating ?? this.minRating,
        maxRating: maxRating ?? this.maxRating,
        city: city ?? this.city,
        availableDate: availableDate ?? this.availableDate,
        searchQuery: searchQuery ?? this.searchQuery,
      );

  bool get hasActiveFilters =>
      minPrice != null ||
      maxPrice != null ||
      minRating != null ||
      maxRating != null ||
      city != null ||
      availableDate != null ||
      (searchQuery != null && searchQuery!.isNotEmpty);

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is SpecialistFilters &&
        other.minPrice == minPrice &&
        other.maxPrice == maxPrice &&
        other.minRating == minRating &&
        other.maxRating == maxRating &&
        other.city == city &&
        other.availableDate == availableDate &&
        other.searchQuery == searchQuery;
  }

  @override
  int get hashCode => Object.hash(
        minPrice,
        maxPrice,
        minRating,
        maxRating,
        city,
        availableDate,
        searchQuery,
      );
}

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
final specialistFiltersProvider =
    StateProvider<SpecialistFilters>((ref) => const SpecialistFilters());

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
final specialistsProvider = FutureProvider.family<List<Specialist>, String>(
  (ref, category) async => MockDataService.getSpecialistsByCategory(category),
);

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ (–º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å StateNotifierProvider)
final paginatedSpecialistsProvider =
    NotifierProvider.family<PaginatedSpecialistsNotifier, AsyncValue<List<Specialist>>, String>(
        () => PaginatedSpecialistsNotifier());

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
final specialistCitiesProvider = FutureProvider.family<List<String>, String>((ref, category) async {
  final specialists = MockDataService.getSpecialistsByCategory(category);
  final cities = specialists
      .map((specialist) => specialist.city)
      .where((city) => city != null)
      .cast<String>()
      .toSet()
      .toList();
  cities.sort();
  return cities;
});

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
final specialistPriceRangeProvider =
    FutureProvider.family<Map<String, double>, String>((ref, category) async {
  final specialists = MockDataService.getSpecialistsByCategory(category);
  var minPrice = double.infinity;
  double maxPrice = 0;

  for (final specialist in specialists) {
    final price = specialist.pricePerHour;
    if (price < minPrice) minPrice = price;
    if (price > maxPrice) maxPrice = price;
  }

  return {
    'min': minPrice == double.infinity ? 0 : minPrice,
    'max': maxPrice,
  };
});

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
final searchSpecialistsProvider = FutureProvider.family<List<Specialist>, String>(
  (ref, query) async => MockDataService.searchSpecialists(query),
);

/// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
Future<List<Specialist>> _loadSpecialistsByCategory(String category) async {
  try {
    final query =
        FirebaseFirestore.instance.collection('specialists').where('category', isEqualTo: category);

    final querySnapshot = await query.get();
    final specialists = <Specialist>[];

    for (final doc in querySnapshot.docs) {
      try {
        final specialist = Specialist.fromDocument(doc);
        specialists.add(specialist);
      } on Exception {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        continue;
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
    specialists.sort((a, b) => b.rating.compareTo(a.rating));

    return specialists;
  } catch (e) {
    throw Exception('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤: $e');
  }
}

/// Notifier –¥–ª—è –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ (–º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å StateNotifier)
class PaginatedSpecialistsNotifier extends FamilyNotifier<AsyncValue<List<Specialist>>, String> {
  @override
  AsyncValue<List<Specialist>> build(String category) {
    loadSpecialists();
    return const AsyncValue.loading();
  }

  static const int _pageSize = 8;
  DocumentSnapshot? _lastDocument;
  bool _hasMore = true;
  SpecialistFilters _currentFilters = const SpecialistFilters();
  List<Specialist> _allSpecialists = [];

  Future<void> loadSpecialists({bool refresh = false}) async {
    if (refresh) {
      _lastDocument = null;
      _hasMore = true;
      state = const AsyncValue.loading();
    }

    if (!_hasMore && !refresh) return;

    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º mock-–¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
      if (_allSpecialists.isEmpty) {
        _allSpecialists = MockDataService.getSpecialistsByCategory(category);
      }

      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
      final filteredSpecialists = _allSpecialists
          .where((specialist) => _matchesFilters(specialist, _currentFilters))
          .toList();

      // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
      final startIndex = (_lastDocument != null ? _getCurrentPage() : 0) * _pageSize;
      final endIndex = (startIndex + _pageSize).clamp(0, filteredSpecialists.length);

      if (startIndex >= filteredSpecialists.length) {
        _hasMore = false;
        return;
      }

      final newSpecialists = filteredSpecialists.sublist(startIndex, endIndex);
      _hasMore = endIndex < filteredSpecialists.length;

      _lastDocument ??= _createMockDocument();

      final currentList = state.valueOrNull ?? <Specialist>[];
      final updatedList = refresh ? newSpecialists : [...currentList, ...newSpecialists];

      state = AsyncValue.data(updatedList);
    } on Exception catch (e) {
      state = AsyncValue.error(e, StackTrace.current);
    }
  }

  int _getCurrentPage() {
    final currentList = state.valueOrNull ?? <Specialist>[];
    return (currentList.length / _pageSize).floor();
  }

  DocumentSnapshot _createMockDocument() {
    // –°–æ–∑–¥–∞–µ–º mock DocumentSnapshot –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    return MockDocumentSnapshot();
  }

  Future<void> applyFilters(SpecialistFilters filters) async {
    _currentFilters = filters;
    await loadSpecialists(refresh: true);
  }

  Future<void> loadMore() async {
    if (_hasMore && !state.isLoading) {
      await loadSpecialists();
    }
  }

  void clearFilters() {
    _currentFilters = const SpecialistFilters();
    loadSpecialists(refresh: true);
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ —Ñ–∏–ª—å—Ç—Ä–∞–º
  bool _matchesFilters(Specialist specialist, SpecialistFilters filters) {
    // –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ
    if (filters.minPrice != null || filters.maxPrice != null) {
      final price = specialist.pricePerHour;
      if (filters.minPrice != null && price < filters.minPrice!) {
        return false;
      }
      if (filters.maxPrice != null && price > filters.maxPrice!) {
        return false;
      }
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
    if (filters.minRating != null && specialist.rating < filters.minRating!) {
      return false;
    }
    if (filters.maxRating != null && specialist.rating > filters.maxRating!) {
      return false;
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥—É
    if (filters.city != null && filters.city!.isNotEmpty) {
      if (specialist.city != filters.city) {
        return false;
      }
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
    if (filters.searchQuery != null && filters.searchQuery!.isNotEmpty) {
      final query = filters.searchQuery!.toLowerCase();
      final fullName = specialist.name.toLowerCase();
      final city = specialist.city.toLowerCase() ?? '';

      if (!fullName.contains(query) && !city.contains(query)) {
        return false;
      }
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ–π –¥–∞—Ç–µ
    if (filters.availableDate != null) {
      // TODO(developer): –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞—Ç—ã
      // –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true –¥–ª—è –≤—Å–µ—Ö
    }

    return true;
  }
}

/// Mock DocumentSnapshot –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
class MockDocumentSnapshot implements DocumentSnapshot<Map<String, dynamic>> {
  @override
  String get id => 'mock_doc';

  @override
  Map<String, dynamic>? data() => {'id': 'mock_doc'};

  @override
  dynamic get(Object field) => null;

  @override
  dynamic operator [](Object field) => null;

  @override
  bool get exists => true;

  @override
  DocumentReference<Map<String, dynamic>> get reference => throw UnimplementedError();

  @override
  SnapshotMetadata get metadata => throw UnimplementedError();
}

/// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è mock-–¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
List<Specialist> _generateMockSpecialistsForCategory(String category) {
  final categoryEnum = SpecialistCategory.fromValue(category);
  if (categoryEnum == null) return [];

  final cities = [
    '–ú–æ—Å–∫–≤–∞',
    '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
    '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫',
    '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥',
    '–ö–∞–∑–∞–Ω—å',
    '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥',
  ];
  final names = [
    ('–ê–ª–µ–∫—Å–µ–π', '–°–º–∏—Ä–Ω–æ–≤'),
    ('–ê–Ω–Ω–∞', '–ü–µ—Ç—Ä–æ–≤–∞'),
    ('–ú–∏—Ö–∞–∏–ª', '–ö–æ–∑–ª–æ–≤'),
    ('–ï–ª–µ–Ω–∞', '–í–æ–ª–∫–æ–≤–∞'),
    ('–î–º–∏—Ç—Ä–∏–π', '–ù–æ–≤–∏–∫–æ–≤'),
    ('–û–ª—å–≥–∞', '–ú–æ—Ä–æ–∑–æ–≤–∞'),
    ('–°–µ—Ä–≥–µ–π', '–ü–∞–≤–ª–æ–≤'),
    ('–¢–∞—Ç—å—è–Ω–∞', '–°–æ–∫–æ–ª–æ–≤–∞'),
    ('–ê–Ω–¥—Ä–µ–π', '–õ–µ–±–µ–¥–µ–≤'),
    ('–ù–∞—Ç–∞–ª—å—è', '–ö–æ–∑–ª–æ–≤–∞'),
    ('–ò–≥–æ—Ä—å', '–ù–æ–≤–∏–∫–æ–≤'),
    ('–°–≤–µ—Ç–ª–∞–Ω–∞', '–ú–æ—Ä–æ–∑–æ–≤–∞'),
    ('–í–ª–∞–¥–∏–º–∏—Ä', '–ü–µ—Ç—Ä–æ–≤'),
    ('–õ—é–¥–º–∏–ª–∞', '–í–æ–ª–∫–æ–≤–∞'),
    ('–ù–∏–∫–æ–ª–∞–π', '–°–º–∏—Ä–Ω–æ–≤'),
    ('–ú–∞—Ä–∏—è', '–ö—É–∑–Ω–µ—Ü–æ–≤–∞'),
    ('–ê–ª–µ–∫—Å–∞–Ω–¥—Ä', '–ü–æ–ø–æ–≤'),
    ('–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞', '–í–∞—Å–∏–ª—å–µ–≤–∞'),
    ('–ú–∞–∫—Å–∏–º', '–°–æ–∫–æ–ª–æ–≤'),
    ('–Æ–ª–∏—è', '–ú–∏—Ö–∞–π–ª–æ–≤–∞'),
  ];

  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  final count = _getSpecialistCountForCategory(categoryEnum);

  return List.generate(count, (index) {
    final name = names[index % names.length];
    final city = cities[index % cities.length];
    final rating = 3.0 + (index % 20) * 0.1; // –†–µ–π—Ç–∏–Ω–≥ –æ—Ç 3.0 –¥–æ 5.0
    final priceRange = _getPriceRangeForCategory(categoryEnum, index);
    final subcategories = _getSubcategoriesForCategory(categoryEnum);

    return Specialist(
      id: '${category}_${index + 1}',
      userId: 'user_${index + 1}',
      name: '${name.$1} ${name.$2}',
      specialization: _getSpecializationForCategory(categoryEnum),
      city: city,
      rating: rating,
      pricePerHour: priceRange.minPrice.toInt(),
      category: _getSpecialistCategoryFromString(categoryEnum.displayName),
      experienceLevel: ExperienceLevel.values[index % ExperienceLevel.values.length],
      yearsOfExperience: 1 + (index % 10),
      description: _getDescriptionForCategory(categoryEnum, index),
      avatarUrl:
          'https://images.unsplash.com/photo-${1500000000000 + index * 1000000}?w=400&h=400&fit=crop&crop=face',
      isVerified: index % 4 == 0,
      createdAt: DateTime.now().subtract(Duration(days: 365 - index * 5)),
      updatedAt: DateTime.now().subtract(Duration(days: index)),
    );
  });
}

/// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ SpecialistCategory
SpecialistCategory _getSpecialistCategoryFromString(String categoryName) {
  switch (categoryName) {
    case '–í–µ–¥—É—â–∏–µ':
      return SpecialistCategory.host;
    case '–î–∏–¥–∂–µ–∏':
      return SpecialistCategory.dj;
    case '–§–æ—Ç–æ–≥—Ä–∞—Ñ—ã':
      return SpecialistCategory.photographer;
    case '–ê–Ω–∏–º–∞—Ç–æ—Ä—ã':
      return SpecialistCategory.animator;
    case '–í–∏–¥–µ–æ–≥—Ä–∞—Ñ—ã':
      return SpecialistCategory.videographer;
    case '–î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã':
      return SpecialistCategory.decorator;
    case '–ú—É–∑—ã–∫–∞–Ω—Ç—ã':
      return SpecialistCategory.musician;
    case '–í–∏–∑–∞–∂–∏—Å—Ç—ã':
      return SpecialistCategory.makeup;
    default:
      return SpecialistCategory.host;
  }
}

/// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
int _getSpecialistCountForCategory(SpecialistCategory category) {
  switch (category) {
    case SpecialistCategory.host:
      return 15;
    case SpecialistCategory.dj:
      return 12;
    case SpecialistCategory.photographer:
      return 20;
    case SpecialistCategory.animator:
      return 10;
    case SpecialistCategory.videographer:
      return 8;
    case SpecialistCategory.decorator:
      return 6;
    case SpecialistCategory.musician:
      return 14;
    case SpecialistCategory.makeup:
      return 9;
  }
}

/// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
PriceRange _getPriceRangeForCategory(SpecialistCategory category, int index) {
  switch (category) {
    case SpecialistCategory.host:
      final minPrice = 10000 + (index % 10) * 5000;
      return PriceRange(
        minPrice: minPrice.toDouble(),
        maxPrice: (minPrice + 20000).toDouble(),
      );
    case SpecialistCategory.dj:
      final minPrice = 8000 + (index % 8) * 3000;
      return PriceRange(
        min: minPrice.toDouble(),
        max: (minPrice + 15000).toDouble(),
      );
    case SpecialistCategory.photographer:
      final minPrice = 15000 + (index % 12) * 4000;
      return PriceRange(
        min: minPrice.toDouble(),
        max: (minPrice + 25000).toDouble(),
      );
    case SpecialistCategory.animator:
      final minPrice = 5000 + (index % 6) * 2000;
      return PriceRange(
        minPrice: minPrice.toDouble(),
        maxPrice: (minPrice + 10000).toDouble(),
      );
    case SpecialistCategory.videographer:
      final minPrice = 20000 + (index % 8) * 5000;
      return PriceRange(
        minPrice: minPrice.toDouble(),
        maxPrice: (minPrice + 30000).toDouble(),
      );
    case SpecialistCategory.decorator:
      final minPrice = 12000 + (index % 5) * 4000;
      return PriceRange(
        minPrice: minPrice.toDouble(),
        maxPrice: (minPrice + 18000).toDouble(),
      );
    case SpecialistCategory.musician:
      final minPrice = 6000 + (index % 7) * 2000;
      return PriceRange(
        minPrice: minPrice.toDouble(),
        maxPrice: (minPrice + 12000).toDouble(),
      );
    case SpecialistCategory.makeup:
      final minPrice = 3000 + (index % 6) * 1500;
      return PriceRange(
        minPrice: minPrice.toDouble(),
        maxPrice: (minPrice + 8000).toDouble(),
      );
  }
}

/// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
List<String> _getSubcategoriesForCategory(SpecialistCategory category) {
  switch (category) {
    case SpecialistCategory.host:
      return ['–°–≤–∞–¥—å–±—ã', '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤—ã', '–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è'];
    case SpecialistCategory.dj:
      return ['–°–≤–∞–¥—å–±—ã', '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤—ã', '–ö–ª—É–±—ã'];
    case SpecialistCategory.photographer:
      return ['–°–≤–∞–¥—å–±—ã', '–ü–æ—Ä—Ç—Ä–µ—Ç—ã', '–°–æ–±—ã—Ç–∏—è'];
    case SpecialistCategory.animator:
      return ['–î–µ—Ç—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏', '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤—ã', '–°–≤–∞–¥—å–±—ã'];
    case SpecialistCategory.videographer:
      return ['–°–≤–∞–¥—å–±—ã', '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤—ã', '–†–µ–∫–ª–∞–º–∞'];
    case SpecialistCategory.decorator:
      return ['–°–≤–∞–¥—å–±—ã', '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤—ã', '–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è'];
    case SpecialistCategory.musician:
      return ['–°–≤–∞–¥—å–±—ã', '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤—ã', '–ö–æ–Ω—Ü–µ—Ä—Ç—ã'];
    case SpecialistCategory.makeup:
      return ['–°–≤–∞–¥—å–±—ã', '–°–æ–±—ã—Ç–∏—è', '–§–æ—Ç–æ—Å–µ—Å—Å–∏–∏'];
  }
}

/// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
String _getDescriptionForCategory(SpecialistCategory category, int index) {
  final experience = 3 + (index % 10);

  switch (category) {
    case SpecialistCategory.host:
      return '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤–µ–¥—É—â–∏–π —Å $experience-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ —Å–≤–∞–¥–µ–±–Ω—ã—Ö —Ü–µ—Ä–µ–º–æ–Ω–∏—è—Ö –∏ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö. –°–æ–∑–¥–∞—é –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞.';
    case SpecialistCategory.dj:
      return '–û–ø—ã—Ç–Ω—ã–π –¥–∏–¥–∂–µ–π —Å $experience-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º. –†–∞–±–æ—Ç–∞—é –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∂–∞–Ω—Ä–∞—Ö –º—É–∑—ã–∫–∏. –û–±–µ—Å–ø–µ—á–∏–≤–∞—é –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–≤—É–∫–æ–≤–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.';
    case SpecialistCategory.photographer:
      return '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ —Å $experience-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ —Å–≤–∞–¥–µ–±–Ω–æ–π –∏ –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –°–æ–∑–¥–∞—é –∫—Ä–∞—Å–∏–≤—ã–µ –∏ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–µ—Å—è –∫–∞–¥—Ä—ã.';
    case SpecialistCategory.animator:
      return '–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∞–Ω–∏–º–∞—Ç–æ—Ä —Å $experience-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã —Å –¥–µ—Ç—å–º–∏. –ü—Ä–æ–≤–æ–∂—É –≤–µ—Å–µ–ª—ã–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –¥–µ—Ç—Å–∫–∏—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤.';
    case SpecialistCategory.videographer:
      return '–û–ø—ã—Ç–Ω—ã–π –≤–∏–¥–µ–æ–≥—Ä–∞—Ñ —Å $experience-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º. –°–æ–∑–¥–∞—é –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫–∏ –¥–ª—è —Å–≤–∞–¥–µ–±, –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–æ–≤ –∏ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.';
    case SpecialistCategory.decorator:
      return '–¢–∞–ª–∞–Ω—Ç–ª–∏–≤—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä —Å $experience-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. –°–æ–∑–¥–∞—é —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–µ–∫–æ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –ü—Ä–µ–≤—Ä–∞—â–∞—é –≤–∞—à–∏ –∏–¥–µ–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å.';
    case SpecialistCategory.musician:
      return '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –º—É–∑—ã–∫–∞–Ω—Ç —Å $experience-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π. –ò–≥—Ä–∞—é –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö –∏ —Å–æ–∑–¥–∞—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –¥–ª—è –≤–∞—à–µ–≥–æ —Å–æ–±—ã—Ç–∏—è.';
    case SpecialistCategory.makeup:
      return '–û–ø—ã—Ç–Ω—ã–π –≤–∏–∑–∞–∂–∏—Å—Ç —Å $experience-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ —Å–≤–∞–¥–µ–±–Ω–æ–º –∏ –≤–µ—á–µ—Ä–Ω–µ–º –º–∞–∫–∏—è–∂–µ. –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞—é –≤–∞—à—É –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∫—Ä–∞—Å–æ—Ç—É.';
  }
}

/// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
String _getSpecializationForCategory(SpecialistCategory category) {
  switch (category) {
    case SpecialistCategory.host:
      return '–í–µ–¥—É—â–∏–π –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π';
    case SpecialistCategory.photographer:
      return '–§–æ—Ç–æ–≥—Ä–∞—Ñ';
    case SpecialistCategory.dj:
      return '–î–∏—Å–∫-–∂–æ–∫–µ–π';
    case SpecialistCategory.musician:
      return '–ú—É–∑—ã–∫–∞–Ω—Ç';
    case SpecialistCategory.decorator:
      return '–î–µ–∫–æ—Ä–∞—Ç–æ—Ä';
    case SpecialistCategory.florist:
      return '–§–ª–æ—Ä–∏—Å—Ç';
    case SpecialistCategory.animator:
      return '–ê–Ω–∏–º–∞—Ç–æ—Ä';
    case SpecialistCategory.makeup:
      return '–í–∏–∑–∞–∂–∏—Å—Ç';
    default:
      return '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç';
  }
}

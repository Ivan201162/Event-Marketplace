import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

import '../models/feed_post.dart';

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –ª–µ–Ω—Ç—ã –Ω–æ–≤–æ—Å—Ç–µ–π —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
final feedProvider = StreamProvider<List<FeedPost>>((ref) async* {
  // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ Firestore
  try {
    await for (final snapshot in FirebaseFirestore.instance
        .collection('feed')
        .orderBy('createdAt', descending: true)
        .snapshots()) {
      final posts = snapshot.docs.map(FeedPost.fromFirestore).toList();

      // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ
      if (posts.isEmpty) {
        yield _getTestFeedPosts();
      } else {
        yield posts;
      }
    }
  } catch (e) {
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    yield _getTestFeedPosts();
  }
});

/// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–µ–Ω—Ç—ã
List<FeedPost> _getTestFeedPosts() => [
      FeedPost(
        id: 'test_1',
        authorId: 'author_1',
        authorName: '–ê–Ω–Ω–∞ –§–æ—Ç–æ–≥—Ä–∞—Ñ',
        authorAvatar: 'https://picsum.photos/200/200?random=1',
        description: '–ö—Ä–∞—Å–∏–≤–∞—è —Å–≤–∞–¥—å–±–∞ –≤ —Å—Ç–∏–ª–µ –±–æ—Ö–æ üå∏‚ú®',
        imageUrl: 'https://picsum.photos/400/600?random=1',
        location: '–ú–æ—Å–∫–≤–∞',
        likeCount: 24,
        commentCount: 8,
        isLiked: false,
        isSaved: false,
        isFollowing: false,
        createdAt: DateTime.now().subtract(const Duration(hours: 2)),
      ),
      FeedPost(
        id: 'test_2',
        authorId: 'author_2',
        authorName: '–ú–∞–∫—Å–∏–º –í–µ–¥—É—â–∏–π',
        authorAvatar: 'https://picsum.photos/200/200?random=2',
        description: '–û—Ç–ª–∏—á–Ω–∞—è –≤–µ—á–µ—Ä–∏–Ω–∫–∞ –≤ —á–µ—Å—Ç—å –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è! üéâ',
        imageUrl: 'https://picsum.photos/400/600?random=2',
        location: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
        likeCount: 18,
        commentCount: 5,
        isLiked: true,
        isSaved: false,
        isFollowing: true,
        createdAt: DateTime.now().subtract(const Duration(hours: 5)),
      ),
      FeedPost(
        id: 'test_3',
        authorId: 'author_3',
        authorName: '–ï–ª–µ–Ω–∞ –î–µ–∫–æ—Ä',
        authorAvatar: 'https://picsum.photos/200/200?random=3',
        description: '–°–æ–∑–¥–∞–µ–º –≤–æ–ª—à–µ–±–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ ‚ú®',
        imageUrl: 'https://picsum.photos/400/600?random=3',
        location: '–ö–∞–∑–∞–Ω—å',
        likeCount: 31,
        commentCount: 12,
        isLiked: false,
        isSaved: true,
        isFollowing: false,
        createdAt: DateTime.now().subtract(const Duration(days: 1)),
      ),
      FeedPost(
        id: 'test_4',
        authorId: 'author_4',
        authorName: '–î–º–∏—Ç—Ä–∏–π –î–∏–¥–∂–µ–π',
        authorAvatar: 'https://picsum.photos/200/200?random=4',
        description: '–ú—É–∑—ã–∫–∞ - —ç—Ç–æ –¥—É—à–∞ –ª—é–±–æ–≥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞! üéµ',
        imageUrl: 'https://picsum.photos/400/600?random=4',
        location: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥',
        likeCount: 15,
        commentCount: 3,
        isLiked: false,
        isSaved: false,
        isFollowing: false,
        createdAt: DateTime.now().subtract(const Duration(days: 2)),
      ),
      FeedPost(
        id: 'test_5',
        authorId: 'author_5',
        authorName: '–û–ª—å–≥–∞ –ö–µ–π—Ç–µ—Ä–∏–Ω–≥',
        authorAvatar: 'https://picsum.photos/200/200?random=5',
        description: '–í–∫—É—Å–Ω—ã–µ —É–≥–æ—â–µ–Ω–∏—è –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–æ—Ä–∂–µ—Å—Ç–≤–∞ üç∞',
        imageUrl: 'https://picsum.photos/400/600?random=5',
        location: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫',
        likeCount: 42,
        commentCount: 18,
        isLiked: true,
        isSaved: true,
        isFollowing: true,
        createdAt: DateTime.now().subtract(const Duration(days: 3)),
      ),
    ];

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–µ–Ω—Ç–æ–π
class FeedNotifier extends StateNotifier<AsyncValue<List<FeedPost>>> {
  FeedNotifier() : super(const AsyncValue.loading()) {
    _loadFeed();
  }

  void _loadFeed() {
    FirebaseFirestore.instance
        .collection('feed')
        .orderBy('createdAt', descending: true)
        .snapshots()
        .listen((snapshot) {
      final posts = snapshot.docs.map(FeedPost.fromFirestore).toList();
      state = AsyncValue.data(posts);
    });
  }

  /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç
  Future<void> createPost({
    required String authorId,
    required String authorName,
    String? authorAvatar,
    required String description,
    String? imageUrl,
    String? location,
  }) async {
    try {
      await FirebaseFirestore.instance.collection('feed').add({
        'authorId': authorId,
        'authorName': authorName,
        'authorAvatar': authorAvatar,
        'description': description,
        'imageUrl': imageUrl,
        'location': location,
        'likeCount': 0,
        'commentCount': 0,
        'isLiked': false,
        'isSaved': false,
        'isFollowing': false,
        'createdAt': FieldValue.serverTimestamp(),
      });
    } on Exception catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞: $e');
    }
  }

  /// –ü–æ—Å—Ç–∞–≤–∏—Ç—å/—É–±—Ä–∞—Ç—å –ª–∞–π–∫
  Future<void> toggleLike(String postId, bool isLiked) async {
    try {
      final postRef = FirebaseFirestore.instance.collection('feed').doc(postId);
      await FirebaseFirestore.instance.runTransaction((transaction) async {
        final postDoc = await transaction.get(postRef);
        if (postDoc.exists) {
          final currentLikes = postDoc.data()?['likeCount'] ?? 0;
          final newLikes = isLiked ? currentLikes - 1 : currentLikes + 1;
          transaction.update(postRef, {
            'likeCount': newLikes,
            'isLiked': !isLiked,
          });
        }
      });
    } on Exception catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ª–∞–π–∫–∞: $e');
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å/—É–±—Ä–∞—Ç—å –∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö
  Future<void> toggleSave(String postId, bool isSaved) async {
    try {
      await FirebaseFirestore.instance
          .collection('feed')
          .doc(postId)
          .update({'isSaved': !isSaved});
    } on Exception catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: $e');
    }
  }

  /// –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è/–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è
  Future<void> toggleFollow(String postId, bool isFollowing) async {
    try {
      await FirebaseFirestore.instance
          .collection('feed')
          .doc(postId)
          .update({'isFollowing': !isFollowing});
    } on Exception catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: $e');
    }
  }

  /// –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
  Future<void> addComment(String postId, String comment) async {
    try {
      final postRef = FirebaseFirestore.instance.collection('feed').doc(postId);
      await FirebaseFirestore.instance.runTransaction((transaction) async {
        final postDoc = await transaction.get(postRef);
        if (postDoc.exists) {
          final currentComments = postDoc.data()?['commentCount'] ?? 0;
          transaction.update(postRef, {
            'commentCount': currentComments + 1,
          });
        }
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –ø–æ–¥–∫–æ–ª–ª–µ–∫—Ü–∏—é
      await FirebaseFirestore.instance
          .collection('feed')
          .doc(postId)
          .collection('comments')
          .add({
        'text': comment,
        'createdAt': FieldValue.serverTimestamp(),
      });
    } on Exception catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: $e');
    }
  }
}

final feedNotifierProvider =
    StateNotifierProvider<FeedNotifier, AsyncValue<List<FeedPost>>>(
        (ref) => FeedNotifier());

import 'package:flutter_riverpod/flutter_riverpod.dart';

import '../models/recommendation.dart';
import '../services/recommendation_service.dart';

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è RecommendationService
final recommendationServiceProvider =
    Provider<RecommendationService>((ref) => RecommendationService());

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
final userRecommendationsProvider =
    FutureProvider.family<List<Recommendation>, String>(
  (ref, userId) => ref
      .watch(recommendationServiceProvider)
      .getRecommendationsForUser(userId),
);

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
final popularSpecialistsProvider =
    FutureProvider.family<List<Recommendation>, String?>(
  (ref, userId) => ref
      .watch(recommendationServiceProvider)
      .getPopularSpecialists(userId: userId),
);

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏
final historyBasedRecommendationsProvider =
    FutureProvider.family<List<Recommendation>, String>(
  (ref, userId) => ref
      .watch(recommendationServiceProvider)
      .getRecommendationsBasedOnHistory(userId),
);

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
final recommendationStatsProvider =
    FutureProvider.family<RecommendationStats, String>(
  (ref, userId) =>
      ref.watch(recommendationServiceProvider).getRecommendationStats(userId),
);

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
final groupedRecommendationsProvider =
    FutureProvider.family<List<RecommendationGroup>, String>(
        (ref, userId) async {
  final service = ref.watch(recommendationServiceProvider);

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  final userRecommendations = await service.getRecommendationsForUser(userId);
  final popularRecommendations =
      await service.getPopularSpecialists(userId: userId);
  final historyRecommendations =
      await service.getRecommendationsBasedOnHistory(userId);

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
  final groups = <RecommendationGroup>[];

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏
  if (historyRecommendations.isNotEmpty) {
    groups.add(
      RecommendationGroup(
        type: RecommendationType.basedOnHistory,
        title: '–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤',
        recommendations: historyRecommendations.take(6).toList(),
        description: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã, –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ —Ç–µ—Ö, –∫–æ–≥–æ –≤—ã —É–∂–µ –∑–∞–∫–∞–∑—ã–≤–∞–ª–∏',
        icon: 'üìã',
      ),
    );
  }

  // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã
  if (popularRecommendations.isNotEmpty) {
    groups.add(
      RecommendationGroup(
        type: RecommendationType.popular,
        title: '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã',
        recommendations: popularRecommendations.take(6).toList(),
        description: '–°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
        icon: '‚≠ê',
      ),
    );
  }

  // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  if (userRecommendations.isNotEmpty) {
    final otherRecommendations = userRecommendations
        .where(
          (r) =>
              r.type != RecommendationType.basedOnHistory &&
              r.type != RecommendationType.popular,
        )
        .take(6)
        .toList();

    if (otherRecommendations.isNotEmpty) {
      groups.add(
        RecommendationGroup(
          type: RecommendationType.categoryBased,
          title: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –¥–ª—è –≤–∞—Å',
          recommendations: otherRecommendations,
          description: '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
          icon: 'üéØ',
        ),
      );
    }
  }

  return groups;
});

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
final categoryRecommendationsProvider =
    FutureProvider.family<List<Recommendation>, Map<String, dynamic>>(
        (ref, params) {
  final userId = params['userId'] as String;
  final categoryPreferences = params['categoryPreferences'] as Map<String, int>;

  return ref
      .watch(recommendationServiceProvider)
      .getRecommendationsByCategories(userId, categoryPreferences);
});

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
final recommendationStateProvider =
    StateNotifierProvider<RecommendationStateNotifier, RecommendationState>(
  (ref) =>
      RecommendationStateNotifier(ref.watch(recommendationServiceProvider)),
);

/// –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
class RecommendationState {
  const RecommendationState({
    this.isLoading = false,
    this.error,
    this.lastUpdated,
  });

  final bool isLoading;
  final String? error;
  final DateTime? lastUpdated;

  RecommendationState copyWith({
    bool? isLoading,
    String? error,
    DateTime? lastUpdated,
  }) =>
      RecommendationState(
        isLoading: isLoading ?? this.isLoading,
        error: error ?? this.error,
        lastUpdated: lastUpdated ?? this.lastUpdated,
      );
}

/// StateNotifier –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
class RecommendationStateNotifier extends StateNotifier<RecommendationState> {
  RecommendationStateNotifier(this._service)
      : super(const RecommendationState());

  final RecommendationService _service;

  /// –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  Future<void> refreshRecommendations(String userId) async {
    state = state.copyWith(isLoading: true);

    try {
      await _service.getRecommendationsForUser(userId);
      state = state.copyWith(
        isLoading: false,
        lastUpdated: DateTime.now(),
      );
    } on Exception catch (e) {
      state = state.copyWith(
        isLoading: false,
        error: e.toString(),
      );
    }
  }

  /// –û—Ç–º–µ—Ç–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—É—é
  Future<void> markAsViewed(String recommendationId) async {
    try {
      await _service.markAsViewed(recommendationId);
    } on Exception catch (e) {
      state = state.copyWith(error: e.toString());
    }
  }

  /// –û—Ç–º–µ—Ç–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –∫–∞–∫ –∫–ª–∏–∫–Ω—É—Ç—É—é
  Future<void> markAsClicked(String recommendationId) async {
    try {
      await _service.markAsClicked(recommendationId);
    } on Exception catch (e) {
      state = state.copyWith(error: e.toString());
    }
  }

  /// –û—Ç–º–µ—Ç–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –∫–∞–∫ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é
  Future<void> markAsBooked(String recommendationId) async {
    try {
      await _service.markAsBooked(recommendationId);
    } on Exception catch (e) {
      state = state.copyWith(error: e.toString());
    }
  }

  /// –û—á–∏—Å—Ç–∏—Ç—å –æ—à–∏–±–∫—É
  void clearError() {
    state = state.copyWith();
  }
}

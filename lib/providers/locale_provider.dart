import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:shared_preferences/shared_preferences.dart';

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class LocaleNotifier extends StateNotifier<Locale> {
  LocaleNotifier() : super(const Locale('ru')) {
    _loadLocale();
  }

  /// –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –ª–æ–∫–∞–ª—å
  Future<void> _loadLocale() async {
    final prefs = await SharedPreferences.getInstance();
    final localeCode = prefs.getString('locale') ?? 'ru';
    state = Locale(localeCode);
  }

  /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –ª–æ–∫–∞–ª—å
  Future<void> _saveLocale(Locale locale) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('locale', locale.languageCode);
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä—É—Å—Å–∫—É—é –ª–æ–∫–∞–ª—å
  Future<void> setRussian() async {
    state = const Locale('ru');
    await _saveLocale(state);
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫—É—é –ª–æ–∫–∞–ª—å
  Future<void> setEnglish() async {
    state = const Locale('en');
    await _saveLocale(state);
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–∑–∞—Ö—Å–∫—É—é –ª–æ–∫–∞–ª—å
  Future<void> setKazakh() async {
    state = const Locale('kk');
    await _saveLocale(state);
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å
  Future<void> setLocale(Locale locale) async {
    state = locale;
    await _saveLocale(locale);
  }

  /// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ª–æ–∫–∞–ª—å
  Future<void> toggleLocale() async {
    switch (state.languageCode) {
      case 'ru':
        await setEnglish();
        break;
      case 'en':
        await setKazakh();
        break;
      case 'kk':
        await setRussian();
        break;
      default:
        await setRussian();
        break;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ª–æ–∫–∞–ª–µ–π
  List<Locale> get supportedLocales => const [
        Locale('ru'),
        Locale('en'),
        Locale('kk'),
      ];

  /// –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª–∏
  String getLocaleName(Locale locale) {
    switch (locale.languageCode) {
      case 'ru':
        return '–†—É—Å—Å–∫–∏–π';
      case 'en':
        return 'English';
      case 'kk':
        return '“ö–∞–∑–∞“õ—à–∞';
      default:
        return '–†—É—Å—Å–∫–∏–π';
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ñ–ª–∞–≥ –ª–æ–∫–∞–ª–∏
  String getLocaleFlag(Locale locale) {
    switch (locale.languageCode) {
      case 'ru':
        return 'üá∑üá∫';
      case 'en':
        return 'üá∫üá∏';
      case 'kk':
        return 'üá∞üáø';
      default:
        return 'üá∑üá∫';
    }
  }
}

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π
final localeProvider =
    StateNotifierProvider<LocaleNotifier, Locale>((ref) => LocaleNotifier());

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞–ª–∏
final currentLocaleProvider =
    Provider<Locale>((ref) => ref.watch(localeProvider));

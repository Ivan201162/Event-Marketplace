import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/foundation.dart';

/// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Firestore
class FirestoreConnectionTest {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  static bool _isConnected = false;
  static int _retryCount = 0;
  static const int _maxRetries = 3;

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Firestore
  static Future<bool> testConnection() async {
    try {
      debugPrint('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Firestore...');

      // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      final snapshot = await _firestore
          .collection('ping_test')
          .limit(1)
          .get()
          .timeout(const Duration(seconds: 10));

      _isConnected = true;
      _retryCount = 0;
      debugPrint('‚úÖ Firestore connection OK: ${snapshot.size} docs');
      return true;
    } catch (e) {
      _isConnected = false;
      _retryCount++;
      debugPrint('‚ùå Firestore connection failed: $e');

      if (_retryCount < _maxRetries) {
        debugPrint(
          'üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã... ($_retryCount/$_maxRetries)',
        );
        await Future.delayed(const Duration(seconds: 3));
        return testConnection();
      } else {
        debugPrint('‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ');
        return false;
      }
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
  static Future<void> ensureConnection() async {
    if (!_isConnected) {
      await testConnection();
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  static bool get isConnected => _isConnected;

  /// –°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  static void reset() {
    _isConnected = false;
    _retryCount = 0;
  }

  /// –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –≤ Firestore
  static Future<bool> testWrite() async {
    try {
      debugPrint('üîç –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –≤ Firestore...');

      await _firestore
          .collection('ping_test')
          .doc('test_${DateTime.now().millisecondsSinceEpoch}')
          .set({
        'timestamp': FieldValue.serverTimestamp(),
        'test': true,
      });

      debugPrint('‚úÖ Firestore write test OK');
      return true;
    } catch (e) {
      debugPrint('‚ùå Firestore write test failed: $e');
      return false;
    }
  }

  /// –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è –∏–∑ Firestore
  static Future<bool> testRead() async {
    try {
      debugPrint('üîç –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è –∏–∑ Firestore...');

      final snapshot = await _firestore.collection('ping_test').limit(5).get();

      debugPrint('‚úÖ Firestore read test OK: ${snapshot.docs.length} docs');
      return true;
    } catch (e) {
      debugPrint('‚ùå Firestore read test failed: $e');
      return false;
    }
  }

  /// –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç Firestore (—á—Ç–µ–Ω–∏–µ + –∑–∞–ø–∏—Å—å)
  static Future<bool> fullTest() async {
    debugPrint('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ Firestore...');

    final readTest = await testRead();
    final writeTest = await testWrite();

    final success = readTest && writeTest;

    if (success) {
      debugPrint('‚úÖ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç Firestore –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } else {
      debugPrint('‚ùå –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç Firestore –ø—Ä–æ–≤–∞–ª–µ–Ω');
    }

    return success;
  }
}




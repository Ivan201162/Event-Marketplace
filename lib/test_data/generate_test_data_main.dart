import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/material.dart';

import '../firebase_options.dart';
import 'chat_data_generator.dart';
import 'test_data_generator.dart';

/// –í–∏–¥–∂–µ—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ UI
class TestDataGeneratorApp extends StatelessWidget {
  const TestDataGeneratorApp({super.key});

  @override
  Widget build(BuildContext context) => MaterialApp(
        title: 'Event Marketplace - Test Data Generator',
        theme: ThemeData(
          primarySwatch: Colors.blue,
          useMaterial3: true,
        ),
        home: const TestDataGeneratorScreen(),
      );
}

class TestDataGeneratorScreen extends StatefulWidget {
  const TestDataGeneratorScreen({super.key});

  @override
  State<TestDataGeneratorScreen> createState() => _TestDataGeneratorScreenState();
}

class _TestDataGeneratorScreenState extends State<TestDataGeneratorScreen> {
  bool _isGenerating = false;
  final List<String> _logs = [];
  final ScrollController _scrollController = ScrollController();

  @override
  void dispose() {
    _scrollController.dispose();
    super.dispose();
  }

  void _addLog(String message) {
    setState(() {
      _logs.add('[${DateTime.now().toString().substring(11, 19)}] $message');
    });

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (_scrollController.hasClients) {
        _scrollController.animateTo(
          _scrollController.position.maxScrollExtent,
          duration: const Duration(milliseconds: 300),
          curve: Curves.easeOut,
        );
      }
    });
  }

  Future<void> _generateTestData() async {
    if (_isGenerating) return;

    setState(() {
      _isGenerating = true;
      _logs.clear();
    });

    try {
      _addLog('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase...');
      await Firebase.initializeApp(
        options: DefaultFirebaseOptions.currentPlatform,
      );
      _addLog('‚úÖ Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

      final generator = TestDataGenerator();
      final chatGenerator = ChatDataGenerator();

      _addLog('üìä –≠–¢–ê–ü 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');

      _addLog('üë• –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤...');
      final specialists = await generator.generateSpecialists();
      _addLog('‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${specialists.length} —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤');

      _addLog('üë§ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑—á–∏–∫–æ–≤...');
      final customers = await generator.generateCustomers();
      _addLog('‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${customers.length} –∑–∞–∫–∞–∑—á–∏–∫–æ–≤');

      _addLog('üìÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π...');
      final bookings = await generator.generateBookings(customers, specialists);
      _addLog('‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${bookings.length} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π');

      _addLog('‚≠ê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤...');
      final reviews = await generator.generateReviews(bookings, customers, specialists);
      _addLog('‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${reviews.length} –æ—Ç–∑—ã–≤–æ–≤');

      _addLog('üí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π...');
      final ideas = await generator.generateEventIdeas();
      _addLog('‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${ideas.length} –∏–¥–µ–π');

      _addLog('üì§ –≠–¢–ê–ü 2: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Firestore');

      _addLog('üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤...');
      await generator.uploadSpecialists(specialists);
      _addLog('‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã');

      _addLog('üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤...');
      await generator.uploadCustomers(customers);
      _addLog('‚úÖ –ó–∞–∫–∞–∑—á–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');

      _addLog('üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π...');
      await generator.uploadBookings(bookings);
      _addLog('‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã');

      _addLog('üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∑—ã–≤–æ–≤...');
      await generator.uploadReviews(reviews);
      _addLog('‚úÖ –û—Ç–∑—ã–≤—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã');

      _addLog('üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–¥–µ–π...');
      await generator.uploadIdeas(ideas);
      _addLog('‚úÖ –ò–¥–µ–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');

      _addLog('üí¨ –≠–¢–ê–ü 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–∞—Ç–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');

      _addLog('üí¨ –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–æ–≤...');
      await chatGenerator.generateChats(customers, specialists, bookings);
      _addLog('‚úÖ –ß–∞—Ç—ã —Å–æ–∑–¥–∞–Ω—ã');

      _addLog('üîî –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
      await chatGenerator.generateNotifications(
        customers,
        specialists,
        bookings,
      );
      _addLog('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã');

      _addLog('üîç –≠–¢–ê–ü 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö');
      await generator.verifyTestData();

      _addLog('üéâ –ì–ï–ù–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!');
      _addLog('üìã –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏');
    } catch (e, stackTrace) {
      _addLog('‚ùå –û–®–ò–ë–ö–ê: $e');
      _addLog('üìç Stack trace: ${stackTrace.toString()}');

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –æ—à–∏–±–∫–æ–π
      if (mounted) {
        showDialog<void>(
          context: context,
          builder: (context) => AlertDialog(
            title: const Text('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏'),
            content: Text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: $e'),
            actions: [
              TextButton(
                onPressed: () => Navigator.of(context).pop(),
                child: const Text('OK'),
              ),
            ],
          ),
        );
      }
    } finally {
      setState(() {
        _isGenerating = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) => Scaffold(
        appBar: AppBar(
          title: const Text('Event Marketplace - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö'),
          backgroundColor: Colors.blue[600],
          foregroundColor: Colors.white,
        ),
        body: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
              Card(
                color: Colors.blue[50],
                child: Padding(
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          Icon(Icons.info_outline, color: Colors.blue[700]),
                          const SizedBox(width: 8),
                          Text(
                            '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
                            style: Theme.of(context).textTheme.titleLarge?.copyWith(
                                  color: Colors.blue[700],
                                  fontWeight: FontWeight.bold,
                                ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 12),
                      const Text(
                        '–≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞—Å—Ç –ø–æ–ª–Ω—É—é –±–∞–∑—É —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Event Marketplace:',
                        style: TextStyle(fontSize: 16),
                      ),
                      const SizedBox(height: 8),
                      const Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text('‚Ä¢ ‚â•2000 —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏'),
                          Text('‚Ä¢ ‚â•500 –∑–∞–∫–∞–∑—á–∏–∫–æ–≤'),
                          Text('‚Ä¢ ‚â•5000 –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π'),
                          Text('‚Ä¢ ‚â•3000 –æ—Ç–∑—ã–≤–æ–≤'),
                          Text('‚Ä¢ ‚â•1000 –∏–¥–µ–π –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π'),
                          Text('‚Ä¢ ‚â•1000 —á–∞—Ç–æ–≤ —Å –ø–µ—Ä–µ–ø–∏—Å–∫–∞–º–∏'),
                        ],
                      ),
                      const SizedBox(height: 12),
                      Container(
                        padding: const EdgeInsets.all(8),
                        decoration: BoxDecoration(
                          color: Colors.orange[100],
                          borderRadius: BorderRadius.circular(8),
                          border: Border.all(color: Colors.orange[300]!),
                        ),
                        child: Row(
                          children: [
                            Icon(
                              Icons.warning_amber,
                              color: Colors.orange[700],
                            ),
                            const SizedBox(width: 8),
                            const Expanded(
                              child: Text(
                                '–ü—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 10-30 –º–∏–Ω—É—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ —Å—Ç–∞–±–∏–ª—å–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.',
                                style: TextStyle(fontSize: 14),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                ),
              ),

              const SizedBox(height: 20),

              // –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
              SizedBox(
                width: double.infinity,
                height: 50,
                child: ElevatedButton.icon(
                  onPressed: _isGenerating ? null : _generateTestData,
                  icon: _isGenerating
                      ? const SizedBox(
                          width: 20,
                          height: 20,
                          child: CircularProgressIndicator(strokeWidth: 2),
                        )
                      : const Icon(Icons.play_arrow),
                  label: Text(
                    _isGenerating ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö',
                    style: const TextStyle(fontSize: 16),
                  ),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: _isGenerating ? Colors.grey : Colors.blue[600],
                    foregroundColor: Colors.white,
                  ),
                ),
              ),

              const SizedBox(height: 20),

              // –û–±–ª–∞—Å—Ç—å –ª–æ–≥–æ–≤
              Expanded(
                child: Card(
                  child: Padding(
                    padding: const EdgeInsets.all(16),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Row(
                          children: [
                            const Icon(Icons.terminal),
                            const SizedBox(width: 8),
                            Text(
                              '–õ–æ–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
                              style: Theme.of(context).textTheme.titleMedium,
                            ),
                            const Spacer(),
                            if (_logs.isNotEmpty)
                              TextButton.icon(
                                onPressed: () {
                                  setState(_logs.clear);
                                },
                                icon: const Icon(Icons.clear, size: 16),
                                label: const Text('–û—á–∏—Å—Ç–∏—Ç—å'),
                              ),
                          ],
                        ),
                        const Divider(),
                        Expanded(
                          child: _logs.isEmpty
                              ? const Center(
                                  child: Text(
                                    '–ù–∞–∂–º–∏—Ç–µ "–ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö" –¥–ª—è –Ω–∞—á–∞–ª–∞',
                                    style: TextStyle(
                                      color: Colors.grey,
                                      fontSize: 16,
                                    ),
                                  ),
                                )
                              : ListView.builder(
                                  controller: _scrollController,
                                  itemCount: _logs.length,
                                  itemBuilder: (context, index) {
                                    final log = _logs[index];
                                    return Padding(
                                      padding: const EdgeInsets.symmetric(
                                        vertical: 2,
                                      ),
                                      child: Text(
                                        log,
                                        style: TextStyle(
                                          fontFamily: 'monospace',
                                          fontSize: 14,
                                          color: log.contains('‚ùå')
                                              ? Colors.red
                                              : log.contains('‚úÖ')
                                                  ? Colors.green
                                                  : log.contains('üéâ')
                                                      ? Colors.purple
                                                      : Colors.black87,
                                        ),
                                      ),
                                    );
                                  },
                                ),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      );
}

/// –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ UI
void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  runApp(const TestDataGeneratorApp());
}

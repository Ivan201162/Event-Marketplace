import 'dart:math';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';

import '../models/booking.dart';
import '../models/event_idea.dart';
import '../models/review.dart';
import '../models/specialist.dart';
import '../models/user.dart';

/// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Event Marketplace
class TestDataGenerator {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final Random _random = Random();

  // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  int _generatedSpecialists = 0;
  int _generatedCustomers = 0;
  int _generatedBookings = 0;
  int _generatedReviews = 0;
  int _generatedIdeas = 0;
  final int _generatedChats = 0;

  /// –†—É—Å—Å–∫–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
  static const List<String> russianCities = [
    '–ú–æ—Å–∫–≤–∞',
    '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
    '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫',
    '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥',
    '–ö–∞–∑–∞–Ω—å',
    '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥',
    '–ß–µ–ª—è–±–∏–Ω—Å–∫',
    '–û–º—Å–∫',
    '–°–∞–º–∞—Ä–∞',
    '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É',
    '–£—Ñ–∞',
    '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫',
    '–í–æ—Ä–æ–Ω–µ–∂',
    '–ü–µ—Ä–º—å',
    '–í–æ–ª–≥–æ–≥—Ä–∞–¥',
    '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä',
    '–°–∞—Ä–∞—Ç–æ–≤',
    '–¢—é–º–µ–Ω—å',
    '–¢–æ–ª—å—è—Ç—Ç–∏',
    '–ò–∂–µ–≤—Å–∫',
    '–ë–∞—Ä–Ω–∞—É–ª',
    '–£–ª—å—è–Ω–æ–≤—Å–∫',
    '–ò—Ä–∫—É—Ç—Å–∫',
    '–•–∞–±–∞—Ä–æ–≤—Å–∫',
    '–Ø—Ä–æ—Å–ª–∞–≤–ª—å',
    '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫',
    '–ú–∞—Ö–∞—á–∫–∞–ª–∞',
    '–¢–æ–º—Å–∫',
    '–û—Ä–µ–Ω–±—É—Ä–≥',
    '–ö–µ–º–µ—Ä–æ–≤–æ',
    '–ù–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫',
    '–†—è–∑–∞–Ω—å',
    '–ù–∞–±–µ—Ä–µ–∂–Ω—ã–µ –ß–µ–ª–Ω—ã',
    '–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å',
    '–ü–µ–Ω–∑–∞',
    '–õ–∏–ø–µ—Ü–∫',
    '–ö–∏—Ä–æ–≤',
    '–ß–µ–±–æ–∫—Å–∞—Ä—ã',
    '–¢—É–ª–∞',
    '–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥',
    '–ë—Ä—è–Ω—Å–∫',
    '–ö—É—Ä—Å–∫',
    '–ò–≤–∞–Ω–æ–≤–æ',
    '–ú–∞–≥–Ω–∏—Ç–æ–≥–æ—Ä—Å–∫',
    '–¢–≤–µ—Ä—å',
    '–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å',
    '–ë–µ–ª–≥–æ—Ä–æ–¥',
    '–°–æ—á–∏',
    '–ù–∏–∂–Ω–∏–π –¢–∞–≥–∏–ª',
    '–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫',
    '–í–ª–∞–¥–∏–º–∏—Ä',
    '–ö–∞–ª—É–≥–∞',
    '–ß–∏—Ç–∞',
    '–°–º–æ–ª–µ–Ω—Å–∫',
    '–í–æ–ª–∂—Å–∫–∏–π',
    '–ß–µ—Ä–µ–ø–æ–≤–µ—Ü',
    '–ö—É—Ä–≥–∞–Ω',
    '–û—Ä–µ–ª',
    '–í–æ–ª–æ–≥–¥–∞',
    '–°–∞—Ä–∞–Ω—Å–∫',
    '–¢–∞–º–±–æ–≤',
    '–°—Ç–µ—Ä–ª–∏—Ç–∞–º–∞–∫',
    '–ì—Ä–æ–∑–Ω—ã–π',
    '–Ø–∫—É—Ç—Å–∫',
    '–ö–æ—Å—Ç—Ä–æ–º–∞',
    '–ö–æ–º—Å–æ–º–æ–ª—å—Å–∫-–Ω–∞-–ê–º—É—Ä–µ',
    '–ü–µ—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫',
    '–¢–∞–≥–∞–Ω—Ä–æ–≥',
    '–ù–∏–∂–Ω–µ–≤–∞—Ä—Ç–æ–≤—Å–∫',
    '–ô–æ—à–∫–∞—Ä-–û–ª–∞',
    '–ë—Ä–∞—Ç—Å–∫',
    '–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫',
    '–î–∑–µ—Ä–∂–∏–Ω—Å–∫',
    '–®–∞—Ö—Ç—ã',
    '–û—Ä—Å–∫',
    '–ê–Ω–≥–∞—Ä—Å–∫',
    '–°—ã–∫—Ç—ã–≤–∫–∞—Ä',
    '–ù–∏–∂–Ω–µ–∫–∞–º—Å–∫',
    '–°—Ç–∞—Ä—ã–π –û—Å–∫–æ–ª',
    '–ë–∏–π—Å–∫',
    '–ü—Ä–æ–∫–æ–ø—å–µ–≤—Å–∫',
    '–†—ã–±–∏–Ω—Å–∫',
    '–ë–∞–ª–∫–æ–≤–æ',
    '–°–µ–≤–µ—Ä–æ–¥–≤–∏–Ω—Å–∫',
    '–ê—Ä–º–∞–≤–∏—Ä',
    '–ü–æ–¥–æ–ª—å—Å–∫',
    '–ö–æ—Ä–æ–ª–µ–≤',
    '–Æ–∂–Ω–æ-–°–∞—Ö–∞–ª–∏–Ω—Å–∫',
    '–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫-–ö–∞–º—á–∞—Ç—Å–∫–∏–π',
    '–ú—É—Ä–º–∞–Ω—Å–∫',
    '–•–∏–º–∫–∏',
    '–ú—ã—Ç–∏—â–∏',
    '–õ—é–±–µ—Ä—Ü—ã',
    '–ö—Ä–∞—Å–Ω–æ–≥–æ—Ä—Å–∫',
    '–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å',
    '–ö–æ–ª–æ–º–Ω–∞',
    '–û–¥–∏–Ω—Ü–æ–≤–æ',
    '–î–æ–º–æ–¥–µ–¥–æ–≤–æ',
    '–°–µ—Ä–ø—É—Ö–æ–≤',
    '–©–µ–ª–∫–æ–≤–æ',
    '–û—Ä–µ—Ö–æ–≤–æ-–ó—É–µ–≤–æ',
    '–ù–æ–≤–æ–º–æ—Å–∫–æ–≤—Å–∫',
    '–ó–ª–∞—Ç–æ—É—Å—Ç',
    '–ö–∞–º—ã—à–∏–Ω',
    '–°–æ–ª–∏–∫–∞–º—Å–∫',
    '–í–µ–ª–∏–∫–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥',
    '–ü—Å–∫–æ–≤',
    '–ë–ª–∞–≥–æ–≤–µ—â–µ–Ω—Å–∫',
    '–≠–Ω–≥–µ–ª—å—Å',
    '–ú–∏—á—É—Ä–∏–Ω—Å–∫',
    '–ü–µ—Ä–≤–æ—É—Ä–∞–ª—å—Å–∫',
    '–†—É–±—Ü–æ–≤—Å–∫',
    '–ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π',
    '–õ—ã—Ç–∫–∞—Ä–∏–Ω–æ',
    '–ñ—É–∫–æ–≤—Å–∫–∏–π',
    '–ö–æ–≤—Ä–æ–≤',
    '–ï–ª–µ—Ü',
    '–ê—á–∏–Ω—Å–∫',
    '–ï–≤–ø–∞—Ç–æ—Ä–∏—è',
    '–ö–∏—Å–ª–æ–≤–æ–¥—Å–∫',
    '–ü—è—Ç–∏–≥–æ—Ä—Å–∫',
    '–ú–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –í–æ–¥—ã',
    '–ï—Å—Å–µ–Ω—Ç—É–∫–∏',
    '–ñ–µ–ª–µ–∑–Ω–æ–≤–æ–¥—Å–∫',
  ];

  /// –ú—É–∂—Å–∫–∏–µ –∏–º–µ–Ω–∞
  static const List<String> maleNames = [
    '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä',
    '–î–º–∏—Ç—Ä–∏–π',
    '–ú–∞–∫—Å–∏–º',
    '–°–µ—Ä–≥–µ–π',
    '–ê–Ω–¥—Ä–µ–π',
    '–ê–ª–µ–∫—Å–µ–π',
    '–ê—Ä—Ç–µ–º',
    '–ò–ª—å—è',
    '–ö–∏—Ä–∏–ª–ª',
    '–ú–∏—Ö–∞–∏–ª',
    '–ù–∏–∫–∏—Ç–∞',
    '–ú–∞—Ç–≤–µ–π',
    '–†–æ–º–∞–Ω',
    '–ï–≥–æ—Ä',
    '–ê—Ä—Å–µ–Ω–∏–π',
    '–ò–≤–∞–Ω',
    '–î–µ–Ω–∏—Å',
    '–ï–≤–≥–µ–Ω–∏–π',
    '–î–∞–Ω–∏–ª',
    '–¢–∏–º—É—Ä',
    '–í–ª–∞–¥–∏—Å–ª–∞–≤',
    '–ò–≥–æ—Ä—å',
    '–í–ª–∞–¥–∏–º–∏—Ä',
    '–ü–∞–≤–µ–ª',
    '–†—É—Å–ª–∞–Ω',
    '–ú–∞—Ä–∫',
    '–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω',
    '–¢–∏–º–æ—Ñ–µ–π',
    '–ù–∏–∫–æ–ª–∞–π',
    '–°—Ç–µ–ø–∞–Ω',
    '–§–µ–¥–æ—Ä',
    '–ì–µ–æ—Ä–≥–∏–π',
    '–õ–µ–≤',
    '–í–∏–∫—Ç–æ—Ä',
    '–ê–Ω—Ç–æ–Ω',
    '–ì–ª–µ–±',
    '–°–µ–º–µ–Ω',
    '–Ø—Ä–æ—Å–ª–∞–≤',
    '–ó–∞—Ö–∞—Ä',
    '–ë–æ–≥–¥–∞–Ω',
    '–°–∞–≤–µ–ª–∏–π',
    '–î–∞–≤–∏–¥',
  ];

  /// –ñ–µ–Ω—Å–∫–∏–µ –∏–º–µ–Ω–∞
  static const List<String> femaleNames = [
    '–ê–Ω–Ω–∞',
    '–ú–∞—Ä–∏—è',
    '–ï–ª–µ–Ω–∞',
    '–î–∞—Ä—å—è',
    '–ê–ª–∏–Ω–∞',
    '–ò—Ä–∏–Ω–∞',
    '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞',
    '–ê—Ä–∏–Ω–∞',
    '–ü–æ–ª–∏–Ω–∞',
    '–û–ª—å–≥–∞',
    '–Æ–ª–∏—è',
    '–¢–∞—Ç—å—è–Ω–∞',
    '–ù–∞—Ç–∞–ª—å—è',
    '–í–∏–∫—Ç–æ—Ä–∏—è',
    '–ï–ª–∏–∑–∞–≤–µ—Ç–∞',
    '–ê–Ω–∞—Å—Ç–∞—Å–∏—è',
    '–í–∞–ª–µ—Ä–∏—è',
    '–í–∞—Ä–≤–∞—Ä–∞',
    '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞',
    '–í–µ—Ä–æ–Ω–∏–∫–∞',
    '–°–æ—Ñ–∏—è',
    '–ö—Ä–∏—Å—Ç–∏–Ω–∞',
    '–ê–ª–∏—Å–∞',
    '–ö—Å–µ–Ω–∏—è',
    '–ú–∏–ª–∞–Ω–∞',
    '–î–∏–∞–Ω–∞',
    '–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞',
    '–ö–∞—Ä–∏–Ω–∞',
    '–°—Ç–µ—Ñ–∞–Ω–∏—è',
    '–≠–º–∏–ª–∏—è',
    '–ö–∏—Ä–∞',
    '–ö–∞–º–∏–ª–∞',
    '–ï–≤–∞',
    '–ê–º–µ–ª–∏—è',
    '–£–ª—å—è–Ω–∞',
    '–õ–∏–ª–∏—è',
    '–ó–ª–∞—Ç–∞',
    '–ú–∏—Ä–æ—Å–ª–∞–≤–∞',
    '–ê–≥–∞—Ç–∞',
    '–í–∞—Å–∏–ª–∏—Å–∞',
    '–ù–∏–Ω–∞',
    '–°–≤–µ—Ç–ª–∞–Ω–∞',
    '–õ—é–¥–º–∏–ª–∞',
    '–õ—é–±–æ–≤—å',
    '–ì–∞–ª–∏–Ω–∞',
    '–¢–∞–º–∞—Ä–∞',
  ];

  /// –§–∞–º–∏–ª–∏–∏
  static const List<String> lastNames = [
    '–ò–≤–∞–Ω–æ–≤',
    '–ü–µ—Ç—Ä–æ–≤',
    '–°–∏–¥–æ—Ä–æ–≤',
    '–°–º–∏—Ä–Ω–æ–≤',
    '–ö—É–∑–Ω–µ—Ü–æ–≤',
    '–ü–æ–ø–æ–≤',
    '–õ–µ–±–µ–¥–µ–≤',
    '–ö–æ–∑–ª–æ–≤',
    '–ù–æ–≤–∏–∫–æ–≤',
    '–ú–æ—Ä–æ–∑–æ–≤',
    '–°–æ–∫–æ–ª–æ–≤',
    '–í–æ–ª–∫–æ–≤',
    '–§–µ–¥–æ—Ä–æ–≤',
    '–ú–∏—Ö–∞–π–ª–æ–≤',
    '–ù–∏–∫–æ–ª–∞–µ–≤',
    '–ó–∞—Ö–∞—Ä–æ–≤',
    '–°—Ç–µ–ø–∞–Ω–æ–≤',
    '–°–µ—Ä–≥–µ–µ–≤',
    '–í–ª–∞–¥–∏–º–∏—Ä–æ–≤',
    '–§—Ä–æ–ª–æ–≤',
    '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤',
    '–î–º–∏—Ç—Ä–∏–µ–≤',
    '–ö–æ—Ä–æ–ª–µ–≤',
    '–ì—É—Å–µ–≤',
    '–ö–∏—Å–µ–ª–µ–≤',
    '–ò–ª—å–∏–Ω',
    '–ú–∞–∫—Å–∏–º–æ–≤',
    '–ü–æ–ª—è–∫–æ–≤',
    '–°–æ—Ä–æ–∫–∏–Ω',
    '–í–∏–Ω–æ–≥—Ä–∞–¥–æ–≤',
    '–ö–æ–≤–∞–ª–µ–≤',
    '–ë–µ–ª–æ–≤',
    '–ú–µ–¥–≤–µ–¥–µ–≤',
    '–ê–Ω—Ç–æ–Ω–æ–≤',
    '–¢–∞—Ä–∞—Å–æ–≤',
    '–ñ—É–∫–æ–≤',
    '–ë–∞—Ä–∞–Ω–æ–≤',
    '–§–∏–ª–∏–ø–ø–æ–≤',
    '–ö–æ–º–∞—Ä–æ–≤',
    '–î–∞–≤—ã–¥–æ–≤',
    '–ë–µ–ª—è–µ–≤',
    '–ì–µ—Ä–∞—Å–∏–º–æ–≤',
    '–ë–æ–≥–¥–∞–Ω–æ–≤',
    '–û—Å–∏–ø–æ–≤',
    '–°–∏–¥–æ—Ä–æ–≤',
    '–ú–∞—Ç–≤–µ–µ–≤',
    '–¢–∏—Ç–æ–≤',
    '–ú–∞—Ä–∫–æ–≤',
    '–ú–∏—Ä–æ–Ω–æ–≤',
    '–ö—Ä—ã–ª–æ–≤',
  ];

  /// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–º–µ–Ω–∏
  String _generateRandomName({bool isMale = true}) {
    final firstName = isMale
        ? maleNames[_random.nextInt(maleNames.length)]
        : femaleNames[_random.nextInt(femaleNames.length)];
    final lastName = lastNames[_random.nextInt(lastNames.length)];

    // –î–ª—è –∂–µ–Ω—â–∏–Ω –¥–æ–±–∞–≤–ª—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ -–∞ –∫ —Ñ–∞–º–∏–ª–∏–∏
    final adjustedLastName = isMale ? lastName : '$lastName–∞';

    return '$firstName $adjustedLastName';
  }

  /// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
  String _generateRandomCity() => russianCities[_random.nextInt(russianCities.length)];

  /// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL —Ñ–æ—Ç–æ-–∑–∞–≥–ª—É—à–∫–∏
  String _generatePhotoUrl() {
    final id = _random.nextInt(1000) + 1;
    return 'https://picsum.photos/400/400?random=$id';
  }

  /// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
  Future<List<Specialist>> generateSpecialists({int count = 2000}) async {
    print('üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è $count —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤...');

    final specialists = <Specialist>[];
    const categories = SpecialistCategory.values;

    for (var i = 0; i < count; i++) {
      final category = categories[_random.nextInt(categories.length)];
      final isMale = _random.nextBool();
      final name = _generateRandomName(isMale: isMale);
      final city = _generateRandomCity();
      final experience = _random.nextInt(15) + 1;
      final rating = 4.0 + _random.nextDouble();
      final reviewCount = _random.nextInt(50) + 1;

      final specialist = Specialist(
        id: 'specialist_$i',
        userId: 'user_specialist_$i',
        name: name,
        description: _generateSpecialistDescription(category),
        category: category,
        categories: [category],
        subcategories: _generateSubcategories(category),
        experienceLevel: _getExperienceLevel(experience),
        yearsOfExperience: experience,
        hourlyRate: _generateHourlyRate(category, experience),
        location: city,
        serviceAreas: [city],
        equipment: _generateEquipment(category),
        services: _generateServices(category),
        portfolioImages: _generatePortfolioImages(),
        workingHours: _generateWorkingHours(),
        isAvailable: _random.nextBool(),
        isVerified: _random.nextDouble() > 0.3,
        rating: rating,
        reviewCount: reviewCount,
        createdAt: _generateRandomDate(),
        updatedAt: DateTime.now(),
        profileImageUrl: _generatePhotoUrl(),
        phone: _generatePhoneNumber(),
        email: _generateEmail(name),
      );

      specialists.add(specialist);
      _generatedSpecialists++;

      if (i % 100 == 0) {
        print('‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤: ${i + 1}/$count');
      }
    }

    print('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: $count');
    return specialists;
  }

  /// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑—á–∏–∫–æ–≤
  Future<List<AppUser>> generateCustomers({int count = 500}) async {
    print('üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è $count –∑–∞–∫–∞–∑—á–∏–∫–æ–≤...');

    final customers = <AppUser>[];

    for (var i = 0; i < count; i++) {
      final isMale = _random.nextBool();
      final name = _generateRandomName(isMale: isMale);

      final customer = AppUser(
        id: 'customer_$i',
        email: _generateEmail(name),
        displayName: name,
        photoURL: _generatePhotoUrl(),
        role: UserRole.customer,
        createdAt: _generateRandomDate(),
        lastLoginAt: _generateRecentDate(),
        maritalStatus: _generateMaritalStatus(),
      );

      customers.add(customer);
      _generatedCustomers++;

      if (i % 50 == 0) {
        print('‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤: ${i + 1}/$count');
      }
    }

    print('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: $count');
    return customers;
  }

  /// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
  Future<List<Booking>> generateBookings(
    List<AppUser> customers,
    List<Specialist> specialists, {
    int maxBookingsPerPair = 3,
  }) async {
    print('üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π...');

    final bookings = <Booking>[];
    var bookingId = 0;

    for (final customer in customers) {
      // –ö–∞–∂–¥—ã–π –∑–∞–∫–∞–∑—á–∏–∫ –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏
      final specialistCount = _random.nextInt(5) + 1;
      final selectedSpecialists = specialists..shuffle();

      for (var i = 0; i < specialistCount && i < selectedSpecialists.length; i++) {
        final specialist = selectedSpecialists[i];
        final bookingCount = _random.nextInt(maxBookingsPerPair) + 1;

        for (var j = 0; j < bookingCount; j++) {
          final eventDate = _generateFutureDate();
          final totalPrice = _generateBookingPrice(specialist.hourlyRate);

          final booking = Booking(
            id: 'booking_${bookingId++}',
            eventId: 'event_$bookingId',
            eventTitle: _generateEventTitle(),
            userId: customer.id,
            userName: customer.displayName ?? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            userEmail: customer.email,
            status: _generateBookingStatus(),
            bookingDate: DateTime.now(),
            eventDate: eventDate,
            participantsCount: _random.nextInt(50) + 10,
            totalPrice: totalPrice,
            notes: _generateBookingNotes(),
            createdAt: _generateRandomDate(),
            updatedAt: DateTime.now(),
            customerId: customer.id,
            specialistId: specialist.id,
            specialistName: specialist.name,
            prepayment: totalPrice * 0.3, // 30% –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞
            eventLocation: _generateRandomCity(),
            duration: Duration(hours: _random.nextInt(8) + 2), // 2-10 —á–∞—Å–æ–≤
          );

          bookings.add(booking);
          _generatedBookings++;
        }
      }

      if (_generatedBookings % 100 == 0) {
        print('‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: $_generatedBookings');
      }
    }

    print('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${bookings.length}');
    return bookings;
  }

  /// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤
  Future<List<Review>> generateReviews(
    List<Booking> bookings,
    List<AppUser> customers,
    List<Specialist> specialists,
  ) async {
    print('üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤...');

    final reviews = <Review>[];

    for (final booking in bookings) {
      // –ù–µ –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ—é—Ç –æ—Ç–∑—ã–≤—ã
      if (_random.nextDouble() > 0.7) continue;

      final customer = customers.firstWhere((c) => c.id == booking.customerId);
      final specialist = specialists.firstWhere((s) => s.id == booking.specialistId);

      final rating = _generateReviewRating();

      final review = Review(
        id: 'review_${reviews.length}',
        bookingId: booking.id,
        reviewerId: customer.id,
        reviewerName: customer.displayName ?? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        reviewerAvatar: customer.photoURL,
        targetId: specialist.id,
        type: ReviewType.specialist,
        rating: rating,
        title: _generateReviewTitle(rating),
        content: _generateReviewContent(rating, specialist.category),
        tags: _generateReviewTags(rating),
        status: ReviewStatus.approved,
        createdAt: _generateRandomDate(),
        isVerified: _random.nextDouble() > 0.5,
        helpfulCount: _random.nextInt(20),
        specialistId: specialist.id,
      );

      reviews.add(review);
      _generatedReviews++;

      if (_generatedReviews % 100 == 0) {
        print('‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: $_generatedReviews');
      }
    }

    print('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${reviews.length}');
    return reviews;
  }

  /// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
  Future<List<EventIdea>> generateEventIdeas({int count = 1000}) async {
    print('üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è $count –∏–¥–µ–π –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π...');

    final ideas = <EventIdea>[];
    final categories = EventIdeaCategories.categories;
    final eventTypes = EventIdeaCategories.eventTypes;
    final budgets = EventIdeaCategories.budgets;
    final seasons = EventIdeaCategories.seasons;
    final venues = EventIdeaCategories.venues;

    for (var i = 0; i < count; i++) {
      final category = categories[_random.nextInt(categories.length)];
      final eventType = eventTypes[_random.nextInt(eventTypes.length)];

      final idea = EventIdea(
        id: 'idea_$i',
        title: _generateIdeaTitle(category),
        description: _generateIdeaDescription(category),
        category: category,
        imageUrls: _generateIdeaImages(),
        videoUrls: [],
        authorId: 'admin',
        authorName: 'Event Marketplace',
        tags: _generateIdeaTags(category),
        likesCount: _random.nextInt(1000),
        savesCount: _random.nextInt(500),
        eventType: eventType,
        budget: budgets[_random.nextInt(budgets.length)],
        season: seasons[_random.nextInt(seasons.length)],
        venue: venues[_random.nextInt(venues.length)],
      );

      ideas.add(idea);
      _generatedIdeas++;

      if (i % 100 == 0) {
        print('‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–¥–µ–π: ${i + 1}/$count');
      }
    }

    print('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞: $count');
    return ideas;
  }

  /// –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤ Firestore
  Future<void> populateFirestore() async {
    print('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ Firestore...');

    try {
      // 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
      final specialists = await generateSpecialists();
      final customers = await generateCustomers();
      final bookings = await generateBookings(customers, specialists);
      final reviews = await generateReviews(bookings, customers, specialists);
      final ideas = await generateEventIdeas();

      // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Firestore –±–∞—Ç—á–∞–º–∏
      await uploadSpecialists(specialists);
      await uploadCustomers(customers);
      await uploadBookings(bookings);
      await uploadReviews(reviews);
      await uploadIdeas(ideas);

      print('‚úÖ –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: $e');
      rethrow;
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  Future<void> verifyTestData() async {
    print('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–∞–∂–¥–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      final specialistsCount = await _getCollectionCount('specialists');
      final customersCount = await _getCollectionCount('users');
      final bookingsCount = await _getCollectionCount('bookings');
      final reviewsCount = await _getCollectionCount('reviews');
      final ideasCount = await _getCollectionCount('event_ideas');

      print('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–ì–†–£–ñ–ï–ù–ù–´–• –î–ê–ù–ù–´–•:');
      print('üë• –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã: $specialistsCount');
      print('üë§ –ó–∞–∫–∞–∑—á–∏–∫–∏: $customersCount');
      print('üìÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: $bookingsCount');
      print('‚≠ê –û—Ç–∑—ã–≤—ã: $reviewsCount');
      print('üí° –ò–¥–µ–∏: $ideasCount');

      // –í—ã–≤–æ–¥–∏–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
      await _printSampleData();
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö: $e');
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö

  String _generateSpecialistDescription(SpecialistCategory category) {
    switch (category) {
      case SpecialistCategory.photographer:
        return '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ —Å –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ —Å–≤–∞–¥–µ–±–Ω–æ–π, –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–π –∏ —Å–æ–±—ã—Ç–∏–π–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.';
      case SpecialistCategory.videographer:
        return '–°–æ–∑–¥–∞—é –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥.';
      case SpecialistCategory.dj:
        return '–û–ø—ã—Ç–Ω—ã–π –¥–∏–¥–∂–µ–π —Å –±–æ–ª—å—à–æ–π –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π. –°–æ–∑–¥–∞–º –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –Ω–∞ –≤–∞—à–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏.';
      case SpecialistCategory.host:
        return '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤–µ–¥—É—â–∏–π –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –•–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã–π, –æ–ø—ã—Ç–Ω—ã–π, —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ª—é–±–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π.';
      case SpecialistCategory.florist:
        return '–°–æ–∑–¥–∞—é —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–ª–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ª—é–±—ã—Ö —Ç–æ—Ä–∂–µ—Å—Ç–≤. –°–≤–µ–∂–∏–µ —Ü–≤–µ—Ç—ã, –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.';
      default:
        return '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤ —Å—Ñ–µ—Ä–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å –±–æ–ª—å—à–∏–º –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã.';
    }
  }

  List<String> _generateSubcategories(SpecialistCategory category) {
    switch (category) {
      case SpecialistCategory.photographer:
        return ['–°–≤–∞–¥–µ–±–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è', '–ü–æ—Ä—Ç—Ä–µ—Ç–Ω–∞—è —Å—ä–µ–º–∫–∞', '–°–æ–±—ã—Ç–∏–π–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è'];
      case SpecialistCategory.videographer:
        return ['–°–≤–∞–¥–µ–±–Ω–æ–µ –≤–∏–¥–µ–æ', '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ä–æ–ª–∏–∫–∏', '–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∫–ª–∏–ø—ã'];
      case SpecialistCategory.dj:
        return ['–°–≤–∞–¥–µ–±–Ω—ã–π –¥–∏–¥–∂–µ–π', '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', '–ö–ª—É–±–Ω–∞—è –º—É–∑—ã–∫–∞'];
      case SpecialistCategory.host:
        return ['–°–≤–∞–¥–µ–±–Ω—ã–π –≤–µ–¥—É—â–∏–π', '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', '–î–µ—Ç—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏'];
      case SpecialistCategory.florist:
        return ['–°–≤–∞–¥–µ–±–Ω–∞—è —Ñ–ª–æ—Ä–∏—Å—Ç–∏–∫–∞', '–ë—É–∫–µ—Ç—ã', '–î–µ–∫–æ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π'];
      default:
        return ['–û—Å–Ω–æ–≤–Ω—ã–µ —É—Å–ª—É–≥–∏', '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏'];
    }
  }

  ExperienceLevel _getExperienceLevel(int years) {
    if (years >= 10) return ExperienceLevel.expert;
    if (years >= 5) return ExperienceLevel.advanced;
    if (years >= 2) return ExperienceLevel.intermediate;
    return ExperienceLevel.beginner;
  }

  double _generateHourlyRate(SpecialistCategory category, int experience) {
    final baseRate = _getCategoryBaseRate(category);
    final experienceMultiplier = 1.0 + (experience * 0.1);
    final variation = 0.8 + (_random.nextDouble() * 0.4); // ¬±20% –≤–∞—Ä–∏–∞—Ü–∏—è
    return (baseRate * experienceMultiplier * variation).roundToDouble();
  }

  double _getCategoryBaseRate(SpecialistCategory category) {
    switch (category) {
      case SpecialistCategory.photographer:
      case SpecialistCategory.videographer:
        return 5000;
      case SpecialistCategory.dj:
      case SpecialistCategory.host:
        return 3000;
      case SpecialistCategory.florist:
      case SpecialistCategory.decorator:
        return 2500;
      case SpecialistCategory.musician:
        return 4000;
      case SpecialistCategory.caterer:
        return 1500;
      default:
        return 2000;
    }
  }

  List<String> _generateEquipment(SpecialistCategory category) {
    switch (category) {
      case SpecialistCategory.photographer:
        return ['–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç', '–®—Ç–∞—Ç–∏–≤', '–û—Å–≤–µ—â–µ–Ω–∏–µ', '–û–±—ä–µ–∫—Ç–∏–≤—ã'];
      case SpecialistCategory.videographer:
        return ['–í–∏–¥–µ–æ–∫–∞–º–µ—Ä–∞ 4K', '–°—Ç–∞–±–∏–ª–∏–∑–∞—Ç–æ—Ä', '–ú–∏–∫—Ä–æ—Ñ–æ–Ω—ã', '–û—Å–≤–µ—â–µ–Ω–∏–µ'];
      case SpecialistCategory.dj:
        return ['DJ-–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä', '–ö–æ–ª–æ–Ω–∫–∏', '–ú–∏–∫—à–µ—Ä', '–ú–∏–∫—Ä–æ—Ñ–æ–Ω—ã'];
      case SpecialistCategory.host:
        return ['–ú–∏–∫—Ä–æ—Ñ–æ–Ω', '–ö–æ—Å—Ç—é–º—ã', '–†–µ–∫–≤–∏–∑–∏—Ç'];
      default:
        return ['–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ'];
    }
  }

  List<String> _generateServices(SpecialistCategory category) {
    switch (category) {
      case SpecialistCategory.photographer:
        return ['–°–≤–∞–¥–µ–±–Ω–∞—è —Å—ä–µ–º–∫–∞', '–ü–æ—Ä—Ç—Ä–µ—Ç—ã', '–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ', '–ü–µ—á–∞—Ç—å'];
      case SpecialistCategory.videographer:
        return ['–°—ä–µ–º–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π', '–ú–æ–Ω—Ç–∞–∂ –≤–∏–¥–µ–æ', '–¶–≤–µ—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è'];
      case SpecialistCategory.dj:
        return ['–ú—É–∑—ã–∫–∞–ª—å–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ', '–°–≤–µ—Ç–æ–≤–æ–µ —à–æ—É', '–í–µ–¥–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã'];
      case SpecialistCategory.host:
        return ['–í–µ–¥–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π', '–ö–æ–Ω–∫—É—Ä—Å—ã', '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤—ã'];
      default:
        return ['–û—Å–Ω–æ–≤–Ω—ã–µ —É—Å–ª—É–≥–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'];
    }
  }

  List<String> _generatePortfolioImages() => List.generate(5, (index) => _generatePhotoUrl());

  Map<String, String> _generateWorkingHours() => {
    'monday': '09:00-18:00',
    'tuesday': '09:00-18:00',
    'wednesday': '09:00-18:00',
    'thursday': '09:00-18:00',
    'friday': '09:00-18:00',
    'saturday': '10:00-16:00',
    'sunday': '–≤—ã—Ö–æ–¥–Ω–æ–π',
  };

  String _generatePhoneNumber() =>
      '+7${_random.nextInt(900) + 100}${_random.nextInt(900) + 100}${_random.nextInt(10000).toString().padLeft(4, '0')}';

  String _generateEmail(String name) {
    final cleanName = name.toLowerCase().replaceAll(' ', '.');
    final domains = ['gmail.com', 'yandex.ru', 'mail.ru', 'ya.ru'];
    final domain = domains[_random.nextInt(domains.length)];
    return '$cleanName@$domain';
  }

  DateTime _generateRandomDate() {
    final now = DateTime.now();
    final daysAgo = _random.nextInt(365);
    return now.subtract(Duration(days: daysAgo));
  }

  DateTime _generateRecentDate() {
    final now = DateTime.now();
    final daysAgo = _random.nextInt(30);
    return now.subtract(Duration(days: daysAgo));
  }

  DateTime _generateFutureDate() {
    final now = DateTime.now();
    final daysAhead = _random.nextInt(180) + 30; // 30-210 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
    return now.add(Duration(days: daysAhead));
  }

  MaritalStatus _generateMaritalStatus() {
    const statuses = MaritalStatus.values;
    return statuses[_random.nextInt(statuses.length)];
  }

  BookingStatus _generateBookingStatus() {
    final statuses = [BookingStatus.pending, BookingStatus.confirmed, BookingStatus.completed];
    final weights = [0.2, 0.5, 0.3]; // –í–µ—Å–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤

    final random = _random.nextDouble();
    var cumulative = 0;

    for (var i = 0; i < statuses.length; i++) {
      cumulative += weights[i];
      if (random <= cumulative) {
        return statuses[i];
      }
    }

    return BookingStatus.confirmed;
  }

  String _generateEventTitle() {
    final titles = [
      '–°–≤–∞–¥–µ–±–Ω–æ–µ —Ç–æ—Ä–∂–µ—Å—Ç–≤–æ',
      '–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è',
      '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ',
      '–Æ–±–∏–ª–µ–π',
      '–í—ã–ø—É—Å–∫–Ω–æ–π',
      '–ù–æ–≤–æ–≥–æ–¥–Ω–∏–π –ø—Ä–∞–∑–¥–Ω–∏–∫',
      '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è',
      '–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è',
      '–°–µ–º–∏–Ω–∞—Ä',
      '–¢–∏–º–±–∏–ª–¥–∏–Ω–≥',
    ];
    return titles[_random.nextInt(titles.length)];
  }

  double _generateBookingPrice(double hourlyRate) {
    final hours = _random.nextInt(8) + 2; // 2-10 —á–∞—Å–æ–≤
    final basePrice = hourlyRate * hours;
    final variation = 0.8 + (_random.nextDouble() * 0.4); // ¬±20% –≤–∞—Ä–∏–∞—Ü–∏—è
    return (basePrice * variation).roundToDouble();
  }

  String _generateBookingNotes() {
    final notes = [
      '–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ',
      '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–æ–∑–¥—É—Ö–µ',
      '–û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –º—É–∑—ã–∫–µ',
      '–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π',
      '–í–∞–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ, –≤—Å–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ',
      '–ú–Ω–æ–≥–æ –≥–æ—Å—Ç–µ–π, —É—á–µ—Å—Ç—å –ª–æ–≥–∏—Å—Ç–∏–∫—É',
      '–¢–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ',
      '–î–µ—Ç—Å–∫–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–∞–∂–Ω–∞',
    ];

    if (_random.nextDouble() > 0.3) return '';
    return notes[_random.nextInt(notes.length)];
  }

  int _generateReviewRating() {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ö–æ—Ä–æ—à–∏–µ –æ—Ü–µ–Ω–∫–∏ (4-5)
    final random = _random.nextDouble();
    if (random < 0.6) return 5;
    if (random < 0.85) return 4;
    if (random < 0.95) return 3;
    if (random < 0.99) return 2;
    return 1;
  }

  String _generateReviewTitle(int rating) {
    if (rating >= 4) {
      final titles = [
        '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!',
        '–ü—Ä–µ–≤–∑–æ—à–µ–ª –æ–∂–∏–¥–∞–Ω–∏—è',
        '–†–µ–∫–æ–º–µ–Ω–¥—É—é –≤—Å–µ–º',
        '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª —Å–≤–æ–µ–≥–æ –¥–µ–ª–∞',
        '–û—á–µ–Ω—å –¥–æ–≤–æ–ª—å–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º',
      ];
      return titles[_random.nextInt(titles.length)];
    } else {
      final titles = [
        '–ù–µ–ø–ª–æ—Ö–æ, –Ω–æ –µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è',
        '–°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
        '–ú–æ–∂–Ω–æ –ª—É—á—à–µ',
        '–ï—Å—Ç—å –Ω–∞–¥ —á–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å',
      ];
      return titles[_random.nextInt(titles.length)];
    }
  }

  String _generateReviewContent(int rating, SpecialistCategory category) {
    if (rating >= 4) {
      switch (category) {
        case SpecialistCategory.photographer:
          return '–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ! –û—Ç–ª–∏—á–Ω—ã–µ –∫–∞–¥—Ä—ã, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥. –û—á–µ–Ω—å –¥–æ–≤–æ–ª—å–Ω—ã –∫–∞—á–µ—Å—Ç–≤–æ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.';
        case SpecialistCategory.videographer:
          return '–ü–æ—Ç—Ä—è—Å–∞—é—â–µ–µ –≤–∏–¥–µ–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å! –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Å—ä–µ–º–∫–∞ –∏ –º–æ–Ω—Ç–∞–∂. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º!';
        case SpecialistCategory.dj:
          return '–û—Ç–ª–∏—á–Ω—ã–π –¥–∏–¥–∂–µ–π! –ú—É–∑—ã–∫–∞ –±—ã–ª–∞ —Å—É–ø–µ—Ä, –≤—Å–µ –≥–æ—Å—Ç–∏ —Ç–∞–Ω—Ü–µ–≤–∞–ª–∏ –≤—Å—é –Ω–æ—á—å.';
        case SpecialistCategory.host:
          return '–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –≤–µ–¥—É—â–∏–π! –í–µ—Å–µ–ª–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞, –≤—Å–µ –≥–æ—Å—Ç–∏ –±—ã–ª–∏ –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ.';
        default:
          return '–û—á–µ–Ω—å –¥–æ–≤–æ–ª—å–Ω—ã —Ä–∞–±–æ—Ç–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞. –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∏ –æ—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.';
      }
    } else {
      return '–†–∞–±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –Ω–æ –µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è. –ú–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –ª—É—á—à–µ.';
    }
  }

  List<String> _generateReviewTags(int rating) {
    if (rating >= 4) {
      return ['–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º', '–∫–∞—á–µ—Å—Ç–≤–æ', '—Ä–µ–∫–æ–º–µ–Ω–¥—É—é'];
    } else {
      return ['–µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è', '—Å—Ä–µ–¥–Ω–µ'];
    }
  }

  String _generateIdeaTitle(String category) {
    switch (category) {
      case '–°–≤–∞–¥—å–±–∞':
        final titles = [
          '–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Å–≤–∞–¥—å–±–∞ –≤ —Å—Ç–∏–ª–µ –ø—Ä–æ–≤–∞–Ω—Å',
          '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Å–≤–∞–¥—å–±–∞ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ',
          '–í—ã–µ–∑–¥–Ω–∞—è —Ü–µ—Ä–µ–º–æ–Ω–∏—è –Ω–∞ –ø—Ä–∏—Ä–æ–¥–µ',
          '–°–≤–∞–¥—å–±–∞ –≤ —Å—Ç–∏–ª–µ –ª–æ—Ñ—Ç',
          '–ú–æ—Ä—Å–∫–∞—è —Å–≤–∞–¥—å–±–∞',
        ];
        return titles[_random.nextInt(titles.length)];
      case '–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è':
        final titles = [
          '–Ø—Ä–∫–∏–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö',
          '–î–µ—Ç—Å–∫–∏–π –ø—Ä–∞–∑–¥–Ω–∏–∫ —Å –∞–Ω–∏–º–∞—Ç–æ—Ä–∞–º–∏',
          '–°—Ç–∏–ª—å–Ω–∞—è –≤–µ—á–µ—Ä–∏–Ω–∫–∞ –≤ –∫–ª—É–±–µ',
          '–î–æ–º–∞—à–Ω–∏–π —É—é—Ç–Ω—ã–π –ø—Ä–∞–∑–¥–Ω–∏–∫',
          '–¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—á–µ—Ä–∏–Ω–∫–∞',
        ];
        return titles[_random.nextInt(titles.length)];
      case '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤':
        final titles = [
          '–ù–æ–≤–æ–≥–æ–¥–Ω–∏–π –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤',
          '–î–µ–Ω—å –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞ –ø—Ä–∏—Ä–æ–¥–µ',
          '–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–π –±–∞–Ω–∫–µ—Ç',
          '–ê–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–º–±–∏–ª–¥–∏–Ω–≥',
          '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞',
        ];
        return titles[_random.nextInt(titles.length)];
      default:
        return '–ò–¥–µ—è –¥–ª—è $category';
    }
  }

  String _generateIdeaDescription(String category) {
    switch (category) {
      case '–°–≤–∞–¥—å–±–∞':
        return '–°–æ–∑–¥–∞–π—Ç–µ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–π –¥–µ–Ω—å —Å –ø—Ä–æ–¥—É–º–∞–Ω–Ω—ã–º –¥–µ–∫–æ—Ä–æ–º, –∫—Ä–∞—Å–∏–≤–æ–π —Ñ–æ—Ç–æ–∑–æ–Ω–æ–π –∏ –æ—Å–æ–±–µ–Ω–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π. –ö–∞–∂–¥–∞—è –¥–µ—Ç–∞–ª—å –≤–∞–∂–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–≥–∏–∏ –≤–∞—à–µ–≥–æ –æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ –¥–Ω—è.';
      case '–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è':
        return '–Ø—Ä–∫–∏–π –∏ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–π—Å—è –ø—Ä–∞–∑–¥–Ω–∏–∫ –¥–ª—è –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞ –∏ –≥–æ—Å—Ç–µ–π. –í–µ—Å–µ–ª–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞, –≤–∫—É—Å–Ω—ã–µ —É–≥–æ—â–µ–Ω–∏—è –∏ –æ—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã.';
      case '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤':
        return '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–ø–ª–æ—Ç–∏—Ç –∫–æ–º–∞–Ω–¥—É –∏ —Å–æ–∑–¥–∞—Å—Ç –ø–æ–∑–∏—Ç–∏–≤–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–µ. –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∏ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞.';
      default:
        return '–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –∏–¥–µ—è –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å –ø—Ä–æ–¥—É–º–∞–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π –∏ –æ—Å–æ–±–µ–Ω–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π.';
    }
  }

  List<String> _generateIdeaImages() => List.generate(3, (index) => _generatePhotoUrl());

  List<String> _generateIdeaTags(String category) {
    switch (category) {
      case '–°–≤–∞–¥—å–±–∞':
        return ['—Å–≤–∞–¥—å–±–∞', '—Ç–æ—Ä–∂–µ—Å—Ç–≤–æ', '—Ä–æ–º–∞–Ω—Ç–∏–∫–∞', '—Ü–µ—Ä–µ–º–æ–Ω–∏—è'];
      case '–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è':
        return ['–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è', '–ø—Ä–∞–∑–¥–Ω–∏–∫', '–≤–µ—Å–µ–ª—å–µ', '–ø–æ–¥–∞—Ä–∫–∏'];
      case '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤':
        return ['–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤', '–∫–æ–º–∞–Ω–¥–∞', '—Ä–∞–±–æ—Ç–∞', '–∫–æ–ª–ª–µ–≥–∏'];
      default:
        return ['–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', '–ø—Ä–∞–∑–¥–Ω–∏–∫', '—Å–æ–±—ã—Ç–∏–µ'];
    }
  }

  // –ú–µ—Ç–æ–¥—ã –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Firestore (–ø—É–±–ª–∏—á–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ run_data_generation.dart)

  Future<void> uploadSpecialists(List<Specialist> specialists) async {
    print('üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –≤ Firestore...');
    await _uploadInBatches('specialists', specialists, (s) => s.toMap());
  }

  Future<void> uploadCustomers(List<AppUser> customers) async {
    print('üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ –≤ Firestore...');
    await _uploadInBatches('users', customers, (u) => u.toMap());
  }

  Future<void> uploadBookings(List<Booking> bookings) async {
    print('üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Firestore...');
    await _uploadInBatches('bookings', bookings, (b) => b.toMap());
  }

  Future<void> uploadReviews(List<Review> reviews) async {
    print('üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–∑—ã–≤—ã –≤ Firestore...');
    await _uploadInBatches('reviews', reviews, (r) => r.toMap());
  }

  Future<void> uploadIdeas(List<EventIdea> ideas) async {
    print('üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–¥–µ–∏ –≤ Firestore...');
    await _uploadInBatches('event_ideas', ideas, (i) => i.toMap());
  }

  Future<void> _uploadInBatches<T>(
    String collection,
    List<T> items,
    Map<String, dynamic> Function(T) toMap,
  ) async {
    const batchSize = 500;
    final totalBatches = (items.length / batchSize).ceil();

    for (var i = 0; i < totalBatches; i++) {
      final start = i * batchSize;
      final end = (i + 1) * batchSize;
      final batch = items.sublist(start, end > items.length ? items.length : end);

      final writeBatch = _firestore.batch();

      for (final item in batch) {
        final docRef = _firestore.collection(collection).doc();
        final data = toMap(item);
        data['id'] = docRef.id; // –î–æ–±–∞–≤–ª—è–µ–º ID –¥–æ–∫—É–º–µ–Ω—Ç–∞
        writeBatch.set(docRef, data);
      }

      try {
        await writeBatch.commit();
        print('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –±–∞—Ç—á ${i + 1}/$totalBatches –¥–ª—è $collection');
      } catch (e) {
        print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞—Ç—á–∞ ${i + 1}: $e');
        // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
        await Future.delayed(const Duration(seconds: 2));
        try {
          await writeBatch.commit();
          print('‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –±–∞—Ç—á–∞ ${i + 1} —É—Å–ø–µ—à–Ω–∞');
        } catch (e2) {
          print('‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –±–∞—Ç—á–∞ ${i + 1}: $e2');
        }
      }
    }
  }

  Future<int> _getCollectionCount(String collection) async {
    try {
      final snapshot = await _firestore.collection(collection).count().get();
      return snapshot.count ?? 0;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ $collection: $e');
      return 0;
    }
  }

  Future<void> _printSampleData() async {
    print('\nüìã –ü–†–ò–ú–ï–†–´ –î–ê–ù–ù–´–•:');

    try {
      // –ü—Ä–∏–º–µ—Ä —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
      final specialistSnapshot = await _firestore.collection('specialists').limit(1).get();

      if (specialistSnapshot.docs.isNotEmpty) {
        final specialist = specialistSnapshot.docs.first.data();
        print('\nüë®‚Äçüíº –ü—Ä–∏–º–µ—Ä —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:');
        print('  –ò–º—è: ${specialist['name']}');
        print('  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${specialist['category']}');
        print('  –ì–æ—Ä–æ–¥: ${specialist['location']}');
        print('  –†–µ–π—Ç–∏–Ω–≥: ${specialist['rating']}');
      }

      // –ü—Ä–∏–º–µ—Ä –∏–¥–µ–∏
      final ideaSnapshot = await _firestore.collection('event_ideas').limit(1).get();

      if (ideaSnapshot.docs.isNotEmpty) {
        final idea = ideaSnapshot.docs.first.data();
        print('\nüí° –ü—Ä–∏–º–µ—Ä –∏–¥–µ–∏:');
        print('  –ù–∞–∑–≤–∞–Ω–∏–µ: ${idea['title']}');
        print('  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${idea['category']}');
        print('  –õ–∞–π–∫–∏: ${idea['likesCount']}');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤: $e');
    }
  }
}

import 'dart:math';

import 'package:cloud_firestore/cloud_firestore.dart';

import '../models/booking.dart';
import '../models/specialist.dart';
import '../models/user.dart';

/// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —á–∞—Ç–æ–≤
class ChatDataGenerator {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final Random _random = Random();

  /// –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤ –æ–±—â–µ–Ω–∏—è
  static const List<String> greetingMessages = [
    '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤–∞—à–∞ —É—Å–ª—É–≥–∞.',
    '–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ú–æ–∂–µ—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö?',
    '–ü—Ä–∏–≤–µ—Ç! –í–∏–¥–µ–ª –≤–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ, –æ—á–µ–Ω—å –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å.',
    '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ò—â—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.',
    '–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ü–æ–¥—Ö–æ–¥–∏—Ç–µ –ª–∏ –≤—ã –¥–ª—è –Ω–∞—à–µ–≥–æ —Å–æ–±—ã—Ç–∏—è?',
  ];

  static const List<String> specialistResponses = [
    '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö–æ–Ω–µ—á–Ω–æ, —Ä–∞—Å—Å–∫–∞–∂—É. –ö–∞–∫–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ?',
    '–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ë—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å. –ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è —Å–æ–±—ã—Ç–∏–µ?',
    '–ü—Ä–∏–≤–µ—Ç! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å. –ö–∞–∫–∏–µ —É –≤–∞—Å –ø–æ–∂–µ–ª–∞–Ω–∏—è?',
    '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º –¥–µ—Ç–∞–ª–∏ –≤–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.',
    '–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –î–∞, —è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ —Ç–∞–∫–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö.',
  ];

  static const List<String> detailQuestions = [
    '–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –≥–æ—Å—Ç–µ–π?',
    '–ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç?',
    '–ì–¥–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?',
    '–ù–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –Ω—É–∂–Ω—ã —É—Å–ª—É–≥–∏?',
    '–ï—Å—Ç—å –ª–∏ –æ—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è?',
    '–ö–∞–∫–∞—è —Ç–µ–º–∞—Ç–∏–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è?',
  ];

  static const List<String> customerAnswers = [
    '–ì–æ—Å—Ç–µ–π –±—É–¥–µ—Ç –æ–∫–æ–ª–æ 50 —á–µ–ª–æ–≤–µ–∫.',
    '–ë—é–¥–∂–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ 100 000 —Ä—É–±–ª–µ–π.',
    '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞.',
    '–ù—É–∂–Ω–æ –Ω–∞ 6 —á–∞—Å–æ–≤.',
    '–•–æ—Ç–∏–º —á—Ç–æ-—Ç–æ –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º —Å—Ç–∏–ª–µ.',
    '–≠—Ç–æ —Å–≤–∞–¥–µ–±–Ω–æ–µ —Ç–æ—Ä–∂–µ—Å—Ç–≤–æ.',
  ];

  static const List<String> negotiationMessages = [
    '–≠—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å?',
    '–ú–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å–∫–∏–¥–∫—É?',
    '–ö–æ–≥–¥–∞ –º–æ–∂–µ–º –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è?',
    '–ù—É–∂–Ω–∞ –ª–∏ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞?',
    '–ö–∞–∫–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏ –≤—ã –¥–∞–µ—Ç–µ?',
  ];

  static const List<String> finalMessages = [
    '–û—Ç–ª–∏—á–Ω–æ! –î–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å.',
    '–°–ø–∞—Å–∏–±–æ, –±—É–¥—É –∂–¥–∞—Ç—å –æ—Ç –≤–∞—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.',
    '–•–æ—Ä–æ—à–æ, —Å–≤—è–∂–µ–º—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.',
    '–ü–æ–∫–∞ –¥—É–º–∞–µ–º, —Å–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.',
    '–ó–∞–±—Ä–æ–Ω–∏—Ä—É–µ–º –≤–∞—à–∏ —É—Å–ª—É–≥–∏!',
  ];

  /// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–∞—Ç–æ–≤ –º–µ–∂–¥—É –∑–∞–∫–∞–∑—á–∏–∫–∞–º–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏
  Future<void> generateChats(
    List<AppUser> customers,
    List<Specialist> specialists,
    List<Booking> bookings,
  ) async {
    print('üí¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–∞—Ç–æ–≤...');

    var chatCount = 0;

    // –°–æ–∑–¥–∞–µ–º —á–∞—Ç—ã –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    for (final booking in bookings) {
      final customer = customers.firstWhere((c) => c.id == booking.customerId);
      final specialist = specialists.firstWhere((s) => s.id == booking.specialistId);

      await _createChatConversation(customer, specialist, booking);
      chatCount++;

      if (chatCount % 50 == 0) {
        print('‚úÖ –°–æ–∑–¥–∞–Ω–æ —á–∞—Ç–æ–≤: $chatCount');
      }
    }

    // –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —á–∞—Ç—ã –±–µ–∑ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã)
    final additionalChats = _random.nextInt(200) + 100;
    for (var i = 0; i < additionalChats; i++) {
      final customer = customers[_random.nextInt(customers.length)];
      final specialist = specialists[_random.nextInt(specialists.length)];

      await _createChatConversation(customer, specialist, null);
      chatCount++;
    }

    print('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: $chatCount');
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ –±–µ—Å–µ–¥—ã –º–µ–∂–¥—É –∑–∞–∫–∞–∑—á–∏–∫–æ–º –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º
  Future<void> _createChatConversation(
    AppUser customer,
    Specialist specialist,
    Booking? booking,
  ) async {
    final chatId = 'chat_${customer.id}_${specialist.id}';
    final messageCount = _random.nextInt(10) + 5; // 5-15 —Å–æ–æ–±—â–µ–Ω–∏–π
    final messages = <Map<String, dynamic>>[];

    // –°–æ–∑–¥–∞–µ–º —á–∞—Ç –¥–æ–∫—É–º–µ–Ω—Ç
    final chatData = {
      'id': chatId,
      'participants': [customer.id, specialist.id],
      'participantNames': {
        customer.id: customer.displayName ?? '–ó–∞–∫–∞–∑—á–∏–∫',
        specialist.id: specialist.name,
      },
      'participantAvatars': {
        customer.id: customer.photoURL,
        specialist.id: specialist.profileImageUrl,
      },
      'lastMessage': '',
      'lastMessageTime': null,
      'unreadCount': {
        customer.id: 0,
        specialist.id: 0,
      },
      'createdAt': FieldValue.serverTimestamp(),
      'updatedAt': FieldValue.serverTimestamp(),
      'bookingId': booking?.id,
      'specialistCategory': specialist.category.name,
    };

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    var messageTime = _generateRandomDate();
    var isCustomerTurn = true;

    for (var i = 0; i < messageCount; i++) {
      final message = _generateMessage(i, isCustomerTurn, booking != null);

      messages.add({
        'id': 'msg_${chatId}_$i',
        'chatId': chatId,
        'senderId': isCustomerTurn ? customer.id : specialist.id,
        'senderName': isCustomerTurn ? (customer.displayName ?? '–ó–∞–∫–∞–∑—á–∏–∫') : specialist.name,
        'text': message,
        'timestamp': Timestamp.fromDate(messageTime),
        'isRead': true,
        'type': 'text',
        'attachments': <String>[],
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      messageTime = messageTime.add(
        Duration(
          minutes: _random.nextInt(60) + 5, // 5-65 –º–∏–Ω—É—Ç –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        ),
      );

      isCustomerTurn = !isCustomerTurn;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
    if (messages.isNotEmpty) {
      final lastMessage = messages.last;
      chatData['lastMessage'] = lastMessage['text'];
      chatData['lastMessageTime'] = lastMessage['timestamp'];
    }

    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Ç
      await _firestore.collection('chats').doc(chatId).set(chatData);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
      final batch = _firestore.batch();
      for (final message in messages) {
        final messageRef =
            _firestore.collection('chats').doc(chatId).collection('messages').doc(message['id']);
        batch.set(messageRef, message);
      }
      await batch.commit();
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞ $chatId: $e');
    }
  }

  /// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–æ–º–µ—Ä–∞ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  String _generateMessage(
    int messageIndex,
    bool isFromCustomer,
    bool hasBooking,
  ) {
    if (messageIndex == 0) {
      // –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞
      return greetingMessages[_random.nextInt(greetingMessages.length)];
    }

    if (messageIndex == 1) {
      // –û—Ç–≤–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
      return specialistResponses[_random.nextInt(specialistResponses.length)];
    }

    if (messageIndex < 4) {
      // –£—Ç–æ—á–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π
      if (isFromCustomer) {
        return customerAnswers[_random.nextInt(customerAnswers.length)];
      } else {
        return detailQuestions[_random.nextInt(detailQuestions.length)];
      }
    }

    if (messageIndex < 8) {
      // –ü–µ—Ä–µ–≥–æ–≤–æ—Ä—ã
      if (isFromCustomer) {
        return negotiationMessages[_random.nextInt(negotiationMessages.length)];
      } else {
        return _generateSpecialistNegotiationResponse();
      }
    }

    // –ó–∞–≤–µ—Ä—à–∞—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (hasBooking) {
      if (isFromCustomer) {
        return finalMessages[_random.nextInt(finalMessages.length)];
      } else {
        return '–û—Ç–ª–∏—á–Ω–æ! –ñ–¥—É –≤–∞—Å –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è. –í—Å—ë –±—É–¥–µ—Ç –Ω–∞ –≤—ã—Å—à–µ–º —É—Ä–æ–≤–Ω–µ!';
      }
    } else {
      if (isFromCustomer) {
        return '–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø–æ–¥—É–º–∞–µ–º.';
      } else {
        return '–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å, –µ—Å–ª–∏ –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã!';
      }
    }
  }

  String _generateSpecialistNegotiationResponse() {
    final responses = [
      '–î–∞, —ç—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –±–∞–∑–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å.',
      '–ú–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–µ–±–æ–ª—å—à—É—é —Å–∫–∏–¥–∫—É –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º.',
      '–ú–æ–∂–µ–º –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è –≤ –ª—é–±–æ–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è.',
      '–û–±—ã—á–Ω–æ –±–µ—Ä—É –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É 30%.',
      '–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É—é –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤.',
      '–ü–æ–∫–∞–∂—É –≤–∞–º –ø—Ä–∏–º–µ—Ä—ã –º–æ–∏—Ö —Ä–∞–±–æ—Ç.',
      '–û–±—Å—É–¥–∏–º –≤—Å–µ –¥–µ—Ç–∞–ª–∏ –ø—Ä–∏ –≤—Å—Ç—Ä–µ—á–µ.',
      '–ú–æ–≥—É –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.',
    ];
    return responses[_random.nextInt(responses.length)];
  }

  DateTime _generateRandomDate() {
    final now = DateTime.now();
    final daysAgo = _random.nextInt(30) + 1;
    return now.subtract(Duration(days: daysAgo));
  }

  /// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<void> generateNotifications(
    List<AppUser> customers,
    List<Specialist> specialists,
    List<Booking> bookings,
  ) async {
    print('üîî –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');

    var notificationCount = 0;

    for (final booking in bookings) {
      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞
      await _createNotification(
        userId: booking.customerId,
        title: '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ',
        body: '–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ ${booking.eventTitle} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ',
        type: 'booking_confirmed',
        relatedId: booking.id,
      );

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
      final specialist = specialists.firstWhere((s) => s.id == booking.specialistId);
      await _createNotification(
        userId: specialist.userId,
        title: '–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
        body: '–£ –≤–∞—Å –Ω–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ ${booking.eventTitle}',
        type: 'new_booking',
        relatedId: booking.id,
      );

      notificationCount += 2;

      if (notificationCount % 100 == 0) {
        print('‚úÖ –°–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: $notificationCount');
      }
    }

    print('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞: $notificationCount');
  }

  Future<void> _createNotification({
    required String userId,
    required String title,
    required String body,
    required String type,
    String? relatedId,
  }) async {
    final notificationData = {
      'userId': userId,
      'title': title,
      'body': body,
      'type': type,
      'relatedId': relatedId,
      'isRead': _random.nextBool(),
      'createdAt': FieldValue.serverTimestamp(),
    };

    try {
      await _firestore.collection('notifications').add(notificationData);
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: $e');
    }
  }
}

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import '../core/constants/app_routes.dart';
import '../providers/recommendation_providers.dart';
import 'recommendation_section.dart';

/// –°–µ–∫—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ
class RecommendationsSection extends ConsumerWidget {
  const RecommendationsSection({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final recommendationsAsync = ref.watch(
      userRecommendationsProvider(
        'current_user_id',
      ),
    ); // TODO(developer): Get actual user ID

    return recommendationsAsync.when(
      data: (recommendations) {
        if (recommendations.isEmpty) {
          return _buildEmptyState();
        }

        return RecommendationSection(
          title: '–ú—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º',
          subtitle: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—å—Å—è',
          icon: 'üéØ',
          recommendations: recommendations,
          compact: true,
          onViewAll: () {
            context.push(AppRoutes.recommendations);
          },
          onRecommendationTap: (recommendation) {
            _onRecommendationTap(context, recommendation);
          },
          onRecommendationBook: (recommendation) {
            _onRecommendationBook(context, recommendation);
          },
        );
      },
      loading: _buildLoadingState,
      error: (error, stack) => _buildErrorState(error),
    );
  }

  void _onRecommendationTap(BuildContext context, dynamic recommendation) {
    // TODO(developer): Navigate to specialist profile
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é: ${recommendation.specialist.name}'),
      ),
    );
  }

  void _onRecommendationBook(BuildContext context, dynamic recommendation) {
    // TODO(developer): Navigate to booking form
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: ${recommendation.specialist.name}'),
      ),
    );
  }

  Widget _buildLoadingState() => const Padding(
        padding: EdgeInsets.all(16),
        child: Center(
          child: CircularProgressIndicator(),
        ),
      );

  Widget _buildErrorState(Object error) => Padding(
        padding: const EdgeInsets.all(16),
        child: Center(
          child: Column(
            children: [
              const Icon(
                Icons.error_outline,
                size: 48,
                color: Colors.red,
              ),
              const SizedBox(height: 16),
              const Text(
                '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 8),
              Text(
                error.toString(),
                style: TextStyle(
                  fontSize: 14,
                  color: Colors.grey[600],
                ),
                textAlign: TextAlign.center,
              ),
            ],
          ),
        ),
      );

  Widget _buildEmptyState() => Padding(
        padding: const EdgeInsets.all(16),
        child: Center(
          child: Column(
            children: [
              const Icon(
                Icons.recommend_outlined,
                size: 48,
                color: Colors.grey,
              ),
              const SizedBox(height: 16),
              const Text(
                '–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 8),
              Text(
                '–ó–∞–∫–∞–∂–∏—Ç–µ —É—Å–ª—É–≥–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
                style: TextStyle(
                  fontSize: 14,
                  color: Colors.grey[600],
                ),
                textAlign: TextAlign.center,
              ),
            ],
          ),
        ),
      );
}

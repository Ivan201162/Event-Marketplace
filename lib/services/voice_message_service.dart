import 'dart:io';

import 'package:audioplayers/audioplayers.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:path_provider/path_provider.dart';
import 'package:permission_handler/permission_handler.dart';
// import 'dart:typed_data';
// import 'package:record/record.dart';  // Temporarily disabled

// import 'package:firebase_storage/firebase_storage.dart';
import '../models/chat_message_extended.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
// Temporarily disabled due to record package compatibility issues
class VoiceMessageService {
  factory VoiceMessageService() => _instance;
  VoiceMessageService._internal();
  static final VoiceMessageService _instance = VoiceMessageService._internal();

  // final AudioRecorder _recorder = AudioRecorder();  // Temporarily disabled
  final AudioPlayer _player = AudioPlayer();
  // final FirebaseStorage _storage = FirebaseStorage.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  bool _isRecording = false;
  bool _isPlaying = false;
  String? _currentRecordingPath;
  String? _currentPlayingMessageId;

  /// –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  Future<bool> startRecording() async {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
      if (!await _checkPermissions()) {
        return false;
      }

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –µ—Å—Ç—å
      if (_isRecording) {
        await stopRecording();
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
      final directory = await getTemporaryDirectory();
      final fileName = 'voice_${DateTime.now().millisecondsSinceEpoch}.m4a';
      _currentRecordingPath = '${directory.path}/$fileName';

      // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å
      await _recorder.start(
        const RecordConfig(
          encoder: AudioEncoder.aacLc,
          bitRate: 128000,
          sampleRate: 44100,
        ),
        path: _currentRecordingPath!,
      );

      _isRecording = true;
      return true;
    } on Exception {
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:'–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏: $e');
      return false;
    }
  }

  /// –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  Future<String?> stopRecording() async {
    try {
      if (!_isRecording) return null;

      final path = await _recorder.stop();
      _isRecording = false;
      _currentRecordingPath = null;

      return path;
    } on Exception {
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:'–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏: $e');
      return null;
    }
  }

  /// –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  Future<void> cancelRecording() async {
    try {
      if (_isRecording) {
        await _recorder.cancel();
        _isRecording = false;
      }

      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      if (_currentRecordingPath != null) {
        final file = File(_currentRecordingPath!);
        if (await file.exists()) {
          await file.delete();
        }
        _currentRecordingPath = null;
      }
    } on Exception {
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:'–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏: $e');
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Firebase Storage
  Future<String?> uploadVoiceMessage(
    String filePath,
    String chatId,
    String senderId,
  ) async {
    try {
      final file = File(filePath);
      if (!await file.exists()) return null;

      // –°–æ–∑–¥–∞—ë–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
      final fileName = 'voice_${chatId}_${senderId}_${DateTime.now().millisecondsSinceEpoch}.m4a';
      // final ref = _storage.ref().child('voice_messages/$fileName');

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
      // final uploadTask = ref.putFile(file);
      // final snapshot = await uploadTask;
      // final downloadUrl = await snapshot.ref.getDownloadURL();
      final downloadUrl = await _uploadVoiceMessage(File(_currentRecordingPath!));

      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      await file.delete();

      return downloadUrl;
    } on Exception {
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: $e');
      return null;
    }
  }

  /// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  Future<bool> playVoiceMessage(String audioUrl, String messageId) async {
    try {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
      if (_isPlaying) {
        await stopPlaying();
      }

      _currentPlayingMessageId = messageId;
      await _player.play(UrlSource(audioUrl));
      _isPlaying = true;

      // –°–ª—É—à–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
      _player.onPlayerComplete.listen((_) {
        _isPlaying = false;
        _currentPlayingMessageId = null;
      });

      return true;
    } on Exception {
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:'–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: $e');
      return false;
    }
  }

  /// –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
  Future<void> stopPlaying() async {
    try {
      await _player.stop();
      _isPlaying = false;
      _currentPlayingMessageId = null;
    } on Exception {
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:'–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: $e');
    }
  }

  /// –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
  Future<void> pausePlaying() async {
    try {
      await _player.pause();
    } on Exception {
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:'–û—à–∏–±–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: $e');
    }
  }

  /// –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
  Future<void> resumePlaying() async {
    try {
      await _player.resume();
    } on Exception {
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:'–û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: $e');
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
  Future<Duration?> getAudioDuration(String audioUrl) async {
    try {
      await _player.setSource(UrlSource(audioUrl));
      return await _player.getDuration();
    } on Exception {
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: $e');
      return null;
    }
  }

  /// –°–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Firestore
  Future<String?> createVoiceMessage({
    required String chatId,
    required String senderId,
    required String senderName,
    String? senderAvatar,
    required String audioUrl,
    required int duration,
    String? waveform,
  }) async {
    try {
      final messageRef = _firestore.collection('chat_messages').doc();

      final message = ChatMessageExtended(
        id: messageRef.id,
        chatId: chatId,
        senderId: senderId,
        senderName: senderName,
        senderAvatar: senderAvatar,
        content: 'üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        timestamp: DateTime.now(),
        type: MessageType.voice,
        audioUrl: audioUrl,
        audioDuration: duration,
        audioWaveform: waveform,
      );

      await messageRef.set(message.toMap());
      return messageRef.id;
    } on Exception {
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:'–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: $e');
      return null;
    }
  }

  /// –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å waveform –¥–ª—è –∞—É–¥–∏–æ
  Future<String?> generateWaveform(String audioPath) async {
    try {
      // TODO(developer): –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é waveform
      // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
      return '';
    } on Exception {
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ waveform: $e');
      return null;
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
  Future<bool> _checkPermissions() async {
    final microphonePermission = await Permission.microphone.request();
    final storagePermission = await Permission.storage.request();

    return microphonePermission.isGranted && storagePermission.isGranted;
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏
  bool get isRecording => _isRecording;

  /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
  bool get isPlaying => _isPlaying;

  /// –ü–æ–ª—É—á–∏—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  String? get currentPlayingMessageId => _currentPlayingMessageId;

  /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å –∑–∞–ø–∏—Å–∏
  String? get currentRecordingPath => _currentRecordingPath;

  /// –ó–∞–≥—Ä—É–∑–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Firebase Storage
  Future<String> _uploadVoiceMessage(File voiceFile) async {
    try {
      // TODO(developer): Implement actual Firebase Storage upload
      // final ref = _storage.ref().child('voice_messages').child('${DateTime.now().millisecondsSinceEpoch}.m4a');
      // final uploadTask = ref.putFile(voiceFile);
      // final snapshot = await uploadTask;
      // final downloadUrl = await snapshot.ref.getDownloadURL();
      // return downloadUrl;

      // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
      return 'https://example.com/voice_messages/${DateTime.now().millisecondsSinceEpoch}.m4a';
    } on Exception {
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: $e');
      rethrow;
    }
  }

  /// –û—Å–≤–æ–±–æ–¥–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã
  Future<void> dispose() async {
    // await _recorder.dispose(); // Temporarily disabled
    await _player.dispose();
  }
}

import 'package:cloud_firestore/cloud_firestore.dart';

import '../core/feature_flags.dart';
import '../models/user.dart';
import 'notification_service.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–æ–¥–æ–≤—â–∏–Ω–∞–º–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
class AnniversaryService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final NotificationService _notificationService = NotificationService();

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≥–æ–¥–æ–≤—â–∏–Ω–∞—Ö
  Future<void> checkAndSendAnniversaryReminders() async {
    if (!FeatureFlags.anniversaryRemindersEnabled) {
      return;
    }

    try {
      final today = DateTime.now();
      final tomorrow = today.add(const Duration(days: 1));
      final nextWeek = today.add(const Duration(days: 7));

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
      final usersSnapshot = await _firestore
          .collection('users')
          .where('anniversaryRemindersEnabled', isEqualTo: true)
          .where('maritalStatus', isEqualTo: 'married')
          .get();

      for (final doc in usersSnapshot.docs) {
        final user = AppUser.fromDocument(doc);

        if (user.weddingDate == null) continue;

        final weddingDate = user.weddingDate!;
        final currentYear = today.year;
        final weddingThisYear =
            DateTime(currentYear, weddingDate.month, weddingDate.day);
        final weddingNextYear =
            DateTime(currentYear + 1, weddingDate.month, weddingDate.day);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ–¥–æ–≤—â–∏–Ω—É —Å–µ–≥–æ–¥–Ω—è
        if (_isSameDay(today, weddingThisYear)) {
          await _sendAnniversaryNotification(user, 0); // –°–µ–≥–æ–¥–Ω—è
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ–¥–æ–≤—â–∏–Ω—É –∑–∞–≤—Ç—Ä–∞
        else if (_isSameDay(tomorrow, weddingThisYear)) {
          await _sendAnniversaryNotification(user, 1); // –ó–∞–≤—Ç—Ä–∞
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ–¥–æ–≤—â–∏–Ω—É —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é
        else if (_isSameDay(nextWeek, weddingThisYear)) {
          await _sendAnniversaryNotification(user, 7); // –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ–¥–æ–≤—â–∏–Ω—É –≤ —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É (–µ—Å–ª–∏ —É–∂–µ –ø—Ä–æ—à–ª–∞ –≤ —ç—Ç–æ–º –≥–æ–¥—É)
        else if (weddingThisYear.isBefore(today) &&
            _isSameDay(nextWeek, weddingNextYear)) {
          final years = currentYear - weddingDate.year + 1;
          await _sendAnniversaryNotification(user, 7, years: years);
        }
      }
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ–¥–æ–≤—â–∏–Ω: $e');
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ–¥–æ–≤—â–∏–Ω–µ
  Future<void> _sendAnniversaryNotification(
    AppUser user,
    int daysUntil, {
    int? years,
  }) async {
    final yearsMarried =
        years ?? (DateTime.now().year - user.weddingDate!.year);

    String title;
    String body;

    if (daysUntil == 0) {
      title = 'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –≥–æ–¥–æ–≤—â–∏–Ω–æ–π!';
      body =
          '–°–µ–≥–æ–¥–Ω—è $yearsMarried-—è –≥–æ–¥–æ–≤—â–∏–Ω–∞ –≤–∞—à–µ–π —Å–≤–∞–¥—å–±—ã! –ñ–µ–ª–∞–µ–º —Å—á–∞—Å—Ç—å—è –∏ –ª—é–±–≤–∏!';
    } else if (daysUntil == 1) {
      title = '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≥–æ–¥–æ–≤—â–∏–Ω–µ';
      body =
          '–ó–∞–≤—Ç—Ä–∞ $yearsMarried-—è –≥–æ–¥–æ–≤—â–∏–Ω–∞ –≤–∞—à–µ–π —Å–≤–∞–¥—å–±—ã. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞!';
    } else {
      title = '–ü—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –≥–æ–¥–æ–≤—â–∏–Ω–∞';
      body =
          '–ß–µ—Ä–µ–∑ $daysUntil –¥–Ω–µ–π –±—É–¥–µ—Ç $yearsMarried-—è –≥–æ–¥–æ–≤—â–∏–Ω–∞ –≤–∞—à–µ–π —Å–≤–∞–¥—å–±—ã. –í—Ä–µ–º—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏–µ!';
    }

    await _notificationService.sendNotification(
      userId: user.id,
      title: title,
      body: body,
      type: 'anniversary_reminder',
      data: {
        'weddingDate': user.weddingDate!.toIso8601String(),
        'yearsMarried': yearsMarried.toString(),
        'daysUntil': daysUntil.toString(),
        'partnerName': user.partnerName ?? '–≤–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞',
      },
    );
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–æ–≤–ø–∞–¥–∞—é—Ç –ª–∏ –¥–Ω–∏
  bool _isSameDay(DateTime date1, DateTime date2) =>
      date1.year == date2.year &&
      date1.month == date2.month &&
      date1.day == date2.day;

  /// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç –≤ –±—Ä–∞–∫–µ
  int getYearsMarried(DateTime weddingDate) {
    final now = DateTime.now();
    var years = now.year - weddingDate.year;

    // –ï—Å–ª–∏ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª –≤ —ç—Ç–æ–º –≥–æ–¥—É
    if (now.month < weddingDate.month ||
        (now.month == weddingDate.month && now.day < weddingDate.day)) {
      years--;
    }

    return years;
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –≥–æ–¥–æ–≤—â–∏–Ω—ã
  int getDaysUntilNextAnniversary(DateTime weddingDate) {
    final now = DateTime.now();
    final currentYear = now.year;
    final weddingThisYear =
        DateTime(currentYear, weddingDate.month, weddingDate.day);

    // –ï—Å–ª–∏ –≥–æ–¥–æ–≤—â–∏–Ω–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞ –≤ —ç—Ç–æ–º –≥–æ–¥—É, —Å—á–∏—Ç–∞–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≥–æ–¥–∞
    if (weddingThisYear.isBefore(now)) {
      final weddingNextYear =
          DateTime(currentYear + 1, weddingDate.month, weddingDate.day);
      return weddingNextYear.difference(now).inDays;
    } else {
      return weddingThisYear.difference(now).inDays;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–¥–æ–≤—â–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Map<String, dynamic> getAnniversaryInfo(AppUser user) {
    if (user.weddingDate == null) {
      return {
        'hasWeddingDate': false,
        'message': '–î–∞—Ç–∞ —Å–≤–∞–¥—å–±—ã –Ω–µ —É–∫–∞–∑–∞–Ω–∞',
      };
    }

    final yearsMarried = getYearsMarried(user.weddingDate!);
    final daysUntil = getDaysUntilNextAnniversary(user.weddingDate!);

    return {
      'hasWeddingDate': true,
      'yearsMarried': yearsMarried,
      'daysUntilNext': daysUntil,
      'nextAnniversary': DateTime(
        DateTime.now().year + (daysUntil > 365 ? 1 : 0),
        user.weddingDate!.month,
        user.weddingDate!.day,
      ),
      'partnerName': user.partnerName,
      'remindersEnabled': user.anniversaryRemindersEnabled,
    };
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –≥–æ–¥–æ–≤—â–∏–Ω–∞—Ö
  Future<void> updateAnniversarySettings({
    required String userId,
    required bool enabled,
    DateTime? weddingDate,
    String? partnerName,
  }) async {
    try {
      final updateData = <String, dynamic>{
        'anniversaryRemindersEnabled': enabled,
        'updatedAt': FieldValue.serverTimestamp(),
      };

      if (weddingDate != null) {
        updateData['weddingDate'] = Timestamp.fromDate(weddingDate);
      }

      if (partnerName != null) {
        updateData['partnerName'] = partnerName;
      }

      await _firestore.collection('users').doc(userId).update(updateData);
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥–æ–¥–æ–≤—â–∏–Ω: $e');
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≥–æ–¥–æ–≤—â–∏–Ω–∞–º–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
  Future<List<AppUser>> getUsersWithAnniversariesInPeriod({
    required DateTime startDate,
    required DateTime endDate,
  }) async {
    try {
      final users = <AppUser>[];
      final usersSnapshot = await _firestore
          .collection('users')
          .where('anniversaryRemindersEnabled', isEqualTo: true)
          .where('maritalStatus', isEqualTo: 'married')
          .get();

      for (final doc in usersSnapshot.docs) {
        final user = AppUser.fromDocument(doc);

        if (user.weddingDate == null) continue;

        final weddingDate = user.weddingDate!;
        final currentYear = DateTime.now().year;
        final weddingThisYear =
            DateTime(currentYear, weddingDate.month, weddingDate.day);
        final weddingNextYear =
            DateTime(currentYear + 1, weddingDate.month, weddingDate.day);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –≥–æ–¥–æ–≤—â–∏–Ω–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        if ((weddingThisYear.isAfter(startDate) &&
                weddingThisYear.isBefore(endDate)) ||
            (weddingNextYear.isAfter(startDate) &&
                weddingNextYear.isBefore(endDate))) {
          users.add(user);
        }
      }

      return users;
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≥–æ–¥–æ–≤—â–∏–Ω–∞–º–∏: $e');
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –≥–æ–¥–æ–≤—â–∏–Ω—ã –∫–ª–∏–µ–Ω—Ç–æ–≤
  Future<List<Map<String, dynamic>>> getCustomerAnniversaries(
      String customerId) async {
    try {
      final snapshot = await _firestore
          .collection('anniversaries')
          .where('customerId', isEqualTo: customerId)
          .orderBy('date', descending: true)
          .get();

      return snapshot.docs
          .map((doc) => {
                'id': doc.id,
                ...doc.data() as Map<String, dynamic>,
              })
          .toList();
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–¥–æ–≤—â–∏–Ω –∫–ª–∏–µ–Ω—Ç–∞: $e');
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –≥–æ–¥–æ–≤—â–∏–Ω—ã
  Future<List<Map<String, dynamic>>> getUpcomingAnniversaries({
    int daysAhead = 30,
  }) async {
    try {
      final now = DateTime.now();
      final futureDate = now.add(Duration(days: daysAhead));

      final snapshot = await _firestore
          .collection('anniversaries')
          .where('date', isGreaterThanOrEqualTo: Timestamp.fromDate(now))
          .where('date', isLessThanOrEqualTo: Timestamp.fromDate(futureDate))
          .orderBy('date')
          .get();

      return snapshot.docs
          .map((doc) => {
                'id': doc.id,
                ...doc.data() as Map<String, dynamic>,
              })
          .toList();
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≥–æ–¥–æ–≤—â–∏–Ω: $e');
    }
  }

  /// –î–æ–±–∞–≤–∏—Ç—å –≥–æ–¥–æ–≤—â–∏–Ω—É —Å–≤–∞–¥—å–±—ã
  Future<void> addWeddingAnniversary({
    required String customerId,
    required DateTime weddingDate,
    required String spouseName,
    String? notes,
  }) async {
    try {
      await _firestore.collection('anniversaries').add({
        'customerId': customerId,
        'type': 'wedding',
        'date': Timestamp.fromDate(weddingDate),
        'spouseName': spouseName,
        'notes': notes,
        'createdAt': FieldValue.serverTimestamp(),
        'updatedAt': FieldValue.serverTimestamp(),
      });
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–æ–¥–æ–≤—â–∏–Ω—ã —Å–≤–∞–¥—å–±—ã: $e');
    }
  }

  /// –£–¥–∞–ª–∏—Ç—å –≥–æ–¥–æ–≤—â–∏–Ω—É
  Future<void> deleteAnniversary(String anniversaryId) async {
    try {
      await _firestore.collection('anniversaries').doc(anniversaryId).delete();
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥–æ–¥–æ–≤—â–∏–Ω—ã: $e');
    }
  }
}

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/foundation.dart';
import '../models/wedding_anniversary.dart';
import '../models/user.dart';
import '../core/feature_flags.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–æ–¥–æ–≤—â–∏–Ω–∞–º–∏ —Å–≤–∞–¥—å–±—ã
class AnniversaryService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  /// –î–æ–±–∞–≤–∏—Ç—å –≥–æ–¥–æ–≤—â–∏–Ω—É —Å–≤–∞–¥—å–±—ã –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞
  Future<String> addWeddingAnniversary({
    required String customerId,
    required String customerName,
    String? customerEmail,
    required DateTime weddingDate,
  }) async {
    if (!FeatureFlags.anniversaryTrackingEnabled) {
      throw Exception('–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≥–æ–¥–æ–≤—â–∏–Ω –æ—Ç–∫–ª—é—á–µ–Ω–æ');
    }

    try {
      final yearsMarried =
          WeddingAnniversary.calculateYearsMarried(weddingDate);
      final nextAnniversary =
          WeddingAnniversary.calculateNextAnniversary(weddingDate);

      final anniversary = WeddingAnniversary(
        id: '', // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Firestore
        customerId: customerId,
        customerName: customerName,
        customerEmail: customerEmail,
        weddingDate: weddingDate,
        yearsMarried: yearsMarried,
        nextAnniversary: nextAnniversary,
        isActive: true,
        reminderDates: ['30', '7', '1'], // –ó–∞ 30, 7 –∏ 1 –¥–µ–Ω—å
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );

      final docRef = await _firestore
          .collection('wedding_anniversaries')
          .add(anniversary.toMap());

      // –°–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
      await _createReminders(docRef.id, anniversary);

      return docRef.id;
    } catch (e) {
      debugPrint('Error adding wedding anniversary: $e');
      throw Exception('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–æ–¥–æ–≤—â–∏–Ω—ã: $e');
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –≥–æ–¥–æ–≤—â–∏–Ω—ã –∑–∞–∫–∞–∑—á–∏–∫–∞
  Stream<List<WeddingAnniversary>> getCustomerAnniversaries(String customerId) {
    if (!FeatureFlags.anniversaryTrackingEnabled) {
      return Stream.value([]);
    }

    return _firestore
        .collection('wedding_anniversaries')
        .where('customerId', isEqualTo: customerId)
        .where('isActive', isEqualTo: true)
        .orderBy('weddingDate', descending: false)
        .snapshots()
        .map((snapshot) {
      return snapshot.docs.map((doc) {
        return WeddingAnniversary.fromMap({
          'id': doc.id,
          ...doc.data(),
        });
      }).toList();
    });
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –≥–æ–¥–æ–≤—â–∏–Ω—É –ø–æ ID
  Future<WeddingAnniversary?> getAnniversaryById(String anniversaryId) async {
    if (!FeatureFlags.anniversaryTrackingEnabled) {
      return null;
    }

    try {
      final doc = await _firestore
          .collection('wedding_anniversaries')
          .doc(anniversaryId)
          .get();

      if (!doc.exists) {
        return null;
      }

      return WeddingAnniversary.fromMap({
        'id': doc.id,
        ...doc.data()!,
      });
    } catch (e) {
      debugPrint('Error getting anniversary: $e');
      return null;
    }
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å –≥–æ–¥–æ–≤—â–∏–Ω—É
  Future<void> updateAnniversary(
      String anniversaryId, Map<String, dynamic> updates) async {
    if (!FeatureFlags.anniversaryTrackingEnabled) {
      throw Exception('–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≥–æ–¥–æ–≤—â–∏–Ω –æ—Ç–∫–ª—é—á–µ–Ω–æ');
    }

    try {
      await _firestore
          .collection('wedding_anniversaries')
          .doc(anniversaryId)
          .update({
        ...updates,
        'updatedAt': FieldValue.serverTimestamp(),
      });
    } catch (e) {
      debugPrint('Error updating anniversary: $e');
      throw Exception('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–æ–¥–æ–≤—â–∏–Ω—ã: $e');
    }
  }

  /// –£–¥–∞–ª–∏—Ç—å –≥–æ–¥–æ–≤—â–∏–Ω—É
  Future<void> deleteAnniversary(String anniversaryId) async {
    if (!FeatureFlags.anniversaryTrackingEnabled) {
      throw Exception('–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≥–æ–¥–æ–≤—â–∏–Ω –æ—Ç–∫–ª—é—á–µ–Ω–æ');
    }

    try {
      await _firestore
          .collection('wedding_anniversaries')
          .doc(anniversaryId)
          .delete();
    } catch (e) {
      debugPrint('Error deleting anniversary: $e');
      throw Exception('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥–æ–¥–æ–≤—â–∏–Ω—ã: $e');
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –≥–æ–¥–æ–≤—â–∏–Ω—ã
  Stream<List<WeddingAnniversary>> getUpcomingAnniversaries(
      {int daysAhead = 30}) {
    if (!FeatureFlags.anniversaryTrackingEnabled) {
      return Stream.value([]);
    }

    final now = DateTime.now();
    final futureDate = now.add(Duration(days: daysAhead));

    return _firestore
        .collection('wedding_anniversaries')
        .where('isActive', isEqualTo: true)
        .where('nextAnniversary', isGreaterThanOrEqualTo: now)
        .where('nextAnniversary', isLessThanOrEqualTo: futureDate)
        .orderBy('nextAnniversary')
        .snapshots()
        .map((snapshot) {
      return snapshot.docs.map((doc) {
        return WeddingAnniversary.fromMap({
          'id': doc.id,
          ...doc.data(),
        });
      }).toList();
    });
  }

  /// –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –≥–æ–¥–æ–≤—â–∏–Ω—ã
  Future<void> _createReminders(
      String anniversaryId, WeddingAnniversary anniversary) async {
    try {
      final reminders = <Map<String, dynamic>>[];

      for (final days in anniversary.reminderDates) {
        final daysInt = int.tryParse(days) ?? 7;
        final reminderDate =
            anniversary.nextAnniversary.subtract(Duration(days: daysInt));

        if (reminderDate.isAfter(DateTime.now())) {
          final message = _generateReminderMessage(anniversary, daysInt);

          reminders.add({
            'anniversaryId': anniversaryId,
            'customerId': anniversary.customerId,
            'reminderDate': Timestamp.fromDate(reminderDate),
            'message': message,
            'isSent': false,
            'createdAt': FieldValue.serverTimestamp(),
          });
        }
      }

      if (reminders.isNotEmpty) {
        final batch = _firestore.batch();
        for (final reminder in reminders) {
          final docRef = _firestore.collection('anniversary_reminders').doc();
          batch.set(docRef, reminder);
        }
        await batch.commit();
      }
    } catch (e) {
      debugPrint('Error creating reminders: $e');
    }
  }

  /// –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
  String _generateReminderMessage(
      WeddingAnniversary anniversary, int daysAhead) {
    final anniversaryName = anniversary.anniversaryName;
    final years = anniversary.yearsMarried + 1; // –°–ª–µ–¥—É—é—â–∞—è –≥–æ–¥–æ–≤—â–∏–Ω–∞

    if (daysAhead == 30) {
      return '–ß–µ—Ä–µ–∑ –º–µ—Å—è—Ü —É –≤–∞—Å $anniversaryName! –£–∂–µ $years –ª–µ—Ç –≤–º–µ—Å—Ç–µ. –í—Ä–µ–º—è –ø–æ–¥—É–º–∞—Ç—å –æ –ø—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏–∏! üíï';
    } else if (daysAhead == 7) {
      return '–ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é $anniversaryName! $years –ª–µ—Ç —Å—á–∞—Å—Ç–ª–∏–≤–æ–≥–æ –±—Ä–∞–∫–∞. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞! üéâ';
    } else if (daysAhead == 1) {
      return '–ó–∞–≤—Ç—Ä–∞ $anniversaryName! $years –ª–µ—Ç –ª—é–±–≤–∏ –∏ –≤–µ—Ä–Ω–æ—Å—Ç–∏. –° –¥–Ω–µ–º –≥–æ–¥–æ–≤—â–∏–Ω—ã! üíç';
    } else {
      return '–ß–µ—Ä–µ–∑ $daysAhead –¥–Ω–µ–π —É –≤–∞—Å $anniversaryName! $years –ª–µ—Ç –≤–º–µ—Å—Ç–µ. üíï';
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≥–æ–¥–æ–≤—â–∏–Ω—ã
  Future<List<String>> getAnniversaryRecommendations(
      WeddingAnniversary anniversary) async {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    // –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤, –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –∏ —Ç.–¥.
    return anniversary.anniversaryRecommendations;
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –¥–ª—è –≥–æ–¥–æ–≤—â–∏–Ω—ã
  Future<List<Map<String, dynamic>>> getAnniversarySpecialists(
      WeddingAnniversary anniversary) async {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–º–æ—á—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π –≥–æ–¥–æ–≤—â–∏–Ω—ã
      final specialistsQuery = await _firestore
          .collection('users')
          .where('role', isEqualTo: UserRole.specialist.name)
          .limit(10)
          .get();

      final specialists = <Map<String, dynamic>>[];

      for (final doc in specialistsQuery.docs) {
        final specialist = AppUser.fromMap({
          'id': doc.id,
          ...doc.data(),
        });

        // TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        // –ø–æ–¥—Ö–æ–¥—è—â–∏–º –¥–ª—è –≥–æ–¥–æ–≤—â–∏–Ω (—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ã, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã, –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –∏ —Ç.–¥.)

        specialists.add({
          'id': specialist.id,
          'name': specialist.displayName,
          'photo': specialist.photoURL,
          'category':
              '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π', // TODO: –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
          'rating': 4.8, // TODO: –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
          'price': '–æ—Ç 15000 ‚ÇΩ', // TODO: –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
        });
      }

      return specialists;
    } catch (e) {
      debugPrint('Error getting anniversary specialists: $e');
      return [];
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≥–æ–¥–æ–≤—â–∏–Ω–µ
  Future<void> sendAnniversaryReminder(String reminderId) async {
    try {
      final reminderDoc = await _firestore
          .collection('anniversary_reminders')
          .doc(reminderId)
          .get();

      if (!reminderDoc.exists) {
        return;
      }

      final reminder = AnniversaryReminder.fromMap({
        'id': reminderDoc.id,
        ...reminderDoc.data()!,
      });

      // TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–ª–∏ email
      debugPrint('Sending anniversary reminder: ${reminder.message}');

      // –û—Ç–º–µ—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
      await _firestore
          .collection('anniversary_reminders')
          .doc(reminderId)
          .update({
        'isSent': true,
        'sentAt': FieldValue.serverTimestamp(),
      });
    } catch (e) {
      debugPrint('Error sending anniversary reminder: $e');
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–æ–¥–æ–≤—â–∏–Ω
  Future<Map<String, dynamic>> getAnniversaryStats() async {
    if (!FeatureFlags.anniversaryTrackingEnabled) {
      return {};
    }

    try {
      final anniversariesQuery = await _firestore
          .collection('wedding_anniversaries')
          .where('isActive', isEqualTo: true)
          .get();

      final stats = <String, dynamic>{
        'total_anniversaries': 0,
        'upcoming_this_month': 0,
        'upcoming_this_year': 0,
        'average_years_married': 0.0,
        'milestone_anniversaries': 0,
      };

      final now = DateTime.now();
      final thisMonth = DateTime(now.year, now.month);
      final nextMonth = DateTime(now.year, now.month + 1);
      final thisYear = DateTime(now.year);
      final nextYear = DateTime(now.year + 1);

      int totalYears = 0;
      int milestoneCount = 0;

      for (final doc in anniversariesQuery.docs) {
        final anniversary = WeddingAnniversary.fromMap({
          'id': doc.id,
          ...doc.data(),
        });

        stats['total_anniversaries'] =
            (stats['total_anniversaries'] as int) + 1;
        totalYears += anniversary.yearsMarried;

        // –ü–æ–¥—Å—á–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≥–æ–¥–æ–≤—â–∏–Ω
        if (anniversary.nextAnniversary.isAfter(thisMonth) &&
            anniversary.nextAnniversary.isBefore(nextMonth)) {
          stats['upcoming_this_month'] =
              (stats['upcoming_this_month'] as int) + 1;
        }

        if (anniversary.nextAnniversary.isAfter(thisYear) &&
            anniversary.nextAnniversary.isBefore(nextYear)) {
          stats['upcoming_this_year'] =
              (stats['upcoming_this_year'] as int) + 1;
        }

        // –ü–æ–¥—Å—á–µ—Ç —é–±–∏–ª–µ–π–Ω—ã—Ö –≥–æ–¥–æ–≤—â–∏–Ω
        if ([1, 5, 10, 15, 20, 25, 30, 40, 50]
            .contains(anniversary.yearsMarried + 1)) {
          milestoneCount++;
        }
      }

      if (stats['total_anniversaries'] > 0) {
        stats['average_years_married'] =
            totalYears / (stats['total_anniversaries'] as int);
      }
      stats['milestone_anniversaries'] = milestoneCount;

      return stats;
    } catch (e) {
      debugPrint('Error getting anniversary stats: $e');
      return {};
    }
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å –≥–æ–¥–æ–≤—â–∏–Ω—ã (–ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –≥–æ–¥—ã –∏ —Å–ª–µ–¥—É—é—â—É—é –≥–æ–¥–æ–≤—â–∏–Ω—É)
  Future<void> updateAnniversaries() async {
    if (!FeatureFlags.anniversaryTrackingEnabled) {
      return;
    }

    try {
      final anniversariesQuery = await _firestore
          .collection('wedding_anniversaries')
          .where('isActive', isEqualTo: true)
          .get();

      final batch = _firestore.batch();

      for (final doc in anniversariesQuery.docs) {
        final anniversary = WeddingAnniversary.fromMap({
          'id': doc.id,
          ...doc.data(),
        });

        final newYearsMarried =
            WeddingAnniversary.calculateYearsMarried(anniversary.weddingDate);
        final newNextAnniversary = WeddingAnniversary.calculateNextAnniversary(
            anniversary.weddingDate);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        if (newYearsMarried != anniversary.yearsMarried ||
            newNextAnniversary != anniversary.nextAnniversary) {
          batch.update(doc.reference, {
            'yearsMarried': newYearsMarried,
            'nextAnniversary': Timestamp.fromDate(newNextAnniversary),
            'updatedAt': FieldValue.serverTimestamp(),
          });

          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –≥–æ–¥–æ–≤—â–∏–Ω—ã
          final updatedAnniversary = anniversary.copyWith(
            yearsMarried: newYearsMarried,
            nextAnniversary: newNextAnniversary,
          );

          await _createReminders(doc.id, updatedAnniversary);
        }
      }

      await batch.commit();
    } catch (e) {
      debugPrint('Error updating anniversaries: $e');
    }
  }
}

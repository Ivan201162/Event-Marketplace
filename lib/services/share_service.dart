import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:share_plus/share_plus.dart';
import 'package:url_launcher/url_launcher.dart';
import '../models/event.dart';
import '../models/user.dart';
import '../models/booking.dart';
import '../core/feature_flags.dart';
import '../core/safe_log.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
class ShareService {
  /// –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–æ–±—ã—Ç–∏–µ–º
  static Future<bool> shareEvent(Event event, {String? customMessage}) async {
    if (!FeatureFlags.shareEnabled) {
      SafeLog.warning('ShareService: Sharing is disabled');
      return false;
    }

    try {
      SafeLog.info('ShareService: Sharing event: ${event.title}');

      final message = customMessage ?? _buildEventShareMessage(event);
      final subject = '–°–æ–±—ã—Ç–∏–µ: ${event.title}';

      await Share.share(
        message,
        subject: subject,
      );

      SafeLog.info('ShareService: Event shared successfully');
      return true;
    } catch (e, stackTrace) {
      SafeLog.error('ShareService: Error sharing event', e, stackTrace);
      return false;
    }
  }

  /// –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static Future<bool> shareProfile(AppUser user,
      {String? customMessage}) async {
    if (!FeatureFlags.shareEnabled) {
      SafeLog.warning('ShareService: Sharing is disabled');
      return false;
    }

    try {
      SafeLog.info('ShareService: Sharing profile: ${user.name}');

      final message = customMessage ?? _buildProfileShareMessage(user);
      final subject = '–ü—Ä–æ—Ñ–∏–ª—å: ${user.name}';

      await Share.share(
        message,
        subject: subject,
      );

      SafeLog.info('ShareService: Profile shared successfully');
      return true;
    } catch (e, stackTrace) {
      SafeLog.error('ShareService: Error sharing profile', e, stackTrace);
      return false;
    }
  }

  /// –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  static Future<bool> shareBooking(Booking booking,
      {String? customMessage}) async {
    if (!FeatureFlags.shareEnabled) {
      SafeLog.warning('ShareService: Sharing is disabled');
      return false;
    }

    try {
      SafeLog.info('ShareService: Sharing booking: ${booking.eventTitle}');

      final message = customMessage ?? _buildBookingShareMessage(booking);
      final subject = '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: ${booking.eventTitle}';

      await Share.share(
        message,
        subject: subject,
      );

      SafeLog.info('ShareService: Booking shared successfully');
      return true;
    } catch (e, stackTrace) {
      SafeLog.error('ShareService: Error sharing booking', e, stackTrace);
      return false;
    }
  }

  /// –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ç–µ–∫—Å—Ç–æ–º
  static Future<bool> shareText(String text, {String? subject}) async {
    if (!FeatureFlags.shareEnabled) {
      SafeLog.warning('ShareService: Sharing is disabled');
      return false;
    }

    try {
      SafeLog.info('ShareService: Sharing text');

      await Share.share(
        text,
        subject: subject,
      );

      SafeLog.info('ShareService: Text shared successfully');
      return true;
    } catch (e, stackTrace) {
      SafeLog.error('ShareService: Error sharing text', e, stackTrace);
      return false;
    }
  }

  /// –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ñ–∞–π–ª–æ–º
  static Future<bool> shareFile(String filePath,
      {String? text, String? subject}) async {
    if (!FeatureFlags.shareEnabled) {
      SafeLog.warning('ShareService: Sharing is disabled');
      return false;
    }

    try {
      SafeLog.info('ShareService: Sharing file: $filePath');

      final file = XFile(filePath);

      await Share.shareXFiles(
        [file],
        text: text,
        subject: subject,
      );

      SafeLog.info('ShareService: File shared successfully');
      return true;
    } catch (e, stackTrace) {
      SafeLog.error('ShareService: Error sharing file', e, stackTrace);
      return false;
    }
  }

  /// –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏
  static Future<bool> shareFiles(List<String> filePaths,
      {String? text, String? subject}) async {
    if (!FeatureFlags.shareEnabled) {
      SafeLog.warning('ShareService: Sharing is disabled');
      return false;
    }

    try {
      SafeLog.info('ShareService: Sharing ${filePaths.length} files');

      final files = filePaths.map((path) => XFile(path)).toList();

      await Share.shareXFiles(
        files,
        text: text,
        subject: subject,
      );

      SafeLog.info('ShareService: Files shared successfully');
      return true;
    } catch (e, stackTrace) {
      SafeLog.error('ShareService: Error sharing files', e, stackTrace);
      return false;
    }
  }

  /// –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π
  static Future<bool> shareLink(String url,
      {String? title, String? description}) async {
    if (!FeatureFlags.shareEnabled) {
      SafeLog.warning('ShareService: Sharing is disabled');
      return false;
    }

    try {
      SafeLog.info('ShareService: Sharing link: $url');

      final message = _buildLinkShareMessage(url, title, description);
      final subject = title ?? '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Å—Å—ã–ª–∫–∞';

      await Share.share(
        message,
        subject: subject,
      );

      SafeLog.info('ShareService: Link shared successfully');
      return true;
    } catch (e, stackTrace) {
      SafeLog.error('ShareService: Error sharing link', e, stackTrace);
      return false;
    }
  }

  /// –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ
  static Future<bool> openLink(String url) async {
    try {
      SafeLog.info('ShareService: Opening link: $url');

      final uri = Uri.parse(url);

      if (await canLaunchUrl(uri)) {
        await launchUrl(uri, mode: LaunchMode.externalApplication);
        SafeLog.info('ShareService: Link opened successfully');
        return true;
      } else {
        SafeLog.warning('ShareService: Cannot launch URL: $url');
        return false;
      }
    } catch (e, stackTrace) {
      SafeLog.error('ShareService: Error opening link', e, stackTrace);
      return false;
    }
  }

  /// –û—Ç–∫—Ä—ã—Ç—å email –∫–ª–∏–µ–Ω—Ç
  static Future<bool> openEmail(String email,
      {String? subject, String? body}) async {
    try {
      SafeLog.info('ShareService: Opening email: $email');

      final uri = Uri(
        scheme: 'mailto',
        path: email,
        query: _buildEmailQuery(subject, body),
      );

      if (await canLaunchUrl(uri)) {
        await launchUrl(uri);
        SafeLog.info('ShareService: Email opened successfully');
        return true;
      } else {
        SafeLog.warning('ShareService: Cannot launch email: $email');
        return false;
      }
    } catch (e, stackTrace) {
      SafeLog.error('ShareService: Error opening email', e, stackTrace);
      return false;
    }
  }

  /// –û—Ç–∫—Ä—ã—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω
  static Future<bool> openPhone(String phone) async {
    try {
      SafeLog.info('ShareService: Opening phone: $phone');

      final uri = Uri(scheme: 'tel', path: phone);

      if (await canLaunchUrl(uri)) {
        await launchUrl(uri);
        SafeLog.info('ShareService: Phone opened successfully');
        return true;
      } else {
        SafeLog.warning('ShareService: Cannot launch phone: $phone');
        return false;
      }
    } catch (e, stackTrace) {
      SafeLog.error('ShareService: Error opening phone', e, stackTrace);
      return false;
    }
  }

  /// –û—Ç–∫—Ä—ã—Ç—å SMS
  static Future<bool> openSms(String phone, {String? message}) async {
    try {
      SafeLog.info('ShareService: Opening SMS: $phone');

      final uri = Uri(
        scheme: 'sms',
        path: phone,
        query: message != null ? 'body=${Uri.encodeComponent(message)}' : null,
      );

      if (await canLaunchUrl(uri)) {
        await launchUrl(uri);
        SafeLog.info('ShareService: SMS opened successfully');
        return true;
      } else {
        SafeLog.warning('ShareService: Cannot launch SMS: $phone');
        return false;
      }
    } catch (e, stackTrace) {
      SafeLog.error('ShareService: Error opening SMS', e, stackTrace);
      return false;
    }
  }

  /// –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞ —Å–æ–±—ã—Ç–∏—è
  static String _buildEventShareMessage(Event event) {
    final buffer = StringBuffer();

    buffer.writeln('üéâ –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ!');
    buffer.writeln();
    buffer.writeln('üìÖ ${event.title}');
    buffer.writeln('üìÖ ${_formatDate(event.date)}');

    if (event.location.isNotEmpty) {
      buffer.writeln('üìç ${event.location}');
    }

    if (event.description.isNotEmpty) {
      buffer.writeln();
      buffer.writeln('üìù ${event.description}');
    }

    if (event.price > 0) {
      buffer.writeln();
      buffer.writeln('üí∞ –¶–µ–Ω–∞: ${event.price} —Ä—É–±.');
    }

    buffer.writeln();
    buffer.writeln('–°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Event Marketplace –¥–ª—è —É—á–∞—Å—Ç–∏—è!');

    return buffer.toString();
  }

  /// –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞ –ø—Ä–æ—Ñ–∏–ª—è
  static String _buildProfileShareMessage(AppUser user) {
    final buffer = StringBuffer();

    buffer.writeln('üë§ –ü–æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º!');
    buffer.writeln();
    buffer.writeln('üëã ${user.name}');

    if (user.bio.isNotEmpty) {
      buffer.writeln();
      buffer.writeln('üìù ${user.bio}');
    }

    if (user.specialties.isNotEmpty) {
      buffer.writeln();
      buffer.writeln('üéØ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${user.specialties.join(', ')}');
    }

    buffer.writeln();
    buffer.writeln('–°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Event Marketplace –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞!');

    return buffer.toString();
  }

  /// –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  static String _buildBookingShareMessage(Booking booking) {
    final buffer = StringBuffer();

    buffer.writeln('üé´ –Ø –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª –º–µ—Å—Ç–æ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ!');
    buffer.writeln();
    buffer.writeln('üìÖ ${booking.eventTitle}');
    buffer.writeln('üìÖ ${_formatDate(booking.eventDate)}');
    buffer.writeln('üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${booking.participantsCount}');

    if (booking.notes != null && booking.notes!.isNotEmpty) {
      buffer.writeln();
      buffer.writeln('üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: ${booking.notes}');
    }

    buffer.writeln();
    buffer.writeln('–°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Event Marketplace –¥–ª—è —É—á–∞—Å—Ç–∏—è!');

    return buffer.toString();
  }

  /// –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞ —Å—Å—ã–ª–∫–∏
  static String _buildLinkShareMessage(
      String url, String? title, String? description) {
    final buffer = StringBuffer();

    if (title != null) {
      buffer.writeln('üîó $title');
      buffer.writeln();
    }

    if (description != null) {
      buffer.writeln('üìù $description');
      buffer.writeln();
    }

    buffer.writeln('üîó $url');

    return buffer.toString();
  }

  /// –ü–æ—Å—Ç—Ä–æ–∏—Ç—å query –¥–ª—è email
  static String _buildEmailQuery(String? subject, String? body) {
    final params = <String>[];

    if (subject != null) {
      params.add('subject=${Uri.encodeComponent(subject)}');
    }

    if (body != null) {
      params.add('body=${Uri.encodeComponent(body)}');
    }

    return params.join('&');
  }

  /// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É
  static String _formatDate(DateTime date) {
    return '${date.day}.${date.month}.${date.year} –≤ ${date.hour.toString().padLeft(2, '0')}:${date.minute.toString().padLeft(2, '0')}';
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —à–∞—Ä–∏–Ω–≥
  static bool get isEnabled => FeatureFlags.shareEnabled;

  /// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
  static List<String> get supportedPlatforms {
    if (kIsWeb) {
      return ['Web Share API', 'Copy to Clipboard'];
    } else if (Platform.isAndroid) {
      return ['Android Share', 'WhatsApp', 'Telegram', 'Email', 'SMS'];
    } else if (Platform.isIOS) {
      return ['iOS Share', 'WhatsApp', 'Telegram', 'Email', 'SMS', 'AirDrop'];
    } else {
      return ['System Share'];
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞—Ä–∏–Ω–≥–µ
  static Map<String, dynamic> get shareInfo => {
        'isEnabled': isEnabled,
        'supportedPlatforms': supportedPlatforms,
        'isWeb': kIsWeb,
        'isAndroid': !kIsWeb && Platform.isAndroid,
        'isIOS': !kIsWeb && Platform.isIOS,
      };

  /// –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞ —Å–æ–±—ã—Ç–∏—è
  static String _buildEventShareMessage(Event event) {
    final buffer = StringBuffer();
    buffer.writeln('üéâ ${event.title}');
    buffer.writeln();
    buffer.writeln('üìÖ –î–∞—Ç–∞: ${_formatDate(event.date)}');
    buffer.writeln('üìç –ú–µ—Å—Ç–æ: ${event.location}');
    buffer.writeln('üí∞ –¶–µ–Ω–∞: ${event.price} —Ä—É–±.');
    buffer.writeln();
    if (event.description.isNotEmpty) {
      buffer.writeln('üìù –û–ø–∏—Å–∞–Ω–∏–µ:');
      buffer.writeln(event.description);
      buffer.writeln();
    }
    buffer.writeln('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —Å–æ–±—ã—Ç–∏—é!');
    return buffer.toString();
  }

  /// –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞ –ø—Ä–æ—Ñ–∏–ª—è
  static String _buildProfileShareMessage(AppUser user) {
    final buffer = StringBuffer();
    buffer.writeln('üë§ ${user.name}');
    buffer.writeln();
    if (user.bio.isNotEmpty) {
      buffer.writeln('üìù –û —Å–µ–±–µ:');
      buffer.writeln(user.bio);
      buffer.writeln();
    }
    if (user.specialization.isNotEmpty) {
      buffer.writeln('üéØ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${user.specialization}');
    }
    buffer.writeln();
    buffer.writeln('–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —ç—Ç–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞!');
    return buffer.toString();
  }

  /// –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  static String _buildBookingShareMessage(Booking booking) {
    final buffer = StringBuffer();
    buffer.writeln('üìã –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ');
    buffer.writeln();
    buffer.writeln('üéâ –°–æ–±—ã—Ç–∏–µ: ${booking.eventTitle}');
    buffer.writeln('üìÖ –î–∞—Ç–∞: ${_formatDate(booking.eventDate)}');
    buffer.writeln('üë§ –ó–∞–∫–∞–∑—á–∏–∫: ${booking.userName}');
    buffer.writeln('üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${booking.totalPrice} —Ä—É–±.');
    buffer.writeln();
    if (booking.notes.isNotEmpty) {
      buffer.writeln('üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:');
      buffer.writeln(booking.notes);
      buffer.writeln();
    }
    buffer.writeln('–°—Ç–∞—Ç—É—Å: ${_getBookingStatusText(booking.status)}');
    return buffer.toString();
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  static String _getBookingStatusText(BookingStatus status) {
    switch (status) {
      case BookingStatus.pending:
        return '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è';
      case BookingStatus.confirmed:
        return '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ';
      case BookingStatus.cancelled:
        return '–û—Ç–º–µ–Ω–µ–Ω–æ';
      case BookingStatus.completed:
        return '–ó–∞–≤–µ—Ä—à–µ–Ω–æ';
      case BookingStatus.rejected:
        return '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ';
    }
  }
}

/// –†–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
extension EventShare on Event {
  /// –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–æ–±—ã—Ç–∏–µ–º
  Future<bool> share({String? customMessage}) =>
      ShareService.shareEvent(this, customMessage: customMessage);
}

extension UserShare on AppUser {
  /// –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–æ—Ñ–∏–ª–µ–º
  Future<bool> share({String? customMessage}) =>
      ShareService.shareProfile(this, customMessage: customMessage);
}

extension BookingShare on Booking {
  /// –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  Future<bool> share({String? customMessage}) =>
      ShareService.shareBooking(this, customMessage: customMessage);
}

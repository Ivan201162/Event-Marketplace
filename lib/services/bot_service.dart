import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/foundation.dart';
import 'package:uuid/uuid.dart';

import '../models/bot_message.dart';
import '../models/message.dart';
import 'message_service.dart';

class BotService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final MessageService _messageService = MessageService();
  final Uuid _uuid = const Uuid();

  /// Send bot message to chat
  Future<String> sendBotMessage({
    required String chatId,
    required BotMessageType type,
    required String text,
    List<BotAction>? actions,
    Map<String, dynamic>? metadata,
  }) async {
    try {
      final botMessageId = _uuid.v4();
      final now = DateTime.now();

      final botMessage = BotMessage(
        id: botMessageId,
        chatId: chatId,
        type: type,
        text: text,
        actions: actions ?? [],
        metadata: metadata ?? {},
        isInteractive: actions != null && actions.isNotEmpty,
        createdAt: now,
        updatedAt: now,
      );

      // Save bot message to botMessages collection
      await _firestore
          .collection('botMessages')
          .doc(botMessageId)
          .set(botMessage.toMap());

      // Create regular message for chat
      final messageId = await _messageService.sendTextMessage(
        chatId: chatId,
        senderId: 'bot',
        text: text,
      );

      // Update message with bot metadata
      await _firestore
          .collection('chats')
          .doc(chatId)
          .collection('messages')
          .doc(messageId)
          .update({
        'type': MessageType.bot.toString().split('.').last,
        'metadata': {
          'botMessageId': botMessageId,
          'botMessageType': type.toString().split('.').last,
          'actions': actions?.map((action) => action.toMap()).toList() ?? [],
          'isInteractive': botMessage.isInteractive,
          ...metadata ?? {},
        },
        'updatedAt': Timestamp.fromDate(now),
      });

      debugPrint('Bot message sent: $botMessageId');
      return botMessageId;
    } catch (e) {
      debugPrint('Error sending bot message: $e');
      throw Exception('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞: $e');
    }
  }

  /// Handle user interaction with bot
  Future<void> handleBotInteraction({
    required String chatId,
    required String userId,
    required String actionId,
    required String payload,
  }) async {
    try {
      // Log interaction
      await _firestore.collection('botInteractions').add({
        'chatId': chatId,
        'userId': userId,
        'actionId': actionId,
        'payload': payload,
        'timestamp': Timestamp.fromDate(DateTime.now()),
      });

      // Handle different payloads
      switch (payload) {
        case 'find_specialists':
          await _handleFindSpecialists(chatId);
          break;
        case 'faq':
          await _handleFAQ(chatId);
          break;
        case 'support':
          await _handleSupport(chatId);
          break;
        case 'booking_help':
          await _handleBookingHelp(chatId);
          break;
        case 'faq_1':
          await _handleFAQ1(chatId);
          break;
        case 'faq_2':
          await _handleFAQ2(chatId);
          break;
        case 'faq_3':
          await _handleFAQ3(chatId);
          break;
        case 'faq_4':
          await _handleFAQ4(chatId);
          break;
        case 'faq_5':
          await _handleFAQ5(chatId);
          break;
        case 'support_technical':
          await _handleSupportTechnical(chatId);
          break;
        case 'support_payment':
          await _handleSupportPayment(chatId);
          break;
        case 'support_booking':
          await _handleSupportBooking(chatId);
          break;
        case 'support_other':
          await _handleSupportOther(chatId);
          break;
        default:
          await _handleUnknownPayload(chatId, payload);
      }
    } catch (e) {
      debugPrint('Error handling bot interaction: $e');
    }
  }

  /// Send welcome message to new user
  Future<void> sendWelcomeMessage(String chatId) async {
    try {
      final welcomeMessage = BotMessageTemplates.welcomeMessage(chatId);
      await sendBotMessage(
        chatId: chatId,
        type: welcomeMessage.type,
        text: welcomeMessage.text,
        actions: welcomeMessage.actions,
      );
    } catch (e) {
      debugPrint('Error sending welcome message: $e');
    }
  }

  /// Send FAQ message
  Future<void> sendFAQMessage(String chatId) async {
    try {
      final faqMessage = BotMessageTemplates.faqMessage(chatId);
      await sendBotMessage(
        chatId: chatId,
        type: faqMessage.type,
        text: faqMessage.text,
        actions: faqMessage.actions,
      );
    } catch (e) {
      debugPrint('Error sending FAQ message: $e');
    }
  }

  /// Send support message
  Future<void> sendSupportMessage(String chatId) async {
    try {
      final supportMessage = BotMessageTemplates.supportMessage(chatId);
      await sendBotMessage(
        chatId: chatId,
        type: supportMessage.type,
        text: supportMessage.text,
        actions: supportMessage.actions,
      );
    } catch (e) {
      debugPrint('Error sending support message: $e');
    }
  }

  /// Handle find specialists request
  Future<void> _handleFindSpecialists(String chatId) async {
    await sendBotMessage(
      chatId: chatId,
      type: BotMessageType.help,
      text: 'üîç –ü–æ–∏—Å–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤\n\n'
          '–î–ª—è –ø–æ–∏—Å–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤:\n'
          '1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–ü–æ–∏—Å–∫"\n'
          '2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥\n'
          '3. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥\n'
          '4. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã (—Ü–µ–Ω–∞, —Ä–µ–π—Ç–∏–Ω–≥, –¥–∞—Ç–∞)\n'
          '5. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤\n\n'
          '–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –ø–æ–∏—Å–∫–æ–º?',
      actions: [
        BotAction(
          id: 'search_help',
          title: '–ü–æ–º–æ—â—å —Å –ø–æ–∏—Å–∫–æ–º',
          payload: 'search_help',
          type: BotActionType.quickReply,
        ),
        BotAction(
          id: 'back_to_main',
          title: '–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
          payload: 'back_to_main',
          type: BotActionType.quickReply,
        ),
      ],
    );
  }

  /// Handle FAQ request
  Future<void> _handleFAQ(String chatId) async {
    await sendFAQMessage(chatId);
  }

  /// Handle support request
  Future<void> _handleSupport(String chatId) async {
    await sendSupportMessage(chatId);
  }

  /// Handle booking help request
  Future<void> _handleBookingHelp(String chatId) async {
    await sendBotMessage(
      chatId: chatId,
      type: BotMessageType.help,
      text: 'üìÖ –ü–æ–º–æ—â—å —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º\n\n'
          '–ü—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n'
          '1. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞\n'
          '2. –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è\n'
          '3. –û–ø–∏—à–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n'
          '4. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n'
          '5. –í–Ω–µ—Å–∏—Ç–µ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É (30%)\n'
          '6. –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ\n\n'
          '–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã?',
      actions: [
        BotAction(
          id: 'booking_details',
          title: '–î–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
          payload: 'booking_details',
          type: BotActionType.quickReply,
        ),
        BotAction(
          id: 'payment_help',
          title: '–ü–æ–º–æ—â—å —Å –æ–ø–ª–∞—Ç–æ–π',
          payload: 'payment_help',
          type: BotActionType.quickReply,
        ),
        BotAction(
          id: 'back_to_main',
          title: '–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
          payload: 'back_to_main',
          type: BotActionType.quickReply,
        ),
      ],
    );
  }

  /// Handle FAQ 1 - Search specialists
  Future<void> _handleFAQ1(String chatId) async {
    await sendBotMessage(
      chatId: chatId,
      type: BotMessageType.faq,
      text: '1Ô∏è‚É£ –ö–∞–∫ –Ω–∞–π—Ç–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞?\n\n'
          '‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n'
          '‚Ä¢ –§–∏–ª—å—Ç—Ä—É–π—Ç–µ –ø–æ —Ü–µ–Ω–µ –∏ —Ä–µ–π—Ç–∏–Ω–≥—É\n'
          '‚Ä¢ –ß–∏—Ç–∞–π—Ç–µ –æ—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤\n'
          '‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ\n'
          '‚Ä¢ –°–≤—è–∑—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é\n\n'
          '–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –ø–æ–∏—Å–∫–æ–º?',
      actions: [
        BotAction(
          id: 'search_tips',
          title: '–°–æ–≤–µ—Ç—ã –ø–æ –ø–æ–∏—Å–∫—É',
          payload: 'search_tips',
          type: BotActionType.quickReply,
        ),
        BotAction(
          id: 'back_to_faq',
          title: '–ù–∞–∑–∞–¥ –∫ FAQ',
          payload: 'faq',
          type: BotActionType.quickReply,
        ),
      ],
    );
  }

  /// Handle FAQ 2 - Booking
  Future<void> _handleFAQ2(String chatId) async {
    await sendBotMessage(
      chatId: chatId,
      type: BotMessageType.faq,
      text: '2Ô∏è‚É£ –ö–∞–∫ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —É—Å–ª—É–≥—É?\n\n'
          '‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞\n'
          '‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è\n'
          '‚Ä¢ –û–ø–∏—à–∏—Ç–µ –¥–µ—Ç–∞–ª–∏\n'
          '‚Ä¢ –í–Ω–µ—Å–∏—Ç–µ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É\n'
          '‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ\n\n'
          '–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º?',
      actions: [
        BotAction(
          id: 'booking_process',
          title: '–ü—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
          payload: 'booking_process',
          type: BotActionType.quickReply,
        ),
        BotAction(
          id: 'back_to_faq',
          title: '–ù–∞–∑–∞–¥ –∫ FAQ',
          payload: 'faq',
          type: BotActionType.quickReply,
        ),
      ],
    );
  }

  /// Handle FAQ 3 - Cancel booking
  Future<void> _handleFAQ3(String chatId) async {
    await sendBotMessage(
      chatId: chatId,
      type: BotMessageType.faq,
      text: '3Ô∏è‚É£ –ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ?\n\n'
          '‚Ä¢ –û—Ç–º–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–∞ –∑–∞ 24 —á–∞—Å–∞\n'
          '‚Ä¢ –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è\n'
          '‚Ä¢ –£–≤–µ–¥–æ–º–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞\n'
          '‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n\n'
          '–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –æ—Ç–º–µ–Ω–æ–π?',
      actions: [
        BotAction(
          id: 'cancel_help',
          title: '–ü–æ–º–æ—â—å —Å –æ—Ç–º–µ–Ω–æ–π',
          payload: 'cancel_help',
          type: BotActionType.quickReply,
        ),
        BotAction(
          id: 'back_to_faq',
          title: '–ù–∞–∑–∞–¥ –∫ FAQ',
          payload: 'faq',
          type: BotActionType.quickReply,
        ),
      ],
    );
  }

  /// Handle FAQ 4 - Support
  Future<void> _handleFAQ4(String chatId) async {
    await sendBotMessage(
      chatId: chatId,
      type: BotMessageType.faq,
      text: '4Ô∏è‚É£ –ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π?\n\n'
          '‚Ä¢ –ß–∞—Ç —Å –±–æ—Ç–æ–º (24/7)\n'
          '‚Ä¢ Email: support@eventmarketplace.ru\n'
          '‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7 (800) 123-45-67\n'
          '‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 9:00 - 21:00\n\n'
          '–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?',
      actions: [
        BotAction(
          id: 'contact_support',
          title: '–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π',
          payload: 'support',
          type: BotActionType.quickReply,
        ),
        BotAction(
          id: 'back_to_faq',
          title: '–ù–∞–∑–∞–¥ –∫ FAQ',
          payload: 'faq',
          type: BotActionType.quickReply,
        ),
      ],
    );
  }

  /// Handle FAQ 5 - Reviews
  Future<void> _handleFAQ5(String chatId) async {
    await sendBotMessage(
      chatId: chatId,
      type: BotMessageType.faq,
      text: '5Ô∏è‚É£ –ö–∞–∫ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤?\n\n'
          '‚Ä¢ –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Å–ª—É–≥–∏\n'
          '‚Ä¢ –û—Ü–µ–Ω–∏—Ç–µ –ø–æ 5-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ\n'
          '‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π\n'
          '‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n'
          '‚Ä¢ –ü–æ–º–æ–≥–∏—Ç–µ –¥—Ä—É–≥–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º\n\n'
          '–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –æ—Ç–∑—ã–≤–∞–º–∏?',
      actions: [
        BotAction(
          id: 'review_help',
          title: '–ü–æ–º–æ—â—å —Å –æ—Ç–∑—ã–≤–∞–º–∏',
          payload: 'review_help',
          type: BotActionType.quickReply,
        ),
        BotAction(
          id: 'back_to_faq',
          title: '–ù–∞–∑–∞–¥ –∫ FAQ',
          payload: 'faq',
          type: BotActionType.quickReply,
        ),
      ],
    );
  }

  /// Handle support technical
  Future<void> _handleSupportTechnical(String chatId) async {
    await sendBotMessage(
      chatId: chatId,
      type: BotMessageType.support,
      text: 'üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞\n\n'
          '–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:\n'
          '‚Ä¢ –ß—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç?\n'
          '‚Ä¢ –ù–∞ –∫–∞–∫–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ?\n'
          '‚Ä¢ –ö–æ–≥–¥–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞?\n'
          '‚Ä¢ –ï—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö?\n\n'
          '–ú—ã –ø–æ–º–æ–∂–µ–º —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É!',
      actions: [
        BotAction(
          id: 'escalate_technical',
          title: '–ü–µ—Ä–µ–¥–∞—Ç—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É',
          payload: 'escalate_technical',
          type: BotActionType.quickReply,
        ),
        BotAction(
          id: 'back_to_support',
          title: '–ù–∞–∑–∞–¥ –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ',
          payload: 'support',
          type: BotActionType.quickReply,
        ),
      ],
    );
  }

  /// Handle support payment
  Future<void> _handleSupportPayment(String chatId) async {
    await sendBotMessage(
      chatId: chatId,
      type: BotMessageType.support,
      text: 'üí≥ –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø–ª–∞—Ç–æ–π\n\n'
          '–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:\n'
          '‚Ä¢ –ù–µ –ø—Ä–æ—à–ª–∞ –æ–ø–ª–∞—Ç–∞?\n'
          '‚Ä¢ –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞?\n'
          '‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º?\n'
          '‚Ä¢ –î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞?\n\n'
          '–ú—ã –ø–æ–º–æ–∂–µ–º —Å –æ–ø–ª–∞—Ç–æ–π!',
      actions: [
        BotAction(
          id: 'escalate_payment',
          title: '–ü–µ—Ä–µ–¥–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É',
          payload: 'escalate_payment',
          type: BotActionType.quickReply,
        ),
        BotAction(
          id: 'back_to_support',
          title: '–ù–∞–∑–∞–¥ –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ',
          payload: 'support',
          type: BotActionType.quickReply,
        ),
      ],
    );
  }

  /// Handle support booking
  Future<void> _handleSupportBooking(String chatId) async {
    await sendBotMessage(
      chatId: chatId,
      type: BotMessageType.support,
      text: 'üìÖ –ü—Ä–æ–±–ª–µ–º–∞ —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º\n\n'
          '–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:\n'
          '‚Ä¢ –ù–µ —É–¥–∞–µ—Ç—Å—è –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å?\n'
          '‚Ä¢ –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞/–≤—Ä–µ–º—è?\n'
          '‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–º–µ–Ω–æ–π?\n'
          '‚Ä¢ –î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞?\n\n'
          '–ú—ã –ø–æ–º–æ–∂–µ–º —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º!',
      actions: [
        BotAction(
          id: 'escalate_booking',
          title: '–ü–µ—Ä–µ–¥–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É',
          payload: 'escalate_booking',
          type: BotActionType.quickReply,
        ),
        BotAction(
          id: 'back_to_support',
          title: '–ù–∞–∑–∞–¥ –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ',
          payload: 'support',
          type: BotActionType.quickReply,
        ),
      ],
    );
  }

  /// Handle support other
  Future<void> _handleSupportOther(String chatId) async {
    await sendBotMessage(
      chatId: chatId,
      type: BotMessageType.support,
      text: '‚ùì –î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞\n\n'
          '–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:\n'
          '‚Ä¢ –ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?\n'
          '‚Ä¢ –ö–æ–≥–¥–∞ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ?\n'
          '‚Ä¢ –ß—Ç–æ –≤—ã –æ–∂–∏–¥–∞–ª–∏?\n'
          '‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏?\n\n'
          '–ú—ã –ø–æ–º–æ–∂–µ–º —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É!',
      actions: [
        BotAction(
          id: 'escalate_other',
          title: '–ü–µ—Ä–µ–¥–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É',
          payload: 'escalate_other',
          type: BotActionType.quickReply,
        ),
        BotAction(
          id: 'back_to_support',
          title: '–ù–∞–∑–∞–¥ –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ',
          payload: 'support',
          type: BotActionType.quickReply,
        ),
      ],
    );
  }

  /// Handle unknown payload
  Future<void> _handleUnknownPayload(String chatId, String payload) async {
    await sendBotMessage(
      chatId: chatId,
      type: BotMessageType.help,
      text: '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å.\n\n'
          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ:',
      actions: [
        BotAction(
          id: 'back_to_main',
          title: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
          payload: 'back_to_main',
          type: BotActionType.quickReply,
        ),
        BotAction(
          id: 'faq',
          title: 'FAQ',
          payload: 'faq',
          type: BotActionType.quickReply,
        ),
        BotAction(
          id: 'support',
          title: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞',
          payload: 'support',
          type: BotActionType.quickReply,
        ),
      ],
    );
  }

  /// Get bot message by ID
  Future<BotMessage?> getBotMessage(String botMessageId) async {
    try {
      final doc = await _firestore.collection('botMessages').doc(botMessageId).get();
      if (!doc.exists) return null;
      return BotMessage.fromDocument(doc);
    } catch (e) {
      debugPrint('Error getting bot message: $e');
      return null;
    }
  }

  /// Get bot interactions for analytics
  Future<List<Map<String, dynamic>>> getBotInteractions({
    String? chatId,
    String? userId,
    int limit = 100,
  }) async {
    try {
      Query query = _firestore.collection('botInteractions');
      
      if (chatId != null) {
        query = query.where('chatId', isEqualTo: chatId);
      }
      if (userId != null) {
        query = query.where('userId', isEqualTo: userId);
      }
      
      query = query.orderBy('timestamp', descending: true).limit(limit);
      
      final snapshot = await query.get();
      return snapshot.docs.map((doc) => doc.data() as Map<String, dynamic>).toList();
    } catch (e) {
      debugPrint('Error getting bot interactions: $e');
      return [];
    }
  }
}

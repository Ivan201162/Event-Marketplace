import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/foundation.dart';

import '../models/customer_profile.dart';
import '../models/notification.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –≥–æ–¥–æ–≤—â–∏–Ω–∞—Ö –∏ –≤–∞–∂–Ω—ã—Ö –¥–∞—Ç–∞—Ö
class AnniversaryReminderService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseMessaging _messaging = FirebaseMessaging.instance;

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö –¥–∞—Ç–∞—Ö
  Future<void> checkAnniversaryReminders() async {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
      final customersQuery = await _firestore
          .collection('customer_profiles')
          .where('anniversaryRemindersEnabled', isEqualTo: true)
          .get();

      for (final doc in customersQuery.docs) {
        final profile = CustomerProfile.fromDocument(doc);
        await _checkCustomerAnniversaryReminders(profile);
      }
    } catch (e) {
      debugPrint('Error checking anniversary reminders: $e');
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑—á–∏–∫–∞
  Future<void> _checkCustomerAnniversaryReminders(CustomerProfile profile) async {
    try {
      final now = DateTime.now();
      
      for (final importantDate in profile.importantDates) {
        if (!importantDate.isActive) continue;
        
        final daysUntil = importantDate.daysUntil(now);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        if (daysUntil >= 0 && importantDate.reminderDays.contains(daysUntil)) {
          await _sendAnniversaryReminder(profile, importantDate, daysUntil);
        }
      }
    } catch (e) {
      debugPrint('Error checking customer anniversary reminders: $e');
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≥–æ–¥–æ–≤—â–∏–Ω–µ
  Future<void> _sendAnniversaryReminder(
    CustomerProfile profile,
    ImportantDate importantDate,
    int daysUntil,
  ) async {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
      final reminderQuery = await _firestore
          .collection('anniversary_reminders')
          .where('customerId', isEqualTo: profile.userId)
          .where('importantDateId', isEqualTo: importantDate.id)
          .where('daysUntil', isEqualTo: daysUntil)
          .where('sentAt', isGreaterThan: Timestamp.fromDate(DateTime.now().subtract(const Duration(days: 1))))
          .get();

      if (reminderQuery.docs.isNotEmpty) {
        return; // –£–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
      }

      String title;
      String body;

      if (daysUntil == 0) {
        title = '–°–µ–≥–æ–¥–Ω—è –≤–∞–∂–Ω–∞—è –¥–∞—Ç–∞!';
        body = '–°–µ–≥–æ–¥–Ω—è ${importantDate.title}! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å –±–ª–∏–∑–∫–∏—Ö.';
      } else if (daysUntil == 1) {
        title = '–ó–∞–≤—Ç—Ä–∞ –≤–∞–∂–Ω–∞—è –¥–∞—Ç–∞';
        body = '–ó–∞–≤—Ç—Ä–∞ ${importantDate.title}. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –ø—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏—é!';
      } else if (daysUntil == 7) {
        title = '–ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –≤–∞–∂–Ω–∞—è –¥–∞—Ç–∞';
        body = '–ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é ${importantDate.title}. –í—Ä–µ–º—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å!';
      } else if (daysUntil == 30) {
        title = '–ß–µ—Ä–µ–∑ –º–µ—Å—è—Ü –≤–∞–∂–Ω–∞—è –¥–∞—Ç–∞';
        body = '–ß–µ—Ä–µ–∑ –º–µ—Å—è—Ü ${importantDate.title}. –ù–∞—á–Ω–∏—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É!';
      } else {
        title = '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–∞–∂–Ω–æ–π –¥–∞—Ç–µ';
        body = '–ß–µ—Ä–µ–∑ $daysUntil –¥–Ω–µ–π ${importantDate.title}.';
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      await _sendPushNotification(profile.userId, title, body);

      // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
      await _createInAppNotification(
        profile.userId,
        title,
        body,
        NotificationType.anniversary,
        {
          'importantDateId': importantDate.id,
          'daysUntil': daysUntil,
        },
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏
      await _saveReminderRecord(profile.userId, importantDate.id, daysUntil);
    } catch (e) {
      debugPrint('Error sending anniversary reminder: $e');
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≥–æ–¥–æ–≤—â–∏–Ω–µ —Å–≤–∞–¥—å–±—ã
  Future<void> sendWeddingAnniversaryReminder(CustomerProfile profile) async {
    try {
      if (profile.weddingDate == null || !profile.anniversaryRemindersEnabled) {
        return;
      }

      final now = DateTime.now();
      final weddingDate = profile.weddingDate!;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–µ–≥–æ–¥–Ω—è –≥–æ–¥–æ–≤—â–∏–Ω–æ–π —Å–≤–∞–¥—å–±—ã
      if (now.month == weddingDate.month && now.day == weddingDate.day) {
        final yearsOfMarriage = profile.yearsOfMarriage ?? 0;
        
        String title;
        String body;
        
        if (yearsOfMarriage == 0) {
          title = '–° –≥–æ–¥–æ–≤—â–∏–Ω–æ–π —Å–≤–∞–¥—å–±—ã!';
          body = '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–µ—Ä–≤–æ–π –≥–æ–¥–æ–≤—â–∏–Ω–æ–π —Å–≤–∞–¥—å–±—ã! üéâ';
        } else if (yearsOfMarriage == 1) {
          title = '–° –≥–æ–¥–æ–≤—â–∏–Ω–æ–π —Å–≤–∞–¥—å–±—ã!';
          body = '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–µ—Ä–≤–æ–π –≥–æ–¥–æ–≤—â–∏–Ω–æ–π —Å–≤–∞–¥—å–±—ã! üéâ';
        } else {
          title = '–° –≥–æ–¥–æ–≤—â–∏–Ω–æ–π —Å–≤–∞–¥—å–±—ã!';
          body = '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å ${yearsOfMarriage}-–π –≥–æ–¥–æ–≤—â–∏–Ω–æ–π —Å–≤–∞–¥—å–±—ã! üéâ';
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await _sendPushNotification(profile.userId, title, body);

        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        await _createInAppNotification(
          profile.userId,
          title,
          body,
          NotificationType.anniversary,
          {
            'type': 'wedding_anniversary',
            'yearsOfMarriage': yearsOfMarriage,
          },
        );
      }
    } catch (e) {
      debugPrint('Error sending wedding anniversary reminder: $e');
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–Ω–µ —Ä–æ–∂–¥–µ–Ω–∏—è
  Future<void> sendBirthdayReminder(CustomerProfile profile) async {
    try {
      if (profile.dateOfBirth == null) return;

      final now = DateTime.now();
      final birthDate = profile.dateOfBirth!;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–µ–≥–æ–¥–Ω—è –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è
      if (now.month == birthDate.month && now.day == birthDate.day) {
        final age = profile.age ?? 0;
        
        String title;
        String body;
        
        if (age == 0) {
          title = '–° –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è!';
          body = '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è! üéÇ';
        } else {
          title = '–° –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è!';
          body = '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å $age-–ª–µ—Ç–∏–µ–º! üéÇ';
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await _sendPushNotification(profile.userId, title, body);

        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        await _createInAppNotification(
          profile.userId,
          title,
          body,
          NotificationType.anniversary,
          {
            'type': 'birthday',
            'age': age,
          },
        );
      }
    } catch (e) {
      debugPrint('Error sending birthday reminder: $e');
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º —Å–æ–±—ã—Ç–∏–∏
  Future<void> sendUpcomingEventReminder(CustomerProfile profile, ImportantDate importantDate) async {
    try {
      final now = DateTime.now();
      final daysUntil = importantDate.daysUntil(now);
      
      if (daysUntil < 0) return;

      String title;
      String body;

      if (daysUntil == 0) {
        title = '–°–µ–≥–æ–¥–Ω—è ${importantDate.title}!';
        body = '–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ –≤–∞–∂–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏ —Å–µ–≥–æ–¥–Ω—è.';
      } else if (daysUntil == 1) {
        title = '–ó–∞–≤—Ç—Ä–∞ ${importantDate.title}';
        body = '–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–º—É —Å–æ–±—ã—Ç–∏—é.';
      } else if (daysUntil <= 7) {
        title = '–ß–µ—Ä–µ–∑ $daysUntil –¥–Ω–µ–π ${importantDate.title}';
        body = '–í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –≤–∞–∂–Ω–æ–º—É —Å–æ–±—ã—Ç–∏—é.';
      } else {
        return; // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ –±–æ–ª–µ–µ —á–µ–º –Ω–µ–¥–µ–ª—é
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      await _sendPushNotification(profile.userId, title, body);

      // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
      await _createInAppNotification(
        profile.userId,
        title,
        body,
        NotificationType.anniversary,
        {
          'importantDateId': importantDate.id,
          'daysUntil': daysUntil,
        },
      );
    } catch (e) {
      debugPrint('Error sending upcoming event reminder: $e');
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  Future<void> _sendPushNotification(String userId, String title, String body) async {
    try {
      // –ü–æ–ª—É—á–∞–µ–º FCM —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final userDoc = await _firestore.collection('users').doc(userId).get();
      if (!userDoc.exists) return;

      final fcmToken = userDoc.data()?['fcmToken'] as String?;
      if (fcmToken == null) return;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Cloud Functions
      await _firestore.collection('notifications').add({
        'userId': userId,
        'title': title,
        'body': body,
        'type': 'anniversary',
        'fcmToken': fcmToken,
        'createdAt': Timestamp.fromDate(DateTime.now()),
        'sent': false,
      });
    } catch (e) {
      debugPrint('Error sending push notification: $e');
    }
  }

  /// –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
  Future<void> _createInAppNotification(
    String userId,
    String title,
    String body,
    NotificationType type,
    Map<String, dynamic> data,
  ) async {
    try {
      await _firestore.collection('user_notifications').add({
        'userId': userId,
        'title': title,
        'body': body,
        'type': type.name,
        'isRead': false,
        'createdAt': Timestamp.fromDate(DateTime.now()),
        'data': data,
      });
    } catch (e) {
      debugPrint('Error creating in-app notification: $e');
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏
  Future<void> _saveReminderRecord(String customerId, String importantDateId, int daysUntil) async {
    try {
      await _firestore.collection('anniversary_reminders').add({
        'customerId': customerId,
        'importantDateId': importantDateId,
        'daysUntil': daysUntil,
        'sentAt': Timestamp.fromDate(DateTime.now()),
        'status': 'sent',
      });
    } catch (e) {
      debugPrint('Error saving reminder record: $e');
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
  Future<List<Map<String, dynamic>>> getReminderHistory(String customerId) async {
    try {
      final remindersQuery = await _firestore
          .collection('anniversary_reminders')
          .where('customerId', isEqualTo: customerId)
          .orderBy('sentAt', descending: true)
          .limit(50)
          .get();

      return remindersQuery.docs.map((doc) {
        final data = doc.data();
        return {
          'id': doc.id,
          'importantDateId': data['importantDateId'],
          'daysUntil': data['daysUntil'],
          'sentAt': (data['sentAt'] as Timestamp).toDate(),
          'status': data['status'],
        };
      }).toList();
    } catch (e) {
      debugPrint('Error getting reminder history: $e');
      return [];
    }
  }

  /// –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞
  Future<void> setupAnniversaryReminders(String customerId, {
    bool enabled = true,
    List<int> reminderDays = const [1, 7, 30],
  }) async {
    try {
      final profileQuery = await _firestore
          .collection('customer_profiles')
          .where('userId', isEqualTo: customerId)
          .limit(1)
          .get();

      if (profileQuery.docs.isEmpty) {
        throw Exception('–ü—Ä–æ—Ñ–∏–ª—å –∑–∞–∫–∞–∑—á–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      final profileDoc = profileQuery.docs.first;
      
      await profileDoc.reference.update({
        'anniversaryRemindersEnabled': enabled,
        'updatedAt': Timestamp.fromDate(DateTime.now()),
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –≤–∞–∂–Ω—ã—Ö –¥–∞—Ç
      if (enabled) {
        final profile = CustomerProfile.fromDocument(profileDoc);
        for (final importantDate in profile.importantDates) {
          await _firestore.collection('customer_profiles').doc(profileDoc.id).update({
            'importantDates': profile.importantDates.map((date) {
              if (date.id == importantDate.id) {
                return date.copyWith(
                  reminderDays: reminderDays,
                ).toMap();
              }
              return date.toMap();
            }).toList(),
          });
        }
      }
    } catch (e) {
      debugPrint('Error setting up anniversary reminders: $e');
      throw Exception('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –≥–æ–¥–æ–≤—â–∏–Ω–∞—Ö: $e');
    }
  }

  /// –û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞
  Future<void> disableAnniversaryReminders(String customerId) async {
    try {
      await setupAnniversaryReminders(customerId, enabled: false);
    } catch (e) {
      debugPrint('Error disabling anniversary reminders: $e');
      throw Exception('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –≥–æ–¥–æ–≤—â–∏–Ω–∞—Ö: $e');
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
  Future<Map<String, dynamic>?> getReminderSettings(String customerId) async {
    try {
      final profileQuery = await _firestore
          .collection('customer_profiles')
          .where('userId', isEqualTo: customerId)
          .limit(1)
          .get();

      if (profileQuery.docs.isEmpty) return null;

      final profile = CustomerProfile.fromDocument(profileQuery.docs.first);
      
      return {
        'enabled': profile.anniversaryRemindersEnabled,
        'importantDatesCount': profile.importantDates.length,
        'upcomingDatesCount': profile.upcomingImportantDates.length,
      };
    } catch (e) {
      debugPrint('Error getting reminder settings: $e');
      return null;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
  Future<Map<String, dynamic>> getReminderStats(String customerId) async {
    try {
      final remindersQuery = await _firestore
          .collection('anniversary_reminders')
          .where('customerId', isEqualTo: customerId)
          .get();

      final totalReminders = remindersQuery.docs.length;
      final todayReminders = remindersQuery.docs.where((doc) {
        final sentAt = (doc.data()['sentAt'] as Timestamp).toDate();
        final now = DateTime.now();
        return sentAt.year == now.year && sentAt.month == now.month && sentAt.day == now.day;
      }).length;

      return {
        'totalReminders': totalReminders,
        'todayReminders': todayReminders,
        'lastReminder': remindersQuery.docs.isNotEmpty 
            ? (remindersQuery.docs.first.data()['sentAt'] as Timestamp).toDate()
            : null,
      };
    } catch (e) {
      debugPrint('Error getting reminder stats: $e');
      return {};
    }
  }

  /// –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
  Future<void> startPeriodicReminderCheck() async {
    try {
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
      await _firestore.collection('system_jobs').doc('anniversary_reminder_check').set({
        'lastRun': Timestamp.fromDate(DateTime.now()),
        'nextRun': Timestamp.fromDate(DateTime.now().add(const Duration(hours: 24))),
        'status': 'active',
        'type': 'anniversary_reminder_check',
      });
    } catch (e) {
      debugPrint('Error starting periodic reminder check: $e');
    }
  }
}

import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/ai_message.dart';
import '../models/specialist.dart';
import 'specialist_service.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è AI-–ø–æ–º–æ—â–Ω–∏–∫–∞
class AIAssistantService {
  final FirebaseFirestore _db = FirebaseFirestore.instance;
  final SpecialistService _specialistService = SpecialistService();

  /// –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Stream<List<AIMessage>> getMessageHistory(String userId) => _db
      .collection('ai_chats')
      .doc(userId)
      .collection('messages')
      .orderBy('timestamp', descending: false)
      .snapshots()
      .map((snapshot) => snapshot.docs.map(AIMessage.fromDocument).toList());

  /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç AI
  Future<AIMessage> sendMessage(String userId, String message) async {
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final userMessage = AIMessage(
        id: _generateMessageId(),
        type: AIMessageType.user,
        content: message,
        timestamp: DateTime.now(),
      );

      await _saveMessage(userId, userMessage);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
      final aiResponse = await _processUserMessage(message);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç AI
      await _saveMessage(userId, aiResponse);

      return aiResponse;
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: $e');
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      return AIMessage(
        id: _generateMessageId(),
        type: AIMessageType.assistant,
        content: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        timestamp: DateTime.now(),
      );
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç
  Future<AIMessage> _processUserMessage(String message) async {
    final lowerMessage = message.toLowerCase();

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    final intent = _analyzeIntent(lowerMessage);

    switch (intent.type) {
      case AIIntentType.findSpecialist:
        return _handleFindSpecialistIntent(intent, message);
      case AIIntentType.budgetQuestion:
        return _handleBudgetQuestionIntent(intent, message);
      case AIIntentType.generalQuestion:
        return _handleGeneralQuestionIntent(message);
      case AIIntentType.greeting:
        return _handleGreetingIntent();
      default:
        return _handleUnknownIntent(message);
    }
  }

  /// –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  AIIntent _analyzeIntent(String message) {
    // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
    final specialistKeywords = [
      '–Ω–∞–π–¥–∏',
      '–ø–æ–¥–±–µ—Ä–∏',
      '–Ω—É–∂–µ–Ω',
      '–∏—â—É',
      '—Ö–æ—á—É',
      '–≤–µ–¥—É—â–∏–π',
      '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ',
      'dj',
      '–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä',
      '–º—É–∑—ã–∫–∞–Ω—Ç',
      '–≤–∏–¥–µ–æ–≥—Ä–∞—Ñ',
      '–∞–Ω–∏–º–∞—Ç–æ—Ä',
      '—Ñ–ª–æ—Ä–∏—Å—Ç',
      '—Å–≤–∞–¥—å–±–∞',
      '–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è',
      '–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤',
      '–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ',
    ];

    // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –±—é–¥–∂–µ—Ç–µ
    final budgetKeywords = [
      '–±—é–¥–∂–µ—Ç',
      '—Å—Ç–æ–∏–º–æ—Å—Ç—å',
      '—Ü–µ–Ω–∞',
      '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç',
      '–¥–æ—Ä–æ–≥–æ',
      '–¥–µ—à–µ–≤–æ',
      '—Ä–∞—Å—Ö–æ–¥—ã',
      '–∑–∞—Ç—Ä–∞—Ç—ã',
      '–ø–æ—Ç—Ä–∞—Ç–∏—Ç—å',
    ];

    // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
    final greetingKeywords = [
      '–ø—Ä–∏–≤–µ—Ç',
      '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π',
      '–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å',
      '–ø–æ–º–æ—â—å',
      '–ø–æ–º–æ–≥–∏',
    ];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏—è
    if (specialistKeywords.any((keyword) => message.contains(keyword))) {
      return AIIntent(
        type: AIIntentType.findSpecialist,
        category: _extractCategory(message),
        location: _extractLocation(message),
        eventType: _extractEventType(message),
        budget: _extractBudget(message),
      );
    }

    if (budgetKeywords.any((keyword) => message.contains(keyword))) {
      return AIIntent(
        type: AIIntentType.budgetQuestion,
        category: _extractCategory(message),
        location: _extractLocation(message),
        eventType: _extractEventType(message),
        budget: _extractBudget(message),
      );
    }

    if (greetingKeywords.any((keyword) => message.contains(keyword))) {
      return const AIIntent(type: AIIntentType.greeting);
    }

    return const AIIntent(type: AIIntentType.generalQuestion);
  }

  /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
  Future<AIMessage> _handleFindSpecialistIntent(
    AIIntent intent,
    String originalMessage,
  ) async {
    try {
      // –ò—â–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      var specialists = <Specialist>[];

      if (intent.category != null) {
        specialists = await _specialistService.getSpecialistsByCategory(
          intent.category!,
          limit: 3,
        );
      } else {
        // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –∏—â–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É
        specialists = await _specialistService.searchSpecialists(
          query: originalMessage,
        );
      }

      if (specialists.isEmpty) {
        return AIMessage(
          id: _generateMessageId(),
          type: AIMessageType.assistant,
          content:
              '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –∫–∞—Ç–∞–ª–æ–≥—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.',
          timestamp: DateTime.now(),
        );
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
      final response =
          _buildSpecialistRecommendationResponse(specialists, intent);

      return AIMessage(
        id: _generateMessageId(),
        type: AIMessageType.assistant,
        content: response,
        timestamp: DateTime.now(),
      );
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤: $e');
      return AIMessage(
        id: _generateMessageId(),
        type: AIMessageType.assistant,
        content:
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        timestamp: DateTime.now(),
      );
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ –±—é–¥–∂–µ—Ç–µ
  Future<AIMessage> _handleBudgetQuestionIntent(
    AIIntent intent,
    String originalMessage,
  ) async {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      var specialists = <Specialist>[];

      if (intent.category != null) {
        specialists = await _specialistService.getSpecialistsByCategory(
          intent.category!,
          limit: 10,
        );
      } else {
        specialists = await _specialistService.getAllSpecialists(limit: 20);
      }

      if (specialists.isEmpty) {
        return AIMessage(
          id: _generateMessageId(),
          type: AIMessageType.assistant,
          content: '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –Ω–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.',
          timestamp: DateTime.now(),
        );
      }

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã
      final avgPrice =
          specialists.map((s) => s.hourlyRate).reduce((a, b) => a + b) /
              specialists.length;
      final minPrice =
          specialists.map((s) => s.hourlyRate).reduce((a, b) => a < b ? a : b);
      final maxPrice =
          specialists.map((s) => s.hourlyRate).reduce((a, b) => a > b ? a : b);

      final response =
          _buildBudgetResponse(avgPrice, minPrice, maxPrice, intent);

      return AIMessage(
        id: _generateMessageId(),
        type: AIMessageType.assistant,
        content: response,
        timestamp: DateTime.now(),
      );
    } catch (e) {
      print('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –±—é–¥–∂–µ—Ç–∞: $e');
      return AIMessage(
        id: _generateMessageId(),
        type: AIMessageType.assistant,
        content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –±—é–¥–∂–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        timestamp: DateTime.now(),
      );
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å
  Future<AIMessage> _handleGeneralQuestionIntent(String message) async =>
      AIMessage(
        id: _generateMessageId(),
        type: AIMessageType.assistant,
        content:
            '–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –í—ã –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å:\n\n'
            '‚Ä¢ "–ü–æ–¥–±–µ—Ä–∏ –≤–µ–¥—É—â–µ–≥–æ –¥–ª—è —Å–≤–∞–¥—å–±—ã –≤ –ú–æ—Å–∫–≤–µ"\n'
            '‚Ä¢ "–ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç –Ω—É–∂–µ–Ω –Ω–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤ –¥–ª—è 50 —á–µ–ª–æ–≤–µ–∫?"\n'
            '‚Ä¢ "–ù–∞–π–¥–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞ –¥–ª—è –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è"\n\n'
            '–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ!',
        timestamp: DateTime.now(),
      );

  /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
  AIMessage _handleGreetingIntent() => AIMessage(
        id: _generateMessageId(),
        type: AIMessageType.assistant,
        content: '–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. üéâ\n\n'
            '–Ø –ø–æ–º–æ–≥—É –≤–∞–º:\n'
            '‚Ä¢ –ù–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤\n'
            '‚Ä¢ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω—ã–π –±—é–¥–∂–µ—Ç\n'
            '‚Ä¢ –î–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏\n\n'
            '–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ!',
        timestamp: DateTime.now(),
      );

  /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å
  AIMessage _handleUnknownIntent(String message) => AIMessage(
        id: _generateMessageId(),
        type: AIMessageType.assistant,
        content:
            '–Ø –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —ç—Ç–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:\n\n'
            '‚Ä¢ "–ù–∞–π–¥–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞ –¥–ª—è —Å–≤–∞–¥—å–±—ã"\n'
            '‚Ä¢ "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –≤–µ–¥—É—â–∏–π?"\n'
            '‚Ä¢ "–ü–æ–¥–±–µ—Ä–∏ DJ –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–∞"',
        timestamp: DateTime.now(),
      );

  /// –ò–∑–≤–ª–µ—á—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
  SpecialistCategory? _extractCategory(String message) {
    final categoryMap = {
      '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ': SpecialistCategory.photographer,
      '–≤–∏–¥–µ–æ–≥—Ä–∞—Ñ': SpecialistCategory.videographer,
      'dj': SpecialistCategory.dj,
      '–≤–µ–¥—É—â–∏–π': SpecialistCategory.host,
      '–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä': SpecialistCategory.decorator,
      '–º—É–∑—ã–∫–∞–Ω—Ç': SpecialistCategory.musician,
      '–∞–Ω–∏–º–∞—Ç–æ—Ä': SpecialistCategory.animator,
      '—Ñ–ª–æ—Ä–∏—Å—Ç': SpecialistCategory.florist,
      '–≤–∏–∑–∞–∂–∏—Å—Ç': SpecialistCategory.makeup,
      '–ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä': SpecialistCategory.hairstylist,
    };

    for (final entry in categoryMap.entries) {
      if (message.contains(entry.key)) {
        return entry.value;
      }
    }
    return null;
  }

  /// –ò–∑–≤–ª–µ—á—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
  String? _extractLocation(String message) {
    final locations = [
      '–º–æ—Å–∫–≤–∞',
      '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥',
      '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥',
      '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫',
    ];
    for (final location in locations) {
      if (message.contains(location)) {
        return location;
      }
    }
    return null;
  }

  /// –ò–∑–≤–ª–µ—á—å —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
  String? _extractEventType(String message) {
    final eventTypes = [
      '—Å–≤–∞–¥—å–±–∞',
      '–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è',
      '–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤',
      '–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è',
    ];
    for (final eventType in eventTypes) {
      if (message.contains(eventType)) {
        return eventType;
      }
    }
    return null;
  }

  /// –ò–∑–≤–ª–µ—á—å –±—é–¥–∂–µ—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
  double? _extractBudget(String message) {
    final regex = RegExp(r'(\d+)\s*(—Ç—ã—Å—è—á|—Ç—ã—Å|–∫|—Ä—É–±–ª–µ–π|—Ä—É–±)');
    final match = regex.firstMatch(message);
    if (match != null) {
      final amount = double.tryParse(match.group(1) ?? '');
      if (amount != null) {
        return amount * 1000; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ä—É–±–ª–∏
      }
    }
    return null;
  }

  /// –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç–≤–µ—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
  String _buildSpecialistRecommendationResponse(
    List<Specialist> specialists,
    AIIntent intent,
  ) {
    final buffer = StringBuffer();

    if (intent.category != null) {
      buffer.writeln(
        '–í–æ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ ${intent.category!.displayName.toLowerCase()}—ã –¥–ª—è –≤–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n',
      );
    } else {
      buffer.writeln('–í–æ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã:\n');
    }

    for (var i = 0; i < specialists.length; i++) {
      final specialist = specialists[i];
      buffer.writeln('${i + 1}. **${specialist.name}**');
      buffer.writeln('   ${specialist.categoryDisplayName}');
      buffer.writeln(
        '   ‚≠ê –†–µ–π—Ç–∏–Ω–≥: ${specialist.rating.toStringAsFixed(1)} (${specialist.reviewCount} –æ—Ç–∑—ã–≤–æ–≤)',
      );
      buffer.writeln(
        '   üí∞ –¶–µ–Ω–∞: ${specialist.hourlyRate.toStringAsFixed(0)} ‚ÇΩ/—á–∞—Å',
      );
      if (specialist.description != null &&
          specialist.description!.isNotEmpty) {
        buffer.writeln('   üìù ${specialist.description}');
      }
      buffer.writeln();
    }

    buffer.writeln(
      '–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∫–∞–∫–æ–º-—Ç–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–µ –∏–ª–∏ –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–∏—Ö?',
    );

    return buffer.toString();
  }

  /// –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç–≤–µ—Ç –æ –±—é–¥–∂–µ—Ç–µ
  String _buildBudgetResponse(
    double avgPrice,
    double minPrice,
    double maxPrice,
    AIIntent intent,
  ) {
    final buffer = StringBuffer();

    if (intent.category != null) {
      buffer.writeln(
        '–ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ ${intent.category!.displayName.toLowerCase()}–æ–≤:\n',
      );
    } else {
      buffer.writeln('–ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤:\n');
    }

    buffer.writeln('üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${avgPrice.toStringAsFixed(0)} ‚ÇΩ/—á–∞—Å');
    buffer.writeln('üìâ –û—Ç: ${minPrice.toStringAsFixed(0)} ‚ÇΩ/—á–∞—Å');
    buffer.writeln('üìà –î–æ: ${maxPrice.toStringAsFixed(0)} ‚ÇΩ/—á–∞—Å\n');

    if (intent.eventType != null) {
      final hours = _getEstimatedHours(intent.eventType!);
      final totalMin = minPrice * hours;
      final totalMax = maxPrice * hours;
      final totalAvg = avgPrice * hours;

      buffer.writeln('–î–ª—è ${intent.eventType} (–ø—Ä–∏–º–µ—Ä–Ω–æ $hours —á–∞—Å–æ–≤):');
      buffer.writeln('üí∞ –û–±—â–∏–π –±—é–¥–∂–µ—Ç: ${totalAvg.toStringAsFixed(0)} ‚ÇΩ');
      buffer.writeln('üìâ –û—Ç: ${totalMin.toStringAsFixed(0)} ‚ÇΩ');
      buffer.writeln('üìà –î–æ: ${totalMax.toStringAsFixed(0)} ‚ÇΩ\n');
    }

    buffer.writeln(
      '*–¶–µ–Ω—ã –º–æ–≥—É—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø—ã—Ç–∞, –ª–æ–∫–∞—Ü–∏–∏ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥.*',
    );

    return buffer.toString();
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–ª—è —Ç–∏–ø–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
  int _getEstimatedHours(String eventType) {
    switch (eventType) {
      case '—Å–≤–∞–¥—å–±–∞':
        return 8;
      case '–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è':
        return 4;
      case '–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤':
        return 6;
      case '–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è':
        return 8;
      default:
        return 4;
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Firestore
  Future<void> _saveMessage(String userId, AIMessage message) async {
    await _db
        .collection('ai_chats')
        .doc(userId)
        .collection('messages')
        .doc(message.id)
        .set(message.toMap());
  }

  /// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏—è
  String _generateMessageId() =>
      'msg_${DateTime.now().millisecondsSinceEpoch}_${(DateTime.now().microsecond % 1000).toString().padLeft(3, '0')}';

  /// –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> clearMessageHistory(String userId) async {
    final messages = await _db
        .collection('ai_chats')
        .doc(userId)
        .collection('messages')
        .get();

    final batch = _db.batch();
    for (final doc in messages.docs) {
      batch.delete(doc.reference);
    }
    await batch.commit();
  }
}

/// –ù–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class AIIntent {
  const AIIntent({
    required this.type,
    this.category,
    this.location,
    this.eventType,
    this.budget,
  });

  final AIIntentType type;
  final SpecialistCategory? category;
  final String? location;
  final String? eventType;
  final double? budget;
}

/// –¢–∏–ø—ã –Ω–∞–º–µ—Ä–µ–Ω–∏–π
enum AIIntentType {
  findSpecialist, // –ü–æ–∏—Å–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
  budgetQuestion, // –í–æ–ø—Ä–æ—Å –æ –±—é–¥–∂–µ—Ç–µ
  generalQuestion, // –û–±—â–∏–π –≤–æ–ø—Ä–æ—Å
  greeting, // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
  unknown, // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
}

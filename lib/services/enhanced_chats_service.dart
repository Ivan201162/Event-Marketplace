import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/enhanced_chat.dart';
import '../models/enhanced_message.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —á–∞—Ç–∞–º–∏
class EnhancedChatsService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  /// –ü–æ–ª—É—á–∏—Ç—å —á–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<List<EnhancedChat>> getUserChats(String userId) async {
    try {
      final snapshot = await _firestore
          .collection('chats')
          .where('members', arrayContains: userId)
          .orderBy('updatedAt', descending: true)
          .get();

      return snapshot.docs
          .map(
            (doc) => EnhancedChat.fromMap({
              'id': doc.id,
              ...doc.data(),
            }),
          )
          .toList();
    } on Exception catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
      return [];
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
  Future<List<EnhancedMessage>> getChatMessages(
    String chatId, {
    int limit = 50,
    DocumentSnapshot? startAfter,
  }) async {
    try {
      Query query = _firestore
          .collection('chats')
          .doc(chatId)
          .collection('messages')
          .orderBy('createdAt', descending: true)
          .limit(limit);

      if (startAfter != null) {
        query = query.startAfterDocument(startAfter);
      }

      final snapshot = await query.get();

      return snapshot.docs
          .map(
            (doc) => EnhancedMessage.fromMap({
              'id': doc.id,
              ...(doc.data()! as Map<String, dynamic>),
            }),
          )
          .toList();
    } on Exception catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞: $e');
      return [];
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
  Future<String> sendMessage(EnhancedMessage message) async {
    try {
      final docRef = await _firestore
          .collection('chats')
          .doc(message.chatId)
          .collection('messages')
          .add(message.toMap());

      // –û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
      await _firestore.collection('chats').doc(message.chatId).update({
        'lastMessage': {
          'id': docRef.id,
          'senderId': message.senderId,
          'text': message.text,
          'type': message.type.value,
          'createdAt': message.createdAt.millisecondsSinceEpoch,
          'attachments': message.attachments.map((a) => a.toMap()).toList(),
        },
        'updatedAt': FieldValue.serverTimestamp(),
      });

      return docRef.id;
    } on Exception catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: $e');
      rethrow;
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  Future<String> sendTextMessage(
    String chatId,
    String senderId,
    String text, {
    MessageReply? replyTo,
  }) async {
    final message = EnhancedMessage(
      id: '', // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
      chatId: chatId,
      senderId: senderId,
      text: text,
      type: MessageType.text,
      createdAt: DateTime.now(),
      replyTo: replyTo,
    );

    return sendMessage(message);
  }

  /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
  Future<String> sendMediaMessage(
    String chatId,
    String senderId,
    List<MessageAttachment> attachments, {
    String? caption,
    MessageReply? replyTo,
  }) async {
    final messageType = _getMessageTypeFromAttachments(attachments);

    final message = EnhancedMessage(
      id: '', // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
      chatId: chatId,
      senderId: senderId,
      text: caption ?? '',
      type: messageType,
      createdAt: DateTime.now(),
      attachments: attachments,
      replyTo: replyTo,
    );

    return sendMessage(message);
  }

  /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  Future<String> sendVoiceMessage(
    String chatId,
    String senderId,
    MessageAttachment voiceAttachment, {
    MessageReply? replyTo,
  }) async {
    final message = EnhancedMessage(
      id: '', // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
      chatId: chatId,
      senderId: senderId,
      text: 'üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
      type: MessageType.audio,
      createdAt: DateTime.now(),
      attachments: [voiceAttachment],
      replyTo: replyTo,
    );

    return sendMessage(message);
  }

  /// –ü–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
  Future<String> forwardMessage(
    String originalMessageId,
    String originalChatId,
    String newChatId,
    String senderId,
  ) async {
    try {
      // –ü–æ–ª—É—á–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      final originalDoc = await _firestore
          .collection('chats')
          .doc(originalChatId)
          .collection('messages')
          .doc(originalMessageId)
          .get();

      if (!originalDoc.exists) {
        throw Exception('–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      }

      final originalMessage = EnhancedMessage.fromMap({
        'id': originalDoc.id,
        ...originalDoc.data()!,
      });

      // –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      final forwardedMessage = originalMessage.copyWith(
        id: '', // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        chatId: newChatId,
        senderId: senderId,
        text: '–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        forwardedFrom: MessageForward(
          originalMessageId: originalMessageId,
          originalChatId: originalChatId,
          originalSenderId: originalMessage.senderId,
          forwardedAt: DateTime.now(),
        ),
        createdAt: DateTime.now(),
      );

      return await sendMessage(forwardedMessage);
    } on Exception catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: $e');
      rethrow;
    }
  }

  /// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
  Future<void> editMessage(
    String chatId,
    String messageId,
    String newText,
  ) async {
    try {
      await _firestore
          .collection('chats')
          .doc(chatId)
          .collection('messages')
          .doc(messageId)
          .update({
        'text': newText,
        'editedAt': FieldValue.serverTimestamp(),
      });
    } on Exception catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: $e');
      rethrow;
    }
  }

  /// –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
  Future<void> deleteMessage(String chatId, String messageId) async {
    try {
      await _firestore
          .collection('chats')
          .doc(chatId)
          .collection('messages')
          .doc(messageId)
          .update({
        'deletedAt': FieldValue.serverTimestamp(),
        'text': '–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ',
      });
    } on Exception catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: $e');
      rethrow;
    }
  }

  /// –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
  Future<void> addReaction(
    String chatId,
    String messageId,
    String userId,
    String emoji,
  ) async {
    try {
      await _firestore
          .collection('chats')
          .doc(chatId)
          .collection('messages')
          .doc(messageId)
          .update({
        'reactions.$emoji': FieldValue.arrayUnion([userId]),
      });
    } on Exception catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏: $e');
      rethrow;
    }
  }

  /// –£–¥–∞–ª–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é —Å —Å–æ–æ–±—â–µ–Ω–∏—è
  Future<void> removeReaction(
    String chatId,
    String messageId,
    String userId,
    String emoji,
  ) async {
    try {
      await _firestore
          .collection('chats')
          .doc(chatId)
          .collection('messages')
          .doc(messageId)
          .update({
        'reactions.$emoji': FieldValue.arrayRemove([userId]),
      });
    } on Exception catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏: $e');
      rethrow;
    }
  }

  /// –û—Ç–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
  Future<void> markMessagesAsRead(
    String chatId,
    String userId,
    List<String> messageIds,
  ) async {
    try {
      final batch = _firestore.batch();
      final now = DateTime.now();

      for (final messageId in messageIds) {
        final messageRef =
            _firestore.collection('chats').doc(chatId).collection('messages').doc(messageId);

        batch.update(messageRef, {
          'readBy.$userId': now.millisecondsSinceEpoch,
        });
      }

      await batch.commit();
    } on Exception catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: $e');
      rethrow;
    }
  }

  /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç
  Future<String> createChat(EnhancedChat chat) async {
    try {
      final docRef = await _firestore.collection('chats').add(chat.toMap());
      return docRef.id;
    } on Exception catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞: $e');
      rethrow;
    }
  }

  /// –°–æ–∑–¥–∞—Ç—å –ª–∏—á–Ω—ã–π —á–∞—Ç
  Future<String> createDirectChat(String userId1, String userId2) async {
    try {
      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —á–∞—Ç –º–µ–∂–¥—É —ç—Ç–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
      final existingChats = await _firestore
          .collection('chats')
          .where('type', isEqualTo: ChatType.direct.value)
          .where('members', arrayContains: userId1)
          .get();

      for (final doc in existingChats.docs) {
        final chat = EnhancedChat.fromMap({
          'id': doc.id,
          ...doc.data(),
        });

        if (chat.members.any((member) => member.userId == userId2)) {
          return doc.id; // –ß–∞—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        }
      }

      // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç
      final chat = EnhancedChat(
        id: '', // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        type: ChatType.direct,
        members: [
          ChatMember(
            userId: userId1,
            role: ChatMemberRole.member,
            joinedAt: DateTime.now(),
          ),
          ChatMember(
            userId: userId2,
            role: ChatMemberRole.member,
            joinedAt: DateTime.now(),
          ),
        ],
        createdAt: DateTime.now(),
      );

      return await createChat(chat);
    } on Exception catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞: $e');
      rethrow;
    }
  }

  /// –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
  Future<String> createGroupChat(
    String creatorId,
    String name,
    List<String> memberIds, {
    String? description,
    String? avatarUrl,
  }) async {
    try {
      final members = <ChatMember>[
        ChatMember(
          userId: creatorId,
          role: ChatMemberRole.owner,
          joinedAt: DateTime.now(),
        ),
        ...memberIds.map(
          (userId) => ChatMember(
            userId: userId,
            role: ChatMemberRole.member,
            joinedAt: DateTime.now(),
          ),
        ),
      ];

      final chat = EnhancedChat(
        id: '', // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        type: ChatType.group,
        members: members,
        createdAt: DateTime.now(),
        name: name,
        description: description,
        avatarUrl: avatarUrl,
      );

      return await createChat(chat);
    } on Exception catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞: $e');
      rethrow;
    }
  }

  /// –ó–∞–∫—Ä–µ–ø–∏—Ç—å —á–∞—Ç
  Future<void> pinChat(String chatId, String userId) async {
    try {
      await _firestore.collection('chats').doc(chatId).update({
        'isPinned': true,
        'updatedAt': FieldValue.serverTimestamp(),
      });
    } on Exception catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è —á–∞—Ç–∞: $e');
      rethrow;
    }
  }

  /// –û—Ç–∫—Ä–µ–ø–∏—Ç—å —á–∞—Ç
  Future<void> unpinChat(String chatId, String userId) async {
    try {
      await _firestore.collection('chats').doc(chatId).update({
        'isPinned': false,
        'updatedAt': FieldValue.serverTimestamp(),
      });
    } on Exception catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏—è —á–∞—Ç–∞: $e');
      rethrow;
    }
  }

  /// –ó–∞–≥–ª—É—à–∏—Ç—å —á–∞—Ç
  Future<void> muteChat(String chatId, String userId) async {
    try {
      await _firestore.collection('chats').doc(chatId).update({
        'isMuted': true,
        'updatedAt': FieldValue.serverTimestamp(),
      });
    } on Exception catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –∑–∞–≥–ª—É—à–µ–Ω–∏—è —á–∞—Ç–∞: $e');
      rethrow;
    }
  }

  /// –†–∞–∑–≥–ª—É—à–∏—Ç—å —á–∞—Ç
  Future<void> unmuteChat(String chatId, String userId) async {
    try {
      await _firestore.collection('chats').doc(chatId).update({
        'isMuted': false,
        'updatedAt': FieldValue.serverTimestamp(),
      });
    } on Exception catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ —Ä–∞–∑–≥–ª—É—à–µ–Ω–∏—è —á–∞—Ç–∞: $e');
      rethrow;
    }
  }

  /// –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç
  Future<void> archiveChat(String chatId, String userId) async {
    try {
      await _firestore.collection('chats').doc(chatId).update({
        'isArchived': true,
        'updatedAt': FieldValue.serverTimestamp(),
      });
    } on Exception catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞: $e');
      rethrow;
    }
  }

  /// –†–∞–∑–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç
  Future<void> unarchiveChat(String chatId, String userId) async {
    try {
      await _firestore.collection('chats').doc(chatId).update({
        'isArchived': false,
        'updatedAt': FieldValue.serverTimestamp(),
      });
    } on Exception catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ —Ä–∞–∑–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞: $e');
      rethrow;
    }
  }

  /// –ü–æ–∏—Å–∫ –ø–æ —á–∞—Ç–∞–º
  Future<List<EnhancedChat>> searchChats(String userId, String query) async {
    try {
      final snapshot =
          await _firestore.collection('chats').where('members', arrayContains: userId).get();

      final chats = snapshot.docs
          .map(
            (doc) => EnhancedChat.fromMap({
              'id': doc.id,
              ...doc.data(),
            }),
          )
          .toList();

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
      return chats.where((chat) {
        final nameMatch = chat.name?.toLowerCase().contains(query.toLowerCase()) ?? false;
        final lastMessageMatch =
            chat.lastMessage?.text.toLowerCase().contains(query.toLowerCase()) ?? false;
        return nameMatch || lastMessageMatch;
      }).toList();
    } on Exception catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —á–∞—Ç–∞–º: $e');
      return [];
    }
  }

  /// –ü–æ–∏—Å–∫ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º –≤ —á–∞—Ç–µ
  Future<List<EnhancedMessage>> searchMessages(
    String chatId,
    String query,
  ) async {
    try {
      final snapshot = await _firestore
          .collection('chats')
          .doc(chatId)
          .collection('messages')
          .where('text', isGreaterThanOrEqualTo: query)
          .where('text', isLessThan: '${query}z')
          .get();

      return snapshot.docs
          .map(
            (doc) => EnhancedMessage.fromMap({
              'id': doc.id,
              ...doc.data(),
            }),
          )
          .toList();
    } on Exception catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º: $e');
      return [];
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–ª–æ–∂–µ–Ω–∏–π
  MessageType _getMessageTypeFromAttachments(
    List<MessageAttachment> attachments,
  ) {
    if (attachments.isEmpty) return MessageType.text;

    final firstAttachment = attachments.first;
    switch (firstAttachment.type) {
      case MessageAttachmentType.image:
        return MessageType.image;
      case MessageAttachmentType.video:
        return MessageType.video;
      case MessageAttachmentType.audio:
      case MessageAttachmentType.voice:
        return MessageType.audio;
      case MessageAttachmentType.document:
        return MessageType.document;
      case MessageAttachmentType.sticker:
        return MessageType.sticker;
    }
  }
}

import 'package:cloud_firestore/cloud_firestore.dart';

import '../models/post.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Å—Ç–∞–º–∏
class PostService {
  factory PostService() => _instance;
  PostService._internal();
  static final PostService _instance = PostService._internal();

  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final String _collection = 'posts';

  /// –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
  Future<List<Post>> getPostsBySpecialist(String specialistId) async {
    try {
      final snapshot = await _firestore
          .collection(_collection)
          .where('specialistId', isEqualTo: specialistId)
          .orderBy('createdAt', descending: true)
          .get();

      return snapshot.docs.map(Post.fromDocument).toList();
    } catch (e) {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      return _getTestPosts(specialistId);
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ—Å—Ç—ã
  Future<List<Post>> getAllPosts() async {
    try {
      final snapshot = await _firestore
          .collection(_collection)
          .orderBy('createdAt', descending: true)
          .limit(50)
          .get();

      return snapshot.docs.map(Post.fromDocument).toList();
    } catch (e) {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      return _getTestPosts('test_specialist');
    }
  }

  /// –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç
  Future<String> createPost(Post post) async {
    try {
      final docRef = await _firestore.collection(_collection).add(post.toMap());
      return docRef.id;
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞: $e');
    }
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç
  Future<void> updatePost(String postId, Map<String, dynamic> updates) async {
    try {
      await _firestore.collection(_collection).doc(postId).update(updates);
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞: $e');
    }
  }

  /// –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç
  Future<void> deletePost(String postId) async {
    try {
      await _firestore.collection(_collection).doc(postId).delete();
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞: $e');
    }
  }

  /// –õ–∞–π–∫–Ω—É—Ç—å –ø–æ—Å—Ç
  Future<void> likePost(String postId, String userId) async {
    try {
      final postRef = _firestore.collection(_collection).doc(postId);
      await _firestore.runTransaction((transaction) async {
        final snapshot = await transaction.get(postRef);
        if (!snapshot.exists) return;

        final post = Post.fromDocument(snapshot);
        final likedBy = List<String>.from(post.likedBy);

        if (likedBy.contains(userId)) {
          likedBy.remove(userId);
        } else {
          likedBy.add(userId);
        }

        transaction.update(postRef, {
          'likedBy': likedBy,
          'likesCount': likedBy.length,
        });
      });
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –ª–∞–π–∫–∞ –ø–æ—Å—Ç–∞: $e');
    }
  }

  /// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ª–∞–π–∫ –ø–æ—Å—Ç–∞ (–∞–ª–∏–∞—Å –¥–ª—è likePost)
  Future<void> toggleLike(String postId, String userId) async {
    return likePost(postId, userId);
  }

  /// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  List<Post> _getTestPosts(String specialistId) => [
        Post(
          id: '1',
          specialistId: specialistId,
          text: '–û—Ç–ª–∏—á–Ω–∞—è —Å–≤–∞–¥–µ–±–Ω–∞—è —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—è –≤ –ø–∞—Ä–∫–µ! üå∏',
          mediaUrls: [
            'https://placehold.co/400x400/FF6B6B/white?text=Wedding+1',
          ],
          createdAt: DateTime.now().subtract(const Duration(days: 1)),
          likesCount: 42,
          commentsCount: 8,
          likedBy: ['user1', 'user2', 'user3'],
        ),
        Post(
          id: '2',
          specialistId: specialistId,
          text: '–ü–æ—Ä—Ç—Ä–µ—Ç–Ω–∞—è —Å—ä—ë–º–∫–∞ –≤ —Å—Ç—É–¥–∏–∏ —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º',
          mediaUrls: [
            'https://placehold.co/400x400/4ECDC4/white?text=Portrait+1',
          ],
          createdAt: DateTime.now().subtract(const Duration(days: 3)),
          likesCount: 28,
          commentsCount: 5,
          likedBy: ['user1', 'user4'],
        ),
        Post(
          id: '3',
          specialistId: specialistId,
          text: '–°–µ–º–µ–π–Ω–∞—è —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—è –Ω–∞ –ø—Ä–∏—Ä–æ–¥–µ. –°—á–∞—Å—Ç—å–µ –≤ –∫–∞–∂–¥–æ–º –∫–∞–¥—Ä–µ! ‚ù§Ô∏è',
          mediaUrls: [
            'https://placehold.co/400x400/45B7D1/white?text=Family+1',
          ],
          createdAt: DateTime.now().subtract(const Duration(days: 5)),
          likesCount: 67,
          commentsCount: 12,
          likedBy: ['user2', 'user3', 'user5'],
        ),
        Post(
          id: '4',
          specialistId: specialistId,
          text: '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è —Å—ä—ë–º–∫–∞ –¥–ª—è IT-–∫–æ–º–ø–∞–Ω–∏–∏',
          mediaUrls: [
            'https://placehold.co/400x400/96CEB4/white?text=Corporate+1',
          ],
          createdAt: DateTime.now().subtract(const Duration(days: 7)),
          likesCount: 15,
          commentsCount: 3,
          likedBy: ['user1'],
        ),
        Post(
          id: '5',
          specialistId: specialistId,
          text: '–î–µ—Ç—Å–∫–∞—è —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—è –≤ —Å—Ç—É–¥–∏–∏. –¢–∞–∫–∏–µ –º–∏–ª—ã–µ –º–∞–ª—ã—à–∏! üë∂',
          mediaUrls: ['https://placehold.co/400x400/FFEAA7/white?text=Kids+1'],
          createdAt: DateTime.now().subtract(const Duration(days: 10)),
          likesCount: 89,
          commentsCount: 18,
          likedBy: ['user1', 'user2', 'user3', 'user4', 'user5'],
        ),
      ];
}

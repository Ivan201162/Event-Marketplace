import 'dart:io';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:image_picker/image_picker.dart';
import 'package:video_player/video_player.dart';

class ChatMediaService {
  final FirebaseStorage _storage = FirebaseStorage.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final ImagePicker _picker = ImagePicker();

  /// –í—ã–±—Ä–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏
  Future<File?> pickImage() async {
    try {
      final image = await _picker.pickImage(
        source: ImageSource.gallery,
        maxWidth: 1920,
        maxHeight: 1080,
        imageQuality: 85,
      );
      return image != null ? File(image.path) : null;
    } on Exception {
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: $e');
      return null;
    }
  }

  /// –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ —Å –∫–∞–º–µ—Ä—ã
  Future<File?> takePhoto() async {
    try {
      final image = await _picker.pickImage(
        source: ImageSource.camera,
        maxWidth: 1920,
        maxHeight: 1080,
        imageQuality: 85,
      );
      return image != null ? File(image.path) : null;
    } on Exception {
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—ä–µ–º–∫–µ —Ñ–æ—Ç–æ: $e');
      return null;
    }
  }

  /// –í—ã–±—Ä–∞—Ç—å –≤–∏–¥–µ–æ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏
  Future<File?> pickVideo() async {
    try {
      final video = await _picker.pickVideo(
        source: ImageSource.gallery,
        maxDuration: const Duration(minutes: 5),
      );
      return video != null ? File(video.path) : null;
    } on Exception {
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–∏–¥–µ–æ: $e');
      return null;
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Firebase Storage
  Future<String?> uploadImage(File imageFile, String chatId) async {
    try {
      final timestamp = DateTime.now().millisecondsSinceEpoch;
      final fileName = 'chat_${chatId}_image_$timestamp.jpg';
      final ref = _storage.ref().child('chat_images').child(fileName);

      final uploadTask = ref.putFile(imageFile);
      final snapshot = await uploadTask;
      final downloadUrl = await snapshot.ref.getDownloadURL();

      return downloadUrl;
    } on Exception {
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: $e');
      return null;
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ –≤ Firebase Storage
  Future<String?> uploadVideo(File videoFile, String chatId) async {
    try {
      final timestamp = DateTime.now().millisecondsSinceEpoch;
      final fileName = 'chat_${chatId}_video_$timestamp.mp4';
      final ref = _storage.ref().child('chat_videos').child(fileName);

      final uploadTask = ref.putFile(videoFile);
      final snapshot = await uploadTask;
      final downloadUrl = await snapshot.ref.getDownloadURL();

      return downloadUrl;
    } on Exception {
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ: $e');
      return null;
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
  Future<bool> sendImageMessage({
    required String chatId,
    required String senderId,
    required String senderName,
    required File imageFile,
  }) async {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      final imageUrl = await uploadImage(imageFile, chatId);
      if (imageUrl == null) return false;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Firestore
      await _firestore.collection('chats').doc(chatId).collection('messages').add({
        'senderId': senderId,
        'senderName': senderName,
        'content': '',
        'type': 'image',
        'imageUrl': imageUrl,
        'timestamp': FieldValue.serverTimestamp(),
        'createdAt': FieldValue.serverTimestamp(),
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
      await _firestore.collection('chats').doc(chatId).update({
        'lastMessage': 'üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
        'lastMessageAt': FieldValue.serverTimestamp(),
        'updatedAt': FieldValue.serverTimestamp(),
      });

      return true;
    } on Exception {
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: $e');
      return false;
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏–¥–µ–æ
  Future<bool> sendVideoMessage({
    required String chatId,
    required String senderId,
    required String senderName,
    required File videoFile,
  }) async {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ
      final videoUrl = await uploadVideo(videoFile, chatId);
      if (videoUrl == null) return false;

      // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é –≤–∏–¥–µ–æ
      final thumbnailUrl = await _generateVideoThumbnail(videoFile);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Firestore
      await _firestore.collection('chats').doc(chatId).collection('messages').add({
        'senderId': senderId,
        'senderName': senderName,
        'content': '',
        'type': 'video',
        'videoUrl': videoUrl,
        'thumbnailUrl': thumbnailUrl,
        'timestamp': FieldValue.serverTimestamp(),
        'createdAt': FieldValue.serverTimestamp(),
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
      await _firestore.collection('chats').doc(chatId).update({
        'lastMessage': 'üé• –í–∏–¥–µ–æ',
        'lastMessageAt': FieldValue.serverTimestamp(),
        'updatedAt': FieldValue.serverTimestamp(),
      });

      return true;
    } on Exception {
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: $e');
      return false;
    }
  }

  /// –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–≤—å—é –≤–∏–¥–µ–æ
  Future<String?> _generateVideoThumbnail(File videoFile) async {
    try {
      final videoPlayerController = VideoPlayerController.file(videoFile);
      await videoPlayerController.initialize();

      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä –≤–∏–¥–µ–æ
      final thumbnail = videoPlayerController.value;
      await videoPlayerController.dispose();

      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã —Å–æ–∑–¥–∞–≤–∞–ª—Å—è thumbnail
      // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º placeholder
      return 'https://picsum.photos/300?random=${DateTime.now().millisecondsSinceEpoch}';
    } on Exception {
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–≤—å—é –≤–∏–¥–µ–æ: $e');
      return null;
    }
  }

  /// –£–¥–∞–ª–∏—Ç—å –º–µ–¥–∏–∞ —Ñ–∞–π–ª
  Future<bool> deleteMedia(String url) async {
    try {
      final ref = _storage.refFromURL(url);
      await ref.delete();
      return true;
    } on Exception {
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ–¥–∏–∞: $e');
      return false;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
  Future<int> getFileSize(File file) async => file.length();

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
  bool isImageFile(String fileName) {
    final imageExtensions = ['jpg', 'jpeg', 'png', 'gif', 'webp'];
    final extension = fileName.split('.').last.toLowerCase();
    return imageExtensions.contains(extension);
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –≤–∏–¥–µ–æ
  bool isVideoFile(String fileName) {
    final videoExtensions = ['mp4', 'avi', 'mov', 'mkv', 'webm'];
    final extension = fileName.split('.').last.toLowerCase();
    return videoExtensions.contains(extension);
  }
}

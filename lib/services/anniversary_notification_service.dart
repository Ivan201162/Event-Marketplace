import 'dart:async';

import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:timezone/data/latest.dart' as tz;
import 'package:timezone/timezone.dart' as tz;

import '../models/customer_portfolio.dart';
import 'customer_portfolio_service.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –≥–æ–¥–æ–≤—â–∏–Ω–∞—Ö
class AnniversaryNotificationService {
  factory AnniversaryNotificationService() => _instance;
  AnniversaryNotificationService._internal();
  static final AnniversaryNotificationService _instance =
      AnniversaryNotificationService._internal();

  final CustomerPortfolioService _portfolioService = CustomerPortfolioService();
  final FlutterLocalNotificationsPlugin _notifications = FlutterLocalNotificationsPlugin();
  Timer? _dailyCheckTimer;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<void> initialize() async {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è timezone
    tz.initializeTimeZones();

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const androidSettings = AndroidInitializationSettings('@mipmap/ic_launcher');
    const iosSettings = DarwinInitializationSettings();

    const initSettings = InitializationSettings(android: androidSettings, iOS: iosSettings);

    await _notifications.initialize(
      initSettings,
      onDidReceiveNotificationResponse: _onNotificationTapped,
    );

    // –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    _startDailyCheck();
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  void _onNotificationTapped(NotificationResponse response) {
    // TODO(developer): –ü–µ—Ä–µ—Ö–æ–¥ –∫ —ç–∫—Ä–∞–Ω—É –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–æ: ${response.payload}');
  }

  /// –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ–¥–æ–≤—â–∏–Ω
  void _startDailyCheck() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00
    _scheduleDailyCheck();

    // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    _checkAnniversaries();
  }

  /// –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
  void _scheduleDailyCheck() {
    final now = DateTime.now();
    final nextCheck = DateTime(now.year, now.month, now.day, 9);

    if (nextCheck.isBefore(now)) {
      nextCheck.add(const Duration(days: 1));
    }

    final duration = nextCheck.difference(now);

    _dailyCheckTimer?.cancel();
    _dailyCheckTimer = Timer(duration, () {
      _checkAnniversaries();
      _scheduleDailyCheck(); // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    });
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ–¥–æ–≤—â–∏–Ω –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<void> _checkAnniversaries() async {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ —Å –≥–æ–¥–æ–≤—â–∏–Ω–∞–º–∏ —Å–µ–≥–æ–¥–Ω—è
      final customersWithAnniversaries = await _portfolioService
          .getCustomersWithAnniversariesToday();

      for (final customer in customersWithAnniversaries) {
        await _sendAnniversaryNotification(customer);
      }

      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ —Å –≥–æ–¥–æ–≤—â–∏–Ω–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π
      final customersWithUpcomingAnniversaries = await _portfolioService
          .getCustomersWithUpcomingAnniversaries(7);

      for (final customer in customersWithUpcomingAnniversaries) {
        await _sendUpcomingAnniversaryNotification(customer);
      }
    } on Exception {
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ–¥–æ–≤—â–∏–Ω: $e');
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ–¥–æ–≤—â–∏–Ω–µ —Å–µ–≥–æ–¥–Ω—è
  Future<void> _sendAnniversaryNotification(CustomerPortfolio customer) async {
    if (!customer.anniversaryRemindersEnabled) return;

    final notificationId = customer.id.hashCode;
    const channelId = 'anniversary_notifications';
    const channelName = '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≥–æ–¥–æ–≤—â–∏–Ω–∞—Ö';
    const channelDescription = '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ–¥–æ–≤—â–∏–Ω–∞—Ö –∏ –≤–∞–∂–Ω—ã—Ö –¥–∞—Ç–∞—Ö';

    const androidDetails = AndroidNotificationDetails(
      channelId,
      channelName,
      channelDescription: channelDescription,
      importance: Importance.high,
      priority: Priority.high,
      icon: '@mipmap/ic_launcher',
    );

    const iosDetails = DarwinNotificationDetails(
      presentAlert: true,
      presentBadge: true,
      presentSound: true,
    );

    const details = NotificationDetails(android: androidDetails, iOS: iosDetails);

    const title = 'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –≥–æ–¥–æ–≤—â–∏–Ω–æ–π!';
    final body = customer.weddingDate != null
        ? '–°–µ–≥–æ–¥–Ω—è ${customer.yearsMarried} –ª–µ—Ç —Å–æ –¥–Ω—è —Å–≤–∞–¥—å–±—ã! –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?'
        : '–°–µ–≥–æ–¥–Ω—è –≤–∞–∂–Ω–∞—è –¥–∞—Ç–∞! –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?';

    await _notifications.show(
      notificationId,
      title,
      body,
      details,
      payload: 'anniversary_${customer.id}',
    );
  }

  /// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–µ–π—Å—è –≥–æ–¥–æ–≤—â–∏–Ω–µ
  Future<void> _sendUpcomingAnniversaryNotification(CustomerPortfolio customer) async {
    if (!customer.anniversaryRemindersEnabled) return;

    final upcomingAnniversaries = customer.upcomingAnniversaries;
    if (upcomingAnniversaries.isEmpty) return;

    final nextAnniversary = upcomingAnniversaries.first;
    final daysUntil = nextAnniversary.difference(DateTime.now()).inDays;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 3 –¥–Ω—è –¥–æ –≥–æ–¥–æ–≤—â–∏–Ω—ã
    if (daysUntil == 3) {
      final notificationId = customer.id.hashCode + 1000; // –î—Ä—É–≥–æ–π ID –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
      const channelId = 'upcoming_anniversary_notifications';
      const channelName = '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –≥–æ–¥–æ–≤—â–∏–Ω—ã';
      const channelDescription = '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è –≥–æ–¥–æ–≤—â–∏–Ω–∞—Ö';

      const androidDetails = AndroidNotificationDetails(
        channelId,
        channelName,
        channelDescription: channelDescription,
        importance: Importance.medium,
        priority: Priority.medium,
        icon: '@mipmap/ic_launcher',
      );

      const iosDetails = DarwinNotificationDetails(
        presentAlert: true,
        presentBadge: true,
        presentSound: true,
      );

      const details = NotificationDetails(android: androidDetails, iOS: iosDetails);

      const title = 'üìÖ –°–∫–æ—Ä–æ –≥–æ–¥–æ–≤—â–∏–Ω–∞!';
      final body = '–ß–µ—Ä–µ–∑ $daysUntil –¥–Ω–µ–π –≥–æ–¥–æ–≤—â–∏–Ω–∞! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.';

      await _notifications.show(
        notificationId,
        title,
        body,
        details,
        payload: 'upcoming_anniversary_${customer.id}',
      );
    }
  }

  /// –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ–¥–æ–≤—â–∏–Ω–µ
  Future<void> scheduleAnniversaryNotification(
    CustomerPortfolio customer,
    DateTime anniversary,
  ) async {
    if (!customer.anniversaryRemindersEnabled) return;

    final now = DateTime.now();
    final thisYear = DateTime(now.year, anniversary.month, anniversary.day, 9);
    final nextYear = DateTime(now.year + 1, anniversary.month, anniversary.day, 9);

    DateTime scheduledDate;
    if (thisYear.isAfter(now)) {
      scheduledDate = thisYear;
    } else {
      scheduledDate = nextYear;
    }

    final notificationId = customer.id.hashCode + anniversary.hashCode;
    const channelId = 'scheduled_anniversary_notifications';
    const channelName = '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥–æ–¥–æ–≤—â–∏–Ω—ã';
    const channelDescription = '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–æ–¥–æ–≤—â–∏–Ω–∞—Ö';

    const androidDetails = AndroidNotificationDetails(
      channelId,
      channelName,
      channelDescription: channelDescription,
      importance: Importance.high,
      priority: Priority.high,
      icon: '@mipmap/ic_launcher',
    );

    const iosDetails = DarwinNotificationDetails(
      presentAlert: true,
      presentBadge: true,
      presentSound: true,
    );

    const details = NotificationDetails(android: androidDetails, iOS: iosDetails);

    const title = 'üéâ –ì–æ–¥–æ–≤—â–∏–Ω–∞!';
    const body = '–°–µ–≥–æ–¥–Ω—è –≥–æ–¥–æ–≤—â–∏–Ω–∞! –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?';

    await _notifications.zonedSchedule(
      notificationId,
      title,
      body,
      tz.TZDateTime.from(scheduledDate, tz.local),
      details,
      payload: 'scheduled_anniversary_${customer.id}',
      uiLocalNotificationDateInterpretation: UILocalNotificationDateInterpretation.absoluteTime,
      matchDateTimeComponents: DateTimeComponents.time,
    );
  }

  /// –û—Ç–º–µ–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ–¥–æ–≤—â–∏–Ω–µ
  Future<void> cancelAnniversaryNotification(String customerId, DateTime anniversary) async {
    final notificationId = customerId.hashCode + anniversary.hashCode;
    await _notifications.cancel(notificationId);
  }

  /// –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞
  Future<void> cancelAllNotificationsForCustomer(String customerId) async {
    // –û—Ç–º–µ–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await _notifications.cancel(customerId.hashCode);
    await _notifications.cancel(customerId.hashCode + 1000);

    // –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–ø—Ä–∏–º–µ—Ä–Ω–æ)
    for (var i = 0; i < 100; i++) {
      await _notifications.cancel(customerId.hashCode + i);
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  Future<void> sendTestNotification() async {
    const androidDetails = AndroidNotificationDetails(
      'test_channel',
      '–¢–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
      channelDescription: '–¢–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏',
      importance: Importance.high,
      priority: Priority.high,
    );

    const iosDetails = DarwinNotificationDetails(
      presentAlert: true,
      presentBadge: true,
      presentSound: true,
    );

    const details = NotificationDetails(android: androidDetails, iOS: iosDetails);

    await _notifications.show(
      999,
      '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
      '–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∑–∞–∫–∞–∑—á–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!',
      details,
    );
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  Future<bool> requestPermissions() async {
    final androidPlugin = _notifications
        .resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>();
    final iosPlugin = _notifications
        .resolvePlatformSpecificImplementation<IOSFlutterLocalNotificationsPlugin>();

    const granted = true;

    if (androidPlugin != null) {
      final granted = await androidPlugin.requestNotificationsPermission();
      if (!granted) return false;
    }

    if (iosPlugin != null) {
      final granted = await iosPlugin.requestPermissions(alert: true, badge: true, sound: true);
      if (!granted) return false;
    }

    return granted;
  }

  /// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
  void dispose() {
    _dailyCheckTimer?.cancel();
  }
}

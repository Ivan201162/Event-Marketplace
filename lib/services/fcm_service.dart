import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:go_router/go_router.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Firebase Cloud Messaging
class FCMService {
  static final FirebaseMessaging _firebaseMessaging = FirebaseMessaging.instance;
  static final FlutterLocalNotificationsPlugin _localNotifications =
      FlutterLocalNotificationsPlugin();
  static final GlobalKey<NavigatorState> navigatorKey = GlobalKey<NavigatorState>();

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FCM
  static Future<void> initialize() async {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const androidSettings = AndroidInitializationSettings('@mipmap/ic_launcher');
    const iosSettings = DarwinInitializationSettings();
    const initSettings = InitializationSettings(
      android: androidSettings,
      iOS: iosSettings,
    );

    await _localNotifications.initialize(
      initSettings,
      onDidReceiveNotificationResponse: _onNotificationTapped,
    );

    // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    await _requestPermissions();

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    _setupMessageHandlers();

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    await _getToken();
  }

  /// –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  static Future<void> _requestPermissions() async {
    final settings = await _firebaseMessaging.requestPermission();

    debugPrint('–†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${settings.authorizationStatus}');
  }

  /// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
  static void _setupMessageHandlers() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ foreground
    FirebaseMessaging.onMessage.listen(_handleForegroundMessage);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ background
    FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ)
    FirebaseMessaging.onMessageOpenedApp.listen(_handleNotificationTap);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ)
    FirebaseMessaging.instance.getInitialMessage().then((message) {
      if (message != null) {
        _saveNotificationToHistory(message);
        _handleNotificationTap(message);
      }
    });
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ foreground
  static Future<void> _handleForegroundMessage(RemoteMessage message) async {
    debugPrint(
      'üì¨ –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ foreground: ${message.notification?.title}',
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    await _saveNotificationToHistory(message);

    final notification = message.notification;
    if (notification != null) {
      await _localNotifications.show(
        notification.hashCode,
        notification.title,
        notification.body,
        NotificationDetails(
          android: AndroidNotificationDetails(
            'event_channel',
            'Event Marketplace',
            channelDescription: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç Event Marketplace',
            importance: Importance.max,
            priority: Priority.high,
            icon: '@mipmap/ic_launcher',
            color: _getNotificationColor(message.data['type'] ?? 'system'),
          ),
          iOS: const DarwinNotificationDetails(
            presentAlert: true,
            presentBadge: true,
            presentSound: true,
          ),
        ),
        payload: _createPayload(message.data),
      );
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  static void _handleNotificationTap(RemoteMessage message) {
    debugPrint('üîî –ù–∞–∂–∞—Ç–æ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${message.notification?.title}');

    final data = message.data;
    if (data.containsKey('type')) {
      _navigateToScreen(data['type'], data);
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  static void _onNotificationTapped(NotificationResponse response) {
    debugPrint('üîî –ù–∞–∂–∞—Ç–æ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${response.payload}');

    if (response.payload != null) {
      _navigateToScreenFromPayload(response.payload!);
    }
  }

  /// –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —ç–∫—Ä–∞–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  static void _navigateToScreen(String type, Map<String, dynamic> data) {
    debugPrint('–ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —ç–∫—Ä–∞–Ω—É —Ç–∏–ø–∞: $type —Å –¥–∞–Ω–Ω—ã–º–∏: $data');

    final context = navigatorKey.currentContext;
    if (context == null) return;

    switch (type) {
      case 'chat':
        final chatId = data['id'] ?? data['chatId'];
        if (chatId != null) {
          context.push('/chat/$chatId');
        }
        break;
      case 'post':
        final postId = data['id'] ?? data['postId'];
        if (postId != null) {
          context.push('/post/$postId');
        }
        break;
      case 'request':
        final requestId = data['id'] ?? data['requestId'];
        if (requestId != null) {
          context.push('/request/$requestId');
        } else {
          context.go('/requests');
        }
        break;
      case 'profile':
        final userId = data['id'] ?? data['userId'];
        if (userId != null) {
          context.push('/profile/$userId');
        }
        break;
      case 'like':
      case 'comment':
        final postId = data['id'] ?? data['postId'];
        if (postId != null) {
          context.push('/post/$postId');
        }
        break;
      case 'follow':
        final userId = data['id'] ?? data['userId'];
        if (userId != null) {
          context.push('/profile/$userId');
        }
        break;
      default:
        context.go('/notifications');
    }
  }

  /// –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —ç–∫—Ä–∞–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤–µ payload
  static void _navigateToScreenFromPayload(String payload) {
    try {
      final data = <String, dynamic>{};
      final pairs = payload.split('&');
      for (final pair in pairs) {
        final keyValue = pair.split('=');
        if (keyValue.length == 2) {
          data[keyValue[0]] = keyValue[1];
        }
      }

      if (data.containsKey('type')) {
        _navigateToScreen(data['type'], data);
      }
    } on Exception catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ payload: $e');
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ FCM —Ç–æ–∫–µ–Ω–∞
  static Future<String?> _getToken() async {
    try {
      final token = await _firebaseMessaging.getToken();
      debugPrint('FCM Token: $token');
      return token;
    } on Exception catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è FCM —Ç–æ–∫–µ–Ω–∞: $e');
      return null;
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firestore
  static Future<void> saveUserToken(String userId) async {
    try {
      final token = await _getToken();
      if (token != null) {
        await FirebaseFirestore.instance.collection('users').doc(userId).update({
          'fcmToken': token,
          'lastTokenUpdate': FieldValue.serverTimestamp(),
        });
        debugPrint('FCM —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId');
      }
    } on Exception catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è FCM —Ç–æ–∫–µ–Ω–∞: $e');
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  static Future<void> sendNotification({
    required String userId,
    required String title,
    required String body,
    required String type,
    Map<String, dynamic>? data,
  }) async {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final userDoc = await FirebaseFirestore.instance.collection('users').doc(userId).get();

      final userData = userDoc.data();
      final fcmToken = userData?['fcmToken'];

      if (fcmToken != null) {
        // TODO: –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Firebase Admin SDK –∏–ª–∏ Cloud Functions
        debugPrint('–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é $userId: $title');

        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Firestore
        await FirebaseFirestore.instance.collection('notifications').add({
          'userId': userId,
          'title': title,
          'body': body,
          'type': type,
          'data': data,
          'isRead': false,
          'createdAt': FieldValue.serverTimestamp(),
        });
      }
    } on Exception catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: $e');
    }
  }

  /// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø–∏–∫
  static Future<void> subscribeToTopic(String topic) async {
    try {
      await _firebaseMessaging.subscribeToTopic(topic);
      debugPrint('–ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ç–æ–ø–∏–∫: $topic');
    } on Exception catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ç–æ–ø–∏–∫: $e');
    }
  }

  /// –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Ç–æ–ø–∏–∫–∞
  static Future<void> unsubscribeFromTopic(String topic) async {
    try {
      await _firebaseMessaging.unsubscribeFromTopic(topic);
      debugPrint('–û—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ç–æ–ø–∏–∫–∞: $topic');
    } on Exception catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —Ç–æ–ø–∏–∫–∞: $e');
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
  static Future<void> _saveNotificationToHistory(RemoteMessage message) async {
    try {
      final userId = FirebaseAuth.instance.currentUser?.uid;
      if (userId == null) return;

      final notification = message.notification;
      final data = message.data;

      await FirebaseFirestore.instance
          .collection('users')
          .doc(userId)
          .collection('notifications_history')
          .add({
        'title': notification?.title ?? '',
        'body': notification?.body ?? '',
        'type': data['type'] ?? 'system',
        'targetId': data['id'] ?? data['targetId'] ?? '',
        'senderId': data['senderId'] ?? '',
        'timestamp': FieldValue.serverTimestamp(),
        'isRead': false,
        'isPinned': false,
        'data': data,
      });

      debugPrint('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId');
    } on Exception catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é: $e');
    }
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ payload –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  static String _createPayload(Map<String, dynamic> data) {
    final payload = <String>[];
    data.forEach((key, value) {
      payload.add('$key=$value');
    });
    return payload.join('&');
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  static Color _getNotificationColor(String type) {
    switch (type) {
      case 'like':
        return Colors.red;
      case 'comment':
        return Colors.blue;
      case 'follow':
        return Colors.green;
      case 'request':
        return Colors.orange;
      case 'message':
        return Colors.purple;
      case 'booking':
        return Colors.teal;
      case 'system':
        return Colors.grey;
      default:
        return Colors.blue;
    }
  }
}

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ–Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@pragma('vm:entry-point')
Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  debugPrint('üì¨ –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ: ${message.notification?.title}');

  // Firebase initialization is handled in Bootstrap; avoid duplicate init here
  try {
    Firebase.app();
  } catch (_) {
    // As a last resort (isolates), initialize only if really missing
    await Firebase.initializeApp();
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
  try {
    final userId = FirebaseAuth.instance.currentUser?.uid;
    if (userId != null) {
      final notification = message.notification;
      final data = message.data;

      await FirebaseFirestore.instance
          .collection('users')
          .doc(userId)
          .collection('notifications_history')
          .add({
        'title': notification?.title ?? '',
        'body': notification?.body ?? '',
        'type': data['type'] ?? 'system',
        'targetId': data['id'] ?? data['targetId'] ?? '',
        'senderId': data['senderId'] ?? '',
        'timestamp': FieldValue.serverTimestamp(),
        'isRead': false,
        'isPinned': false,
        'data': data,
      });
    }
  } catch (e) {
    debugPrint('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: $e');
  }
}

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

import '../models/specialist.dart';
import '../providers/specialist_pricing_providers.dart';
import '../widgets/specialist_average_price_widget.dart';

/// –≠–∫—Ä–∞–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ –ø—Ä–∞–π—Å–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
class SpecialistPricingTestScreen extends ConsumerStatefulWidget {
  const SpecialistPricingTestScreen({super.key});

  @override
  ConsumerState<SpecialistPricingTestScreen> createState() => _SpecialistPricingTestScreenState();
}

class _SpecialistPricingTestScreenState extends ConsumerState<SpecialistPricingTestScreen> {
  String? _selectedSpecialistId;
  bool _showHistory = false;

  @override
  Widget build(BuildContext context) => Scaffold(
    appBar: AppBar(
      title: const Text('–¢–µ—Å—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –ø—Ä–∞–π—Å–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞'),
      backgroundColor: Colors.blue,
      foregroundColor: Colors.white,
    ),
    body: Column(
      children: [
        _buildSpecialistSelection(),
        const Divider(),
        Expanded(
          child: _selectedSpecialistId == null
              ? const Center(
                  child: Text(
                    '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ü–µ–Ω',
                    style: TextStyle(fontSize: 16, color: Colors.grey),
                  ),
                )
              : SpecialistAveragePriceWidget(
                  specialistId: _selectedSpecialistId!,
                  showHistory: _showHistory,
                ),
        ),
      ],
    ),
  );

  Widget _buildSpecialistSelection() => Container(
    padding: const EdgeInsets.all(16),
    child: Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:',
          style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
        ),
        const SizedBox(height: 12),
        Wrap(spacing: 8, runSpacing: 8, children: _buildSpecialistChips()),
        const SizedBox(height: 16),
        if (_selectedSpecialistId != null) ...[
          const Text(
            '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:',
            style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 8),
          SwitchListTile(
            title: const Text('–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω'),
            subtitle: const Text('–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –ø–æ –º–µ—Å—è—Ü–∞–º'),
            value: _showHistory,
            onChanged: (value) {
              setState(() {
                _showHistory = value;
              });
            },
            contentPadding: EdgeInsets.zero,
          ),
          const SizedBox(height: 8),
          ElevatedButton.icon(
            onPressed: _updatePricingData,
            icon: const Icon(Icons.refresh),
            label: const Text('–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'),
          ),
        ],
      ],
    ),
  );

  List<Widget> _buildSpecialistChips() {
    const testSpecialists = [
      _TestSpecialist('specialist_1', '–§–æ—Ç–æ–≥—Ä–∞—Ñ –ê–ª–µ–∫—Å–µ–π', SpecialistCategory.photographer),
      _TestSpecialist('specialist_2', '–í–∏–¥–µ–æ–≥—Ä–∞—Ñ –ï–ª–µ–Ω–∞', SpecialistCategory.videographer),
      _TestSpecialist('specialist_3', '–í–µ–¥—É—â–∏–π –ò–≤–∞–Ω', SpecialistCategory.host),
      _TestSpecialist('specialist_4', 'DJ –ú–∞—Ä–∏—è', SpecialistCategory.dj),
      _TestSpecialist('specialist_5', '–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –û–ª—å–≥–∞', SpecialistCategory.decorator),
      _TestSpecialist('specialist_6', '–ú—É–∑—ã–∫–∞–Ω—Ç –î–º–∏—Ç—Ä–∏–π', SpecialistCategory.musician),
      _TestSpecialist('specialist_7', '–ê–Ω–∏–º–∞—Ç–æ—Ä –ê–Ω–Ω–∞', SpecialistCategory.animator),
    ];

    return testSpecialists.map((specialist) {
      final isSelected = _selectedSpecialistId == specialist.id;
      return FilterChip(
        label: Text(specialist.name),
        selected: isSelected,
        onSelected: (selected) {
          setState(() {
            _selectedSpecialistId = selected ? specialist.id : null;
          });
        },
        avatar: Text(specialist.category.emoji),
      );
    }).toList();
  }

  Future<void> _updatePricingData() async {
    if (_selectedSpecialistId == null) return;

    try {
      final notifier = ref.read(specialistPricingProvider.notifier);
      await notifier.updateSpecialistAveragePrice(_selectedSpecialistId!);

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('–î–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö –æ–±–Ω–æ–≤–ª–µ–Ω—ã'), backgroundColor: Colors.green),
        );
      }
    } on Exception catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: $e'), backgroundColor: Colors.red),
        );
      }
    }
  }
}

/// –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∞—Å—Å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
class _TestSpecialist {
  const _TestSpecialist(this.id, this.name, this.category);

  final String id;
  final String name;
  final SpecialistCategory category;
}

/// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è —ç–º–æ–¥–∑–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
extension SpecialistCategoryEmoji on SpecialistCategory {
  String get emoji {
    switch (this) {
      case SpecialistCategory.host:
        return 'üé§';
      case SpecialistCategory.dj:
        return 'üéß';
      case SpecialistCategory.photographer:
        return 'üì∏';
      case SpecialistCategory.videographer:
        return 'üé¨';
      case SpecialistCategory.decorator:
        return 'üé®';
      case SpecialistCategory.musician:
        return 'üéµ';
      case SpecialistCategory.animator:
        return 'üé≠';
      case SpecialistCategory.makeup:
        return 'üíÑ';
      case SpecialistCategory.florist:
        return 'üå∏';
      case SpecialistCategory.lighting:
        return 'üí°';
      case SpecialistCategory.sound:
        return 'üîä';
      default:
        return 'üë§';
    }
  }
}

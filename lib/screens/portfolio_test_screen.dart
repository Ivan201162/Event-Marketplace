import 'package:flutter/material.dart';

import '../models/booking.dart';
import '../models/customer_portfolio.dart';
import '../models/order_history.dart';
import '../services/anniversary_notification_service.dart';
import '../services/auth_service.dart';
import '../services/booking_service.dart';
import '../services/customer_portfolio_service.dart';

/// –¢–µ—Å—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∑–∞–∫–∞–∑—á–∏–∫–∞
class PortfolioTestScreen extends StatefulWidget {
  const PortfolioTestScreen({super.key});

  @override
  State<PortfolioTestScreen> createState() => _PortfolioTestScreenState();
}

class _PortfolioTestScreenState extends State<PortfolioTestScreen> {
  final CustomerPortfolioService _portfolioService = CustomerPortfolioService();
  final BookingService _bookingService = BookingService();
  final AnniversaryNotificationService _notificationService = AnniversaryNotificationService();
  final AuthService _authService = AuthService();

  String _testResults = '';
  bool _isRunningTests = false;

  @override
  void initState() {
    super.initState();
    _initializeServices();
  }

  Future<void> _initializeServices() async {
    try {
      await _notificationService.initialize();
      await _notificationService.requestPermissions();
    } on Exception catch (e) {
      _addTestResult('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: $e');
    }
  }

  void _addTestResult(String result) {
    setState(() {
      _testResults += '${DateTime.now().toString().substring(11, 19)}: $result\n';
    });
  }

  Future<void> _runAllTests() async {
    setState(() {
      _isRunningTests = true;
      _testResults = '';
    });

    _addTestResult('üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∑–∞–∫–∞–∑—á–∏–∫–∞');

    try {
      await _testPortfolioCreation();
      await _testOrderHistory();
      await _testFavorites();
      await _testAnniversaries();
      await _testNotifications();
      await _testIntegration();

      _addTestResult('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    } on Exception catch (e) {
      _addTestResult('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: $e');
    } finally {
      setState(() {
        _isRunningTests = false;
      });
    }
  }

  Future<void> _testPortfolioCreation() async {
    _addTestResult('üìã –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∑–∞–∫–∞–∑—á–∏–∫–∞');

    try {
      final currentUser = _authService.currentUser;

      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
      final testPortfolio = CustomerPortfolio(
        id: currentUser.uid,
        name: '–¢–µ—Å—Ç–æ–≤—ã–π –ó–∞–∫–∞–∑—á–∏–∫',
        email: currentUser.email ?? 'test@example.com',
        phoneNumber: '+7 (999) 123-45-67',
        maritalStatus: MaritalStatus.married,
        weddingDate: DateTime(2020, 6, 15),
        partnerName: '–¢–µ—Å—Ç–æ–≤–∞—è –ü–∞—Ä—Ç–Ω–µ—Ä—à–∞',
        favoriteSpecialists: ['specialist1', 'specialist2'],
        anniversaries: [
          DateTime(2020, 6, 15), // –°–≤–∞–¥—å–±–∞
          DateTime(2021), // –ù–æ–≤—ã–π –≥–æ–¥
        ],
        notes: '–¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ',
        anniversaryRemindersEnabled: true,
        createdAt: DateTime.now(),
      );

      await _portfolioService.createOrUpdatePortfolio(testPortfolio);
      _addTestResult('‚úÖ –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É
      final loadedPortfolio = await _portfolioService.getCustomerPortfolio(currentUser.uid);
      if (loadedPortfolio == null) {
        throw Exception('–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
      }

      _addTestResult('‚úÖ –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${loadedPortfolio.name}');
      _addTestResult(
        '‚úÖ –ò–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤: ${loadedPortfolio.favoriteSpecialists.length}',
      );
      _addTestResult('‚úÖ –ì–æ–¥–æ–≤—â–∏–Ω: ${loadedPortfolio.anniversaries.length}');
    } on Exception catch (e) {
      _addTestResult('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: $e');
    }
  }

  Future<void> _testOrderHistory() async {
    _addTestResult('üì¶ –¢–µ—Å—Ç 2: –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤');

    try {
      final currentUser = _authService.currentUser;

      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑
      final testOrder = OrderHistory(
        id: 'test_order_${DateTime.now().millisecondsSinceEpoch}',
        specialistId: 'specialist1',
        specialistName: '–¢–µ—Å—Ç–æ–≤—ã–π –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç',
        serviceName: '–§–æ—Ç–æ—Å—ä–µ–º–∫–∞ —Å–≤–∞–¥—å–±—ã',
        date: DateTime.now().subtract(const Duration(days: 30)),
        price: 50000,
        status: 'completed',
        eventType: 'wedding',
        location: '–ú–æ—Å–∫–≤–∞',
        notes: '–û—Ç–ª–∏—á–Ω–∞—è —Å—ä–µ–º–∫–∞!',
        createdAt: DateTime.now().subtract(const Duration(days: 30)),
        updatedAt: DateTime.now(),
        additionalData: {
          'participantsCount': 2,
          'originalPrice': 60000.0,
          'discount': 16.67,
          'finalPrice': 50000.0,
        },
      );

      await _portfolioService.addOrderToHistory(currentUser.uid, testOrder);
      _addTestResult('‚úÖ –ó–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏—Å—Ç–æ—Ä–∏–∏
      final orderHistory = await _portfolioService.getOrderHistory(currentUser.uid);
      _addTestResult(
        '‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${orderHistory.length} –∑–∞–∫–∞–∑–æ–≤',
      );

      if (orderHistory.isNotEmpty) {
        final lastOrder = orderHistory.first;
        _addTestResult(
          '‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑: ${lastOrder.serviceName} –∑–∞ ${lastOrder.formattedPrice}',
        );
        _addTestResult(
          '‚úÖ –°–∫–∏–¥–∫–∞: ${lastOrder.discountAmount.toStringAsFixed(0)} ‚ÇΩ',
        );
      }
    } on Exception catch (e) {
      _addTestResult('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤: $e');
    }
  }

  Future<void> _testFavorites() async {
    _addTestResult('‚ù§Ô∏è –¢–µ—Å—Ç 3: –ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã');

    try {
      final currentUser = _authService.currentUser;

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
      const testSpecialistId = 'test_specialist_123';
      await _portfolioService.addToFavorites(currentUser.uid, testSpecialistId);
      _addTestResult('‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
      final isFavorite = await _portfolioService.isFavoriteSpecialist(
        currentUser.uid,
        testSpecialistId,
      );
      if (!isFavorite) {
        throw Exception('–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º');
      }
      _addTestResult('‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º');

      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
      final favorites = await _portfolioService.getFavoriteSpecialists(currentUser.uid);
      _addTestResult('‚úÖ –ò–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤: ${favorites.length}');

      // –£–¥–∞–ª—è–µ–º –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
      await _portfolioService.removeFromFavorites(
        currentUser.uid,
        testSpecialistId,
      );
      _addTestResult('‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ');
    } on Exception catch (e) {
      _addTestResult('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: $e');
    }
  }

  Future<void> _testAnniversaries() async {
    _addTestResult('üìÖ –¢–µ—Å—Ç 4: –ì–æ–¥–æ–≤—â–∏–Ω—ã');

    try {
      final currentUser = _authService.currentUser;

      // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–¥–æ–≤—â–∏–Ω—É
      final testAnniversary = DateTime(2022, 12, 25);
      await _portfolioService.addAnniversary(currentUser.uid, testAnniversary);
      _addTestResult(
        '‚úÖ –ì–æ–¥–æ–≤—â–∏–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: ${testAnniversary.day}.${testAnniversary.month}.${testAnniversary.year}',
      );

      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ–¥–æ–≤—â–∏–Ω
      final anniversaries = await _portfolioService.getAnniversaries(currentUser.uid);
      _addTestResult('‚úÖ –ì–æ–¥–æ–≤—â–∏–Ω –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: ${anniversaries.length}');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –≥–æ–¥–æ–≤—â–∏–Ω—ã
      final portfolio = await _portfolioService.getCustomerPortfolio(currentUser.uid);
      if (portfolio != null) {
        final upcoming = portfolio.upcomingAnniversaries;
        _addTestResult('‚úÖ –ë–ª–∏–∂–∞–π—à–∏—Ö –≥–æ–¥–æ–≤—â–∏–Ω: ${upcoming.length}');

        if (upcoming.isNotEmpty) {
          final next = upcoming.first;
          final daysUntil = next.difference(DateTime.now()).inDays;
          _addTestResult('‚úÖ –î–æ —Å–ª–µ–¥—É—é—â–µ–π –≥–æ–¥–æ–≤—â–∏–Ω—ã: $daysUntil –¥–Ω–µ–π');
        }
      }
    } on Exception catch (e) {
      _addTestResult('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–¥–æ–≤—â–∏–Ω: $e');
    }
  }

  Future<void> _testNotifications() async {
    _addTestResult('üîî –¢–µ—Å—Ç 5: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      await _notificationService.sendTestNotification();
      _addTestResult('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
      final hasPermissions = await _notificationService.requestPermissions();
      _addTestResult(
        '‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${hasPermissions ? "–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã" : "–æ—Ç–∫–ª–æ–Ω–µ–Ω—ã"}',
      );
    } on Exception catch (e) {
      _addTestResult('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: $e');
    }
  }

  Future<void> _testIntegration() async {
    _addTestResult('üîó –¢–µ—Å—Ç 6: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏');

    try {
      final currentUser = _authService.currentUser;

      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      final testBooking = Booking(
        id: 'test_booking_${DateTime.now().millisecondsSinceEpoch}',
        eventId: 'test_event',
        eventTitle: '–¢–µ—Å—Ç–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ',
        userId: currentUser.uid,
        userName: '–¢–µ—Å—Ç–æ–≤—ã–π –ó–∞–∫–∞–∑—á–∏–∫',
        userEmail: currentUser.email,
        status: BookingStatus.completed,
        bookingDate: DateTime.now(),
        eventDate: DateTime.now().subtract(const Duration(days: 1)),
        participantsCount: 2,
        totalPrice: 30000,
        specialistId: 'test_specialist',
        specialistName: '–¢–µ—Å—Ç–æ–≤—ã–π –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç',
        serviceName: '–¢–µ—Å—Ç–æ–≤–∞—è —É—Å–ª—É–≥–∞',
        createdAt: DateTime.now().subtract(const Duration(days: 1)),
        updatedAt: DateTime.now(),
      );

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
      await _bookingService.addBookingToHistory(currentUser.uid, testBooking);
      _addTestResult('‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      final stats = await _portfolioService.getPortfolioStats(currentUser.uid);
      _addTestResult('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ:');
      _addTestResult('   - –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${stats['totalOrders']}');
      _addTestResult('   - –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: ${stats['completedOrders']}');
      _addTestResult(
        '   - –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${stats['totalSpent']?.toStringAsFixed(0)} ‚ÇΩ',
      );
      _addTestResult(
        '   - –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${stats['averageOrderValue']?.toStringAsFixed(0)} ‚ÇΩ',
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      final recommendations = await _portfolioService.getRecommendations(currentUser.uid);
      _addTestResult('‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: ${recommendations.length}');
      for (final recommendation in recommendations) {
        _addTestResult('   - $recommendation');
      }
    } on Exception catch (e) {
      _addTestResult('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: $e');
    }
  }

  Future<void> _testNotes() async {
    _addTestResult('üìù –¢–µ—Å—Ç 7: –ó–∞–º–µ—Ç–∫–∏');

    try {
      final currentUser = _authService.currentUser;

      const testNotes = '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∑–∞–∫–∞–∑—á–∏–∫–∞.';
      await _portfolioService.updateNotes(currentUser.uid, testNotes);
      _addTestResult('‚úÖ –ó–∞–º–µ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');

      final loadedNotes = await _portfolioService.getNotes(currentUser.uid);
      if (loadedNotes != testNotes) {
        throw Exception('–ó–∞–º–µ—Ç–∫–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
      }
      _addTestResult('‚úÖ –ó–∞–º–µ—Ç–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    } on Exception catch (e) {
      _addTestResult('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫: $e');
    }
  }

  @override
  Widget build(BuildContext context) => Scaffold(
        appBar: AppBar(
          title: const Text('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ'),
          backgroundColor: Colors.purple,
          foregroundColor: Colors.white,
        ),
        body: Column(
          children: [
            Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                children: [
                  ElevatedButton(
                    onPressed: _isRunningTests ? null : _runAllTests,
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.purple,
                      foregroundColor: Colors.white,
                      minimumSize: const Size(double.infinity, 50),
                    ),
                    child: _isRunningTests
                        ? const Row(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              SizedBox(
                                width: 20,
                                height: 20,
                                child: CircularProgressIndicator(
                                  strokeWidth: 2,
                                  valueColor: AlwaysStoppedAnimation<Color>(
                                    Colors.white,
                                  ),
                                ),
                              ),
                              SizedBox(width: 12),
                              Text('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...'),
                            ],
                          )
                        : const Text('–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã'),
                  ),
                  const SizedBox(height: 16),
                  Row(
                    children: [
                      Expanded(
                        child: ElevatedButton(
                          onPressed: _isRunningTests ? null : _testNotes,
                          child: const Text('–¢–µ—Å—Ç –∑–∞–º–µ—Ç–æ–∫'),
                        ),
                      ),
                      const SizedBox(width: 8),
                      Expanded(
                        child: ElevatedButton(
                          onPressed: _isRunningTests
                              ? null
                              : () async {
                                  await _notificationService.sendTestNotification();
                                  _addTestResult(
                                    'üîî –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
                                  );
                                },
                          child: const Text('–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
            Expanded(
              child: Container(
                margin: const EdgeInsets.all(16),
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.grey[100],
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.grey[300]!),
                ),
                child: SingleChildScrollView(
                  child: Text(
                    _testResults.isEmpty
                        ? '–ù–∞–∂–º–∏—Ç–µ "–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã" –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
                        : _testResults,
                    style: const TextStyle(
                      fontFamily: 'monospace',
                      fontSize: 12,
                    ),
                  ),
                ),
              ),
            ),
          ],
        ),
      );
}

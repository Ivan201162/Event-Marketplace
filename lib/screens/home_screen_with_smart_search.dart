import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

import '../models/smart_specialist.dart';
import '../services/ai_assistant_service.dart';
import '../services/smart_search_service.dart';
import '../services/smart_specialist_data_generator.dart';
import '../widgets/specialist_card.dart';
import 'smart_search_screen.dart';

/// –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
class HomeScreenWithSmartSearch extends ConsumerStatefulWidget {
  const HomeScreenWithSmartSearch({super.key});

  @override
  ConsumerState<HomeScreenWithSmartSearch> createState() => _HomeScreenWithSmartSearchState();
}

class _HomeScreenWithSmartSearchState extends ConsumerState<HomeScreenWithSmartSearch> {
  final SmartSearchService _smartSearchService = SmartSearchService();
  final AIAssistantService _aiAssistantService = AIAssistantService();
  final SmartSpecialistDataGenerator _dataGenerator = SmartSpecialistDataGenerator();
  
  List<SmartSpecialist> _recommendations = [];
  List<SmartSpecialist> _popularSpecialists = [];
  bool _isLoading = false;
  String? _currentUserId;

  @override
  void initState() {
    super.initState();
    _loadData();
  }

  /// –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
  Future<void> _loadData() async {
    setState(() => _isLoading = true);
    
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
      final popularSpecialists = await _smartSearchService.getPopularSpecialists(limit: 6);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å userId
      var recommendations = <SmartSpecialist>[];
      if (_currentUserId != null) {
        recommendations = await _smartSearchService.getPersonalRecommendations(
          _currentUserId!,
          limit: 6,
        );
      }
      
      setState(() {
        _popularSpecialists = popularSpecialists;
        _recommendations = recommendations;
        _isLoading = false;
      });
    } catch (e) {
      setState(() => _isLoading = false);
      _showErrorSnackBar('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: $e');
    }
  }

  /// –û—Ç–∫—Ä—ã—Ç—å —É–º–Ω—ã–π –ø–æ–∏—Å–∫
  void _openSmartSearch() {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => const SmartSearchScreen(),
      ),
    );
  }

  /// –û—Ç–∫—Ä—ã—Ç—å AI-–ø–æ–º–æ—â–Ω–∏–∫–∞
  Future<void> _openAIAssistant() async {
    final conversation = await _aiAssistantService.startConversation(userId: _currentUserId);
    
    if (mounted) {
      showDialog(
        context: context,
        builder: (context) => AIAssistantDialog(
          conversation: conversation,
          onClose: () {},
        ),
      );
    }
  }

  /// –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  Future<void> _generateTestData() async {
    setState(() => _isLoading = true);
    
    try {
      await _dataGenerator.generateTestSpecialists();
      await _loadData();
      _showSuccessSnackBar('–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!');
    } catch (e) {
      setState(() => _isLoading = false);
      _showErrorSnackBar('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: $e');
    }
  }

  /// –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
  void _showErrorSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.red,
      ),
    );
  }

  /// –ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ø–µ—Ö
  void _showSuccessSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.green,
      ),
    );
  }

  @override
  Widget build(BuildContext context) => Scaffold(
      appBar: AppBar(
        title: const Text('Event Marketplace'),
        actions: [
          IconButton(
            icon: const Icon(Icons.smart_toy),
            onPressed: _openAIAssistant,
            tooltip: 'AI-–ø–æ–º–æ—â–Ω–∏–∫',
          ),
          PopupMenuButton<String>(
            onSelected: (value) {
              switch (value) {
                case 'generate_data':
                  _generateTestData();
                  break;
                case 'refresh':
                  _loadData();
                  break;
              }
            },
            itemBuilder: (context) => [
              const PopupMenuItem(
                value: 'generate_data',
                child: Text('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ'),
              ),
              const PopupMenuItem(
                value: 'refresh',
                child: Text('–û–±–Ω–æ–≤–∏—Ç—å'),
              ),
            ],
          ),
        ],
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : RefreshIndicator(
              onRefresh: _loadData,
              child: SingleChildScrollView(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
                    const Text(
                      '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
                      style: TextStyle(
                        fontSize: 24,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 8),
                    const Text(
                      '–ù–∞–π–¥–∏—Ç–µ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
                      style: TextStyle(
                        fontSize: 16,
                        color: Colors.grey,
                      ),
                    ),
                    const SizedBox(height: 24),
                    
                    // –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
                    _buildQuickAccessButtons(),
                    const SizedBox(height: 24),
                    
                    // –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                    if (_recommendations.isNotEmpty) ...[
                      _buildSectionHeader(
                        'üîÆ –í–∞–º –ø–æ–¥–æ–π–¥—É—Ç —ç—Ç–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã',
                        '–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π',
                      ),
                      const SizedBox(height: 16),
                      _buildSpecialistsList(_recommendations, showCompatibility: true),
                      const SizedBox(height: 32),
                    ],
                    
                    // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã
                    _buildSectionHeader(
                      '‚≠ê –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã',
                      '–í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∏ –º–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–æ–≤',
                    ),
                    const SizedBox(height: 16),
                    _buildSpecialistsList(_popularSpecialists),
                    const SizedBox(height: 32),
                    
                    // –ö–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö"
                    Center(
                      child: ElevatedButton.icon(
                        onPressed: _openSmartSearch,
                        icon: const Icon(Icons.search),
                        label: const Text('–ù–∞–π—Ç–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞'),
                        style: ElevatedButton.styleFrom(
                          padding: const EdgeInsets.symmetric(
                            horizontal: 24,
                            vertical: 12,
                          ),
                        ),
                      ),
                    ),
                    const SizedBox(height: 32),
                  ],
                ),
              ),
            ),
      floatingActionButton: FloatingActionButton(
        onPressed: _openAIAssistant,
        tooltip: 'AI-–ø–æ–º–æ—â–Ω–∏–∫',
        child: const Icon(Icons.smart_toy),
      ),
    );

  /// –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
  Widget _buildQuickAccessButtons() => Row(
      children: [
        Expanded(
          child: _buildQuickAccessButton(
            icon: Icons.search,
            title: '–£–º–Ω—ã–π –ø–æ–∏—Å–∫',
            subtitle: '–ù–∞–π—Ç–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞',
            onTap: _openSmartSearch,
            color: Colors.blue,
          ),
        ),
        const SizedBox(width: 12),
        Expanded(
          child: _buildQuickAccessButton(
            icon: Icons.smart_toy,
            title: 'AI-–ø–æ–º–æ—â–Ω–∏–∫',
            subtitle: '–ü–æ–¥–æ–±—Ä–∞—Ç—å –∑–∞ –≤–∞—Å',
            onTap: _openAIAssistant,
            color: Colors.purple,
          ),
        ),
      ],
    );

  /// –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–Ω–æ–ø–∫—É –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
  Widget _buildQuickAccessButton({
    required IconData icon,
    required String title,
    required String subtitle,
    required VoidCallback onTap,
    required Color color,
  }) => InkWell(
      onTap: onTap,
      borderRadius: BorderRadius.circular(12),
      child: Container(
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: color.withOpacity(0.1),
          borderRadius: BorderRadius.circular(12),
          border: Border.all(color: color.withOpacity(0.3)),
        ),
        child: Column(
          children: [
            Icon(
              icon,
              color: color,
              size: 32,
            ),
            const SizedBox(height: 8),
            Text(
              title,
              style: TextStyle(
                fontWeight: FontWeight.bold,
                color: color,
                fontSize: 14,
              ),
            ),
            const SizedBox(height: 4),
            Text(
              subtitle,
              style: TextStyle(
                color: color.withOpacity(0.8),
                fontSize: 12,
              ),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),
    );

  /// –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
  Widget _buildSectionHeader(String title, String subtitle) => Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          title,
          style: const TextStyle(
            fontSize: 20,
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 4),
        Text(
          subtitle,
          style: TextStyle(
            fontSize: 14,
            color: Colors.grey[600],
          ),
        ),
      ],
    );

  /// –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
  Widget _buildSpecialistsList(List<SmartSpecialist> specialists, {bool showCompatibility = false}) {
    if (specialists.isEmpty) {
      return const Center(
        child: Text(
          '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
          style: TextStyle(color: Colors.grey),
        ),
      );
    }

    return SizedBox(
      height: 280,
      child: ListView.builder(
        scrollDirection: Axis.horizontal,
        itemCount: specialists.length,
        itemBuilder: (context, index) {
          final specialist = specialists[index];
          return Container(
            width: 280,
            margin: const EdgeInsets.only(right: 12),
            child: SpecialistCard(
              specialist: specialist,
              showCompatibility: showCompatibility,
              onTap: () => _onSpecialistTap(specialist),
            ),
          );
        },
      ),
    );
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
  void _onSpecialistTap(SmartSpecialist specialist) {
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
    if (_currentUserId != null) {
      _smartSearchService.recordUserInteraction(
        userId: _currentUserId!,
        specialistId: specialist.id,
        action: 'view',
      );
    }
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ—Ñ–∏–ª—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
    Navigator.pushNamed(
      context,
      '/specialist_profile',
      arguments: specialist.id,
    );
  }
}

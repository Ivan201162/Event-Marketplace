import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

import '../../models/advertisement.dart';
import '../../models/promotion_boost.dart';
import '../../models/subscription_plan.dart';
import '../../providers/auth_providers.dart';
import '../../services/advertisement_service.dart';
import '../../services/promotion_service.dart';
import '../../services/subscription_service.dart';
import 'advertisement_campaigns_screen.dart';
import 'my_advertisements_screen.dart';
import 'my_promotions_screen.dart';
import 'my_subscriptions_screen.dart';
import 'promotion_packages_screen.dart';
import 'subscription_plans_screen.dart';

class MonetizationHubScreen extends ConsumerStatefulWidget {
  const MonetizationHubScreen({super.key});

  @override
  ConsumerState<MonetizationHubScreen> createState() => _MonetizationHubScreenState();
}

class _MonetizationHubScreenState extends ConsumerState<MonetizationHubScreen>
    with TickerProviderStateMixin {
  late TabController _tabController;
  final SubscriptionService _subscriptionService = SubscriptionService();
  final PromotionService _promotionService = PromotionService();
  final AdvertisementService _advertisementService = AdvertisementService();

  UserSubscription? _activeSubscription;
  List<PromotionBoost> _activePromotions = [];
  List<Advertisement> _activeAdvertisements = [];

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 3, vsync: this);
    _loadUserData();
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  Future<void> _loadUserData() async {
    final currentUserAsync = ref.read(currentUserProvider);
    currentUserAsync.whenData((user) async {
      if (user != null) {
        try {
          final subscription = await _subscriptionService.getActiveSubscription(user.id);
          final promotions = await _promotionService.getActivePromotions(user.id);
          final advertisements = await _advertisementService.getActiveAdvertisements(
            type: AdType.banner,
            limit: 5,
          );

          if (mounted) {
            setState(() {
              _activeSubscription = subscription;
              _activePromotions = promotions;
              _activeAdvertisements = advertisements;
            });
          }
        } catch (e) {
          debugPrint('Error loading user data: $e');
        }
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('üí∞ –ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è'),
        backgroundColor: Colors.deepPurple,
        foregroundColor: Colors.white,
        elevation: 0,
        bottom: TabBar(
          controller: _tabController,
          indicatorColor: Colors.white,
          labelColor: Colors.white,
          unselectedLabelColor: Colors.white70,
          tabs: const [
            Tab(text: '–ü–æ–¥–ø–∏—Å–∫–∏', icon: Icon(Icons.star)),
            Tab(text: '–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ', icon: Icon(Icons.trending_up)),
            Tab(text: '–†–µ–∫–ª–∞–º–∞', icon: Icon(Icons.campaign)),
          ],
        ),
      ),
      body: TabBarView(
        controller: _tabController,
        children: [
          _buildSubscriptionsTab(),
          _buildPromotionsTab(),
          _buildAdvertisementsTab(),
        ],
      ),
    );
  }

  Widget _buildSubscriptionsTab() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // –¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
          if (_activeSubscription != null) ...[
            _buildCurrentSubscriptionCard(),
            const SizedBox(height: 16),
          ],

          // –ü–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
          _buildSectionHeader(
            '–ü–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏',
            '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π',
            Icons.star,
            Colors.amber,
          ),
          const SizedBox(height: 12),
          _buildSubscriptionPlansGrid(),

          const SizedBox(height: 24),

          // –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏
          _buildSectionHeader(
            '–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏',
            '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏',
            Icons.subscriptions,
            Colors.blue,
          ),
          const SizedBox(height: 12),
          _buildMySubscriptionsCard(),
        ],
      ),
    );
  }

  Widget _buildPromotionsTab() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è
          if (_activePromotions.isNotEmpty) ...[
            _buildActivePromotionsCard(),
            const SizedBox(height: 16),
          ],

          // –ü–∞–∫–µ—Ç—ã –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è
          _buildSectionHeader(
            '–ü–∞–∫–µ—Ç—ã –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è',
            '–ü–æ–≤—ã—Å—å—Ç–µ –≤–∏–¥–∏–º–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è',
            Icons.trending_up,
            Colors.green,
          ),
          const SizedBox(height: 12),
          _buildPromotionPackagesGrid(),

          const SizedBox(height: 24),

          // –ú–æ–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è
          _buildSectionHeader(
            '–ú–æ–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è',
            '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è–º–∏',
            Icons.campaign,
            Colors.orange,
          ),
          const SizedBox(height: 12),
          _buildMyPromotionsCard(),
        ],
      ),
    );
  }

  Widget _buildAdvertisementsTab() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞
          if (_activeAdvertisements.isNotEmpty) ...[
            _buildActiveAdvertisementsCard(),
            const SizedBox(height: 16),
          ],

          // –†–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏
          _buildSectionHeader(
            '–†–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏',
            '–°–æ–∑–¥–∞–π—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é —Ä–µ–∫–ª–∞–º–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é',
            Icons.campaign,
            Colors.purple,
          ),
          const SizedBox(height: 12),
          _buildAdvertisementCampaignsGrid(),

          const SizedBox(height: 24),

          // –ú–æ—è —Ä–µ–∫–ª–∞–º–∞
          _buildSectionHeader(
            '–ú–æ—è —Ä–µ–∫–ª–∞–º–∞',
            '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω—ã–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏',
            Icons.ads_click,
            Colors.red,
          ),
          const SizedBox(height: 12),
          _buildMyAdvertisementsCard(),
        ],
      ),
    );
  }

  Widget _buildCurrentSubscriptionCard() {
    final plan = _activeSubscription!;
    return Card(
      elevation: 4,
      child: Container(
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(12),
          gradient: const LinearGradient(
            colors: [Colors.amber, Colors.orange],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        ),
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                const Icon(Icons.star, color: Colors.white, size: 24),
                const SizedBox(width: 8),
                Text(
                  '–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞',
                  style: Theme.of(context).textTheme.titleLarge?.copyWith(
                        color: Colors.white,
                        fontWeight: FontWeight.bold,
                      ),
                ),
              ],
            ),
            const SizedBox(height: 12),
            Text(
              '–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${plan.daysRemaining}',
              style: Theme.of(context).textTheme.bodyLarge?.copyWith(
                    color: Colors.white,
                  ),
            ),
            const SizedBox(height: 8),
            LinearProgressIndicator(
              value: plan.progressPercentage,
              backgroundColor: Colors.white30,
              valueColor: const AlwaysStoppedAnimation<Color>(Colors.white),
            ),
            const SizedBox(height: 12),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  '–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: ${plan.autoRenew ? "–í–∫–ª—é—á–µ–Ω–æ" : "–í—ã–∫–ª—é—á–µ–Ω–æ"}',
                  style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                        color: Colors.white,
                      ),
                ),
                TextButton(
                  onPressed: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder: (context) => const MySubscriptionsScreen(),
                      ),
                    );
                  },
                  child: const Text(
                    '–£–ø—Ä–∞–≤–ª—è—Ç—å',
                    style: TextStyle(color: Colors.white),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildActivePromotionsCard() {
    return Card(
      elevation: 4,
      child: Container(
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(12),
          gradient: const LinearGradient(
            colors: [Colors.green, Colors.teal],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        ),
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                const Icon(Icons.trending_up, color: Colors.white, size: 24),
                const SizedBox(width: 8),
                Text(
                  '–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è (${_activePromotions.length})',
                  style: Theme.of(context).textTheme.titleLarge?.copyWith(
                        color: Colors.white,
                        fontWeight: FontWeight.bold,
                      ),
                ),
              ],
            ),
            const SizedBox(height: 12),
            ..._activePromotions.take(3).map((promotion) => Padding(
                  padding: const EdgeInsets.only(bottom: 8),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text(
                        promotion.type.toString().split('.').last,
                        style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                              color: Colors.white,
                            ),
                      ),
                      Text(
                        '${promotion.daysRemaining} –¥–Ω.',
                        style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                              color: Colors.white,
                            ),
                      ),
                    ],
                  ),
                )),
            if (_activePromotions.length > 3)
              Text(
                '–ò –µ—â–µ ${_activePromotions.length - 3}...',
                style: Theme.of(context).textTheme.bodySmall?.copyWith(
                      color: Colors.white70,
                    ),
              ),
            const SizedBox(height: 12),
            TextButton(
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => const MyPromotionsScreen(),
                  ),
                );
              },
              child: const Text(
                '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ',
                style: TextStyle(color: Colors.white),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildActiveAdvertisementsCard() {
    return Card(
      elevation: 4,
      child: Container(
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(12),
          gradient: const LinearGradient(
            colors: [Colors.purple, Colors.deepPurple],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        ),
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                const Icon(Icons.campaign, color: Colors.white, size: 24),
                const SizedBox(width: 8),
                Text(
                  '–ê–∫—Ç–∏–≤–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞ (${_activeAdvertisements.length})',
                  style: Theme.of(context).textTheme.titleLarge?.copyWith(
                        color: Colors.white,
                        fontWeight: FontWeight.bold,
                      ),
                ),
              ],
            ),
            const SizedBox(height: 12),
            ..._activeAdvertisements.take(3).map((ad) => Padding(
                  padding: const EdgeInsets.only(bottom: 8),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text(
                        ad.title ?? '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
                        style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                              color: Colors.white,
                            ),
                      ),
                      Text(
                        '${ad.daysRemaining} –¥–Ω.',
                        style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                              color: Colors.white,
                            ),
                      ),
                    ],
                  ),
                )),
            if (_activeAdvertisements.length > 3)
              Text(
                '–ò –µ—â–µ ${_activeAdvertisements.length - 3}...',
                style: Theme.of(context).textTheme.bodySmall?.copyWith(
                      color: Colors.white70,
                    ),
              ),
            const SizedBox(height: 12),
            TextButton(
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => const MyAdvertisementsScreen(),
                  ),
                );
              },
              child: const Text(
                '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ',
                style: TextStyle(color: Colors.white),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildSectionHeader(String title, String subtitle, IconData icon, Color color) {
    return Row(
      children: [
        Container(
          padding: const EdgeInsets.all(8),
          decoration: BoxDecoration(
            color: color.withValues(alpha: 0.1),
            borderRadius: BorderRadius.circular(8),
          ),
          child: Icon(icon, color: color, size: 24),
        ),
        const SizedBox(width: 12),
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                title,
                style: Theme.of(context).textTheme.titleLarge?.copyWith(
                      fontWeight: FontWeight.bold,
                    ),
              ),
              Text(
                subtitle,
                style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                      color: Colors.grey[600],
                    ),
              ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildSubscriptionPlansGrid() {
    return GridView.count(
      shrinkWrap: true,
      physics: const NeverScrollableScrollPhysics(),
      crossAxisCount: 2,
      crossAxisSpacing: 12,
      mainAxisSpacing: 12,
      childAspectRatio: 0.8,
      children: [
        _buildPlanCard(
          '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π',
          '–ë–∞–∑–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª',
          '0 ‚ÇΩ',
          '30 –¥–Ω–µ–π',
          ['–ü–æ–∏—Å–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤', '–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π', '–ë–∞–∑–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã'],
          Colors.grey,
          () {
            Navigator.push(
              context,
              MaterialPageRoute(
                builder: (context) => const SubscriptionPlansScreen(),
              ),
            );
          },
        ),
        _buildPlanCard(
          '–ü—Ä–µ–º–∏—É–º',
          '–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏',
          '499 ‚ÇΩ',
          '30 –¥–Ω–µ–π',
          ['–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –ø–æ–∏—Å–∫–µ', '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞', '–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ'],
          Colors.amber,
          () {
            Navigator.push(
              context,
              MaterialPageRoute(
                builder: (context) => const SubscriptionPlansScreen(),
              ),
            );
          },
        ),
      ],
    );
  }

  Widget _buildPromotionPackagesGrid() {
    return GridView.count(
      shrinkWrap: true,
      physics: const NeverScrollableScrollPhysics(),
      crossAxisCount: 2,
      crossAxisSpacing: 12,
      mainAxisSpacing: 12,
      childAspectRatio: 0.8,
      children: [
        _buildPackageCard(
          '–¢–æ–ø –ø—Ä–æ—Ñ–∏–ª—å',
          '–í—ã–¥–µ–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ',
          '299 ‚ÇΩ',
          '7 –¥–Ω–µ–π',
          ['–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –ø–æ–∏—Å–∫–µ', '–ó–æ–ª–æ—Ç–∞—è —Ä–∞–º–∫–∞', '–¢–æ–ø –ø–æ–∑–∏—Ü–∏—è'],
          Colors.green,
          () {
            Navigator.push(
              context,
              MaterialPageRoute(
                builder: (context) => const PromotionPackagesScreen(),
              ),
            );
          },
        ),
        _buildPackageCard(
          '–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ—Å—Ç–∞',
          '–ë–æ–ª—å—à–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤',
          '199 ‚ÇΩ',
          '3 –¥–Ω—è',
          ['–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –æ—Ö–≤–∞—Ç–∞', '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –ª–µ–Ω—Ç–µ', '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞'],
          Colors.orange,
          () {
            Navigator.push(
              context,
              MaterialPageRoute(
                builder: (context) => const PromotionPackagesScreen(),
              ),
            );
          },
        ),
      ],
    );
  }

  Widget _buildAdvertisementCampaignsGrid() {
    return GridView.count(
      shrinkWrap: true,
      physics: const NeverScrollableScrollPhysics(),
      crossAxisCount: 2,
      crossAxisSpacing: 12,
      mainAxisSpacing: 12,
      childAspectRatio: 0.8,
      children: [
        _buildCampaignCard(
          '–ë–∞–Ω–Ω–µ—Ä–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞',
          '–í–µ—Ä—Ö–Ω–∏–π –±–∞–Ω–Ω–µ—Ä',
          '–æ—Ç 500 ‚ÇΩ',
          '–∑–∞ –¥–µ–Ω—å',
          ['–í—ã—Å–æ–∫–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å', '–¢–∞—Ä–≥–µ—Ç–∏–Ω–≥', '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞'],
          Colors.purple,
          () {
            Navigator.push(
              context,
              MaterialPageRoute(
                builder: (context) => const AdvertisementCampaignsScreen(),
              ),
            );
          },
        ),
        _buildCampaignCard(
          '–°–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç',
          '–í –ª–µ–Ω—Ç–µ –Ω–æ–≤–æ—Å—Ç–µ–π',
          '–æ—Ç 1000 ‚ÇΩ',
          '–∑–∞ –¥–µ–Ω—å',
          ['–û—Ä–≥–∞–Ω–∏—á–Ω—ã–π –≤–∏–¥', '–í—ã—Å–æ–∫–∏–π CTR', '–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞'],
          Colors.red,
          () {
            Navigator.push(
              context,
              MaterialPageRoute(
                builder: (context) => const AdvertisementCampaignsScreen(),
              ),
            );
          },
        ),
      ],
    );
  }

  Widget _buildPlanCard(
    String title,
    String subtitle,
    String price,
    String duration,
    List<String> features,
    Color color,
    VoidCallback onTap,
  ) {
    return Card(
      elevation: 2,
      child: InkWell(
        onTap: onTap,
        borderRadius: BorderRadius.circular(12),
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Container(
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: color.withValues(alpha: 0.1),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Icon(Icons.star, color: color, size: 24),
              ),
              const SizedBox(height: 12),
              Text(
                title,
                style: Theme.of(context).textTheme.titleMedium?.copyWith(
                      fontWeight: FontWeight.bold,
                    ),
              ),
              const SizedBox(height: 4),
              Text(
                subtitle,
                style: Theme.of(context).textTheme.bodySmall?.copyWith(
                      color: Colors.grey[600],
                    ),
              ),
              const Spacer(),
              Text(
                price,
                style: Theme.of(context).textTheme.titleLarge?.copyWith(
                      color: color,
                      fontWeight: FontWeight.bold,
                    ),
              ),
              Text(
                duration,
                style: Theme.of(context).textTheme.bodySmall?.copyWith(
                      color: Colors.grey[600],
                    ),
              ),
              const SizedBox(height: 8),
              ...features.take(2).map((feature) => Padding(
                    padding: const EdgeInsets.only(bottom: 2),
                    child: Row(
                      children: [
                        Icon(Icons.check, color: color, size: 16),
                        const SizedBox(width: 4),
                        Expanded(
                          child: Text(
                            feature,
                            style: Theme.of(context).textTheme.bodySmall,
                          ),
                        ),
                      ],
                    ),
                  )),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildPackageCard(
    String title,
    String subtitle,
    String price,
    String duration,
    List<String> features,
    Color color,
    VoidCallback onTap,
  ) {
    return Card(
      elevation: 2,
      child: InkWell(
        onTap: onTap,
        borderRadius: BorderRadius.circular(12),
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Container(
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: color.withValues(alpha: 0.1),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Icon(Icons.trending_up, color: color, size: 24),
              ),
              const SizedBox(height: 12),
              Text(
                title,
                style: Theme.of(context).textTheme.titleMedium?.copyWith(
                      fontWeight: FontWeight.bold,
                    ),
              ),
              const SizedBox(height: 4),
              Text(
                subtitle,
                style: Theme.of(context).textTheme.bodySmall?.copyWith(
                      color: Colors.grey[600],
                    ),
              ),
              const Spacer(),
              Text(
                price,
                style: Theme.of(context).textTheme.titleLarge?.copyWith(
                      color: color,
                      fontWeight: FontWeight.bold,
                    ),
              ),
              Text(
                duration,
                style: Theme.of(context).textTheme.bodySmall?.copyWith(
                      color: Colors.grey[600],
                    ),
              ),
              const SizedBox(height: 8),
              ...features.take(2).map((feature) => Padding(
                    padding: const EdgeInsets.only(bottom: 2),
                    child: Row(
                      children: [
                        Icon(Icons.check, color: color, size: 16),
                        const SizedBox(width: 4),
                        Expanded(
                          child: Text(
                            feature,
                            style: Theme.of(context).textTheme.bodySmall,
                          ),
                        ),
                      ],
                    ),
                  )),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildCampaignCard(
    String title,
    String subtitle,
    String price,
    String duration,
    List<String> features,
    Color color,
    VoidCallback onTap,
  ) {
    return Card(
      elevation: 2,
      child: InkWell(
        onTap: onTap,
        borderRadius: BorderRadius.circular(12),
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Container(
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: color.withValues(alpha: 0.1),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Icon(Icons.campaign, color: color, size: 24),
              ),
              const SizedBox(height: 12),
              Text(
                title,
                style: Theme.of(context).textTheme.titleMedium?.copyWith(
                      fontWeight: FontWeight.bold,
                    ),
              ),
              const SizedBox(height: 4),
              Text(
                subtitle,
                style: Theme.of(context).textTheme.bodySmall?.copyWith(
                      color: Colors.grey[600],
                    ),
              ),
              const Spacer(),
              Text(
                price,
                style: Theme.of(context).textTheme.titleLarge?.copyWith(
                      color: color,
                      fontWeight: FontWeight.bold,
                    ),
              ),
              Text(
                duration,
                style: Theme.of(context).textTheme.bodySmall?.copyWith(
                      color: Colors.grey[600],
                    ),
              ),
              const SizedBox(height: 8),
              ...features.take(2).map((feature) => Padding(
                    padding: const EdgeInsets.only(bottom: 2),
                    child: Row(
                      children: [
                        Icon(Icons.check, color: color, size: 16),
                        const SizedBox(width: 4),
                        Expanded(
                          child: Text(
                            feature,
                            style: Theme.of(context).textTheme.bodySmall,
                          ),
                        ),
                      ],
                    ),
                  )),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildMySubscriptionsCard() {
    return Card(
      child: ListTile(
        leading: const Icon(Icons.subscriptions, color: Colors.blue),
        title: const Text('–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏'),
        subtitle: const Text('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏'),
        trailing: const Icon(Icons.arrow_forward_ios),
        onTap: () {
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => const MySubscriptionsScreen(),
            ),
          );
        },
      ),
    );
  }

  Widget _buildMyPromotionsCard() {
    return Card(
      child: ListTile(
        leading: const Icon(Icons.trending_up, color: Colors.green),
        title: const Text('–ú–æ–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è'),
        subtitle: const Text('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è–º–∏'),
        trailing: const Icon(Icons.arrow_forward_ios),
        onTap: () {
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => const MyPromotionsScreen(),
            ),
          );
        },
      ),
    );
  }

  Widget _buildMyAdvertisementsCard() {
    return Card(
      child: ListTile(
        leading: const Icon(Icons.campaign, color: Colors.purple),
        title: const Text('–ú–æ—è —Ä–µ–∫–ª–∞–º–∞'),
        subtitle: const Text('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω—ã–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏'),
        trailing: const Icon(Icons.arrow_forward_ios),
        onTap: () {
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => const MyAdvertisementsScreen(),
            ),
          );
        },
      ),
    );
  }
}

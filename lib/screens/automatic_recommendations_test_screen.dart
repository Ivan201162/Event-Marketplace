import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../models/specialist.dart';
import '../widgets/automatic_recommendations_widget.dart';

/// –≠–∫—Ä–∞–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
class AutomaticRecommendationsTestScreen extends ConsumerStatefulWidget {
  const AutomaticRecommendationsTestScreen({super.key});

  @override
  ConsumerState<AutomaticRecommendationsTestScreen> createState() =>
      _AutomaticRecommendationsTestScreenState();
}

class _AutomaticRecommendationsTestScreenState
    extends ConsumerState<AutomaticRecommendationsTestScreen> {
  final List<String> _selectedSpecialistIds = [];
  final String _testUserId = 'test_user_123';

  @override
  Widget build(BuildContext context) => Scaffold(
        appBar: AppBar(
          title: const Text('–¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π'),
          backgroundColor: Colors.blue,
          foregroundColor: Colors.white,
        ),
        body: Column(
          children: [
            _buildSpecialistSelection(),
            const Divider(),
            Expanded(
              child: _selectedSpecialistIds.isEmpty
                  ? const Center(
                      child: Text(
                        '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π',
                        style: TextStyle(fontSize: 16, color: Colors.grey),
                      ),
                    )
                  : AutomaticRecommendationsWidget(
                      selectedSpecialistIds: _selectedSpecialistIds,
                      userId: _testUserId,
                      onSpecialistSelected: _onSpecialistSelected,
                    ),
            ),
          ],
        ),
      );

  Widget _buildSpecialistSelection() => Container(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤:',
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 12),
            Wrap(
              spacing: 8,
              runSpacing: 8,
              children: _buildSpecialistChips(),
            ),
            const SizedBox(height: 16),
            if (_selectedSpecialistIds.isNotEmpty) ...[
              const Text(
                '–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã:',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 8),
              Wrap(
                spacing: 8,
                runSpacing: 8,
                children: _buildSelectedSpecialistChips(),
              ),
            ],
          ],
        ),
      );

  List<Widget> _buildSpecialistChips() {
    const testSpecialists = [
      _TestSpecialist('host_1', '–í–µ–¥—É—â–∏–π –ò–≤–∞–Ω', SpecialistCategory.host),
      _TestSpecialist('dj_1', 'DJ –ú–∞—Ä–∏—è', SpecialistCategory.dj),
      _TestSpecialist(
        'photographer_1',
        '–§–æ—Ç–æ–≥—Ä–∞—Ñ –ê–ª–µ–∫—Å–µ–π',
        SpecialistCategory.photographer,
      ),
      _TestSpecialist(
        'videographer_1',
        '–í–∏–¥–µ–æ–≥—Ä–∞—Ñ –ï–ª–µ–Ω–∞',
        SpecialistCategory.videographer,
      ),
      _TestSpecialist(
        'decorator_1',
        '–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –û–ª—å–≥–∞',
        SpecialistCategory.decorator,
      ),
      _TestSpecialist(
        'musician_1',
        '–ú—É–∑—ã–∫–∞–Ω—Ç –î–º–∏—Ç—Ä–∏–π',
        SpecialistCategory.musician,
      ),
      _TestSpecialist(
        'animator_1',
        '–ê–Ω–∏–º–∞—Ç–æ—Ä –ê–Ω–Ω–∞',
        SpecialistCategory.animator,
      ),
    ];

    return testSpecialists.map((specialist) {
      final isSelected = _selectedSpecialistIds.contains(specialist.id);
      return FilterChip(
        label: Text(specialist.name),
        selected: isSelected,
        onSelected: (selected) {
          setState(() {
            if (selected) {
              _selectedSpecialistIds.add(specialist.id);
            } else {
              _selectedSpecialistIds.remove(specialist.id);
            }
          });
        },
        avatar: Text(specialist.category.emoji),
      );
    }).toList();
  }

  List<Widget> _buildSelectedSpecialistChips() =>
      _selectedSpecialistIds.map((id) {
        final specialist = _getTestSpecialistById(id);
        return Chip(
          label: Text(specialist.name),
          avatar: Text(specialist.category.emoji),
          deleteIcon: const Icon(Icons.close, size: 18),
          onDeleted: () {
            setState(() {
              _selectedSpecialistIds.remove(id);
            });
          },
        );
      }).toList();

  void _onSpecialistSelected(Specialist specialist) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('–í—ã–±—Ä–∞–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: ${specialist.name}'),
        duration: const Duration(seconds: 2),
      ),
    );
  }

  _TestSpecialist _getTestSpecialistById(String id) {
    const testSpecialists = [
      _TestSpecialist('host_1', '–í–µ–¥—É—â–∏–π –ò–≤–∞–Ω', SpecialistCategory.host),
      _TestSpecialist('dj_1', 'DJ –ú–∞—Ä–∏—è', SpecialistCategory.dj),
      _TestSpecialist(
        'photographer_1',
        '–§–æ—Ç–æ–≥—Ä–∞—Ñ –ê–ª–µ–∫—Å–µ–π',
        SpecialistCategory.photographer,
      ),
      _TestSpecialist(
        'videographer_1',
        '–í–∏–¥–µ–æ–≥—Ä–∞—Ñ –ï–ª–µ–Ω–∞',
        SpecialistCategory.videographer,
      ),
      _TestSpecialist(
        'decorator_1',
        '–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –û–ª—å–≥–∞',
        SpecialistCategory.decorator,
      ),
      _TestSpecialist(
        'musician_1',
        '–ú—É–∑—ã–∫–∞–Ω—Ç –î–º–∏—Ç—Ä–∏–π',
        SpecialistCategory.musician,
      ),
      _TestSpecialist(
        'animator_1',
        '–ê–Ω–∏–º–∞—Ç–æ—Ä –ê–Ω–Ω–∞',
        SpecialistCategory.animator,
      ),
    ];

    return testSpecialists.firstWhere((s) => s.id == id);
  }
}

/// –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∞—Å—Å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
class _TestSpecialist {
  const _TestSpecialist(this.id, this.name, this.category);

  final String id;
  final String name;
  final SpecialistCategory category;
}

/// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è —ç–º–æ–¥–∑–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
extension SpecialistCategoryEmoji on SpecialistCategory {
  String get emoji {
    switch (this) {
      case SpecialistCategory.host:
        return 'üé§';
      case SpecialistCategory.dj:
        return 'üéß';
      case SpecialistCategory.photographer:
        return 'üì∏';
      case SpecialistCategory.videographer:
        return 'üé¨';
      case SpecialistCategory.decorator:
        return 'üé®';
      case SpecialistCategory.musician:
        return 'üéµ';
      case SpecialistCategory.animator:
        return 'üé≠';
      case SpecialistCategory.makeup:
        return 'üíÑ';
      case SpecialistCategory.florist:
        return 'üå∏';
      case SpecialistCategory.lighting:
        return 'üí°';
      case SpecialistCategory.sound:
        return 'üîä';
      default:
        return 'üë§';
    }
  }
}

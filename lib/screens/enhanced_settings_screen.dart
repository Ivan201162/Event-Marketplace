import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

import '../screens/calendar_reminders_screen.dart';
import '../screens/event_organizer_screen.dart';
import '../screens/pro_subscription_screen.dart';
import '../screens/testing_monitoring_screen.dart';
import '../widgets/advertising_widgets.dart';
import '../widgets/enhanced_animations.dart';
import '../widgets/swipe_back_mixin.dart';

/// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫
class EnhancedSettingsScreen extends ConsumerStatefulWidget {
  const EnhancedSettingsScreen({super.key});

  @override
  ConsumerState<EnhancedSettingsScreen> createState() =>
      _EnhancedSettingsScreenState();
}

class _EnhancedSettingsScreenState extends ConsumerState<EnhancedSettingsScreen>
    with SwipeBackMixin {
  bool _notificationsEnabled = true;
  bool _doNotDisturbMode = false;
  final bool _offlineMode = false;
  bool _twoFactorEnabled = false;
  String _selectedLanguage = 'ru';
  String _selectedTheme = 'system';
  double _notificationFrequency = 0.5;

  final List<LanguageOption> _languages = [
    const LanguageOption(code: 'ru', name: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫'),
    const LanguageOption(code: 'en', name: 'English', flag: 'üá∫üá∏'),
    const LanguageOption(code: 'kk', name: '“ö–∞–∑–∞“õ—à–∞', flag: 'üá∞üáø'),
  ];

  final List<ThemeOption> _themes = [
    const ThemeOption(code: 'light', name: '–°–≤–µ—Ç–ª–∞—è', icon: Icons.light_mode),
    const ThemeOption(code: 'dark', name: '–¢—ë–º–Ω–∞—è', icon: Icons.dark_mode),
    const ThemeOption(
        code: 'system', name: '–°–∏—Å—Ç–µ–º–Ω–∞—è', icon: Icons.brightness_auto),
  ];

  @override
  Widget build(BuildContext context) => Scaffold(
        appBar: AppBar(
          title: const Text('–ù–∞—Å—Ç—Ä–æ–π–∫–∏'),
          backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        ),
        body: wrapWithSwipeBack(
          SingleChildScrollView(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                _buildProfileSection(),
                const SizedBox(height: 24),
                _buildAppearanceSection(),
                const SizedBox(height: 24),
                _buildNotificationsSection(),
                const SizedBox(height: 24),
                _buildPrivacySection(),
                const SizedBox(height: 24),
                _buildSecuritySection(),
                const SizedBox(height: 24),
                _buildMonetizationSection(),
                const SizedBox(height: 24),
                _buildAdvancedSection(),
                const SizedBox(height: 24),
                _buildAccountSection(),
                const SizedBox(height: 24),
                _buildAboutSection(),
              ],
            ),
          ),
        ),
      );

  Widget _buildProfileSection() => FadeInWidget(
        child: Card(
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  '–ü—Ä–æ—Ñ–∏–ª—å',
                  style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 16),
                Row(
                  children: [
                    const CircleAvatar(
                      radius: 30,
                      child: Text(
                        'U',
                        style: TextStyle(fontSize: 24),
                      ),
                    ),
                    const SizedBox(width: 16),
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          const Text(
                            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                            style: TextStyle(
                              fontSize: 16,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                          Text(
                            'user@example.com',
                            style: TextStyle(
                              color: Colors.grey[600],
                              fontSize: 14,
                            ),
                          ),
                        ],
                      ),
                    ),
                    IconButton(
                      onPressed: () {
                        // TODO: –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –ø—Ä–æ—Ñ–∏–ª—è
                      },
                      icon: const Icon(Icons.edit),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ),
      );

  Widget _buildAppearanceSection() => FadeInWidget(
        delay: const Duration(milliseconds: 100),
        child: Card(
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  '–í–Ω–µ—à–Ω–∏–π –≤–∏–¥',
                  style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 16),
                _buildLanguageSelector(),
                const SizedBox(height: 16),
                _buildThemeSelector(),
              ],
            ),
          ),
        ),
      );

  Widget _buildLanguageSelector() => Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            '–Ø–∑—ã–∫',
            style: TextStyle(fontSize: 16, fontWeight: FontWeight.w500),
          ),
          const SizedBox(height: 8),
          DropdownButtonFormField<String>(
            initialValue: _selectedLanguage,
            decoration: const InputDecoration(
              border: OutlineInputBorder(),
            ),
            items: _languages
                .map(
                  (language) => DropdownMenuItem(
                    value: language.code,
                    child: Row(
                      children: [
                        Text(language.flag,
                            style: const TextStyle(fontSize: 20)),
                        const SizedBox(width: 8),
                        Text(language.name),
                      ],
                    ),
                  ),
                )
                .toList(),
            onChanged: (value) {
              setState(() {
                _selectedLanguage = value!;
              });
              // TODO: –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            },
          ),
        ],
      );

  Widget _buildThemeSelector() => Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            '–¢–µ–º–∞',
            style: TextStyle(fontSize: 16, fontWeight: FontWeight.w500),
          ),
          const SizedBox(height: 8),
          DropdownButtonFormField<String>(
            initialValue: _selectedTheme,
            decoration: const InputDecoration(
              border: OutlineInputBorder(),
            ),
            items: _themes
                .map(
                  (theme) => DropdownMenuItem(
                    value: theme.code,
                    child: Row(
                      children: [
                        Icon(theme.icon),
                        const SizedBox(width: 8),
                        Text(theme.name),
                      ],
                    ),
                  ),
                )
                .toList(),
            onChanged: (value) {
              setState(() {
                _selectedTheme = value!;
              });
              // TODO: –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            },
          ),
        ],
      );

  Widget _buildNotificationsSection() => FadeInWidget(
        delay: const Duration(milliseconds: 200),
        child: Card(
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                  style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 16),
                _buildSwitchTile(
                  title: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                  subtitle: '–ü–æ–ª—É—á–∞—Ç—å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                  value: _notificationsEnabled,
                  onChanged: (value) {
                    setState(() {
                      _notificationsEnabled = value;
                    });
                  },
                ),
                _buildSwitchTile(
                  title: '–†–µ–∂–∏–º "–ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å"',
                  subtitle: '–û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                  value: _doNotDisturbMode,
                  onChanged: (value) {
                    setState(() {
                      _doNotDisturbMode = value;
                    });
                  },
                ),
                const SizedBox(height: 16),
                const Text(
                  '–ß–∞—Å—Ç–æ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
                  style: TextStyle(fontSize: 16, fontWeight: FontWeight.w500),
                ),
                Slider(
                  value: _notificationFrequency,
                  onChanged: (value) {
                    setState(() {
                      _notificationFrequency = value;
                    });
                  },
                  divisions: 4,
                  label: _getNotificationFrequencyLabel(_notificationFrequency),
                ),
              ],
            ),
          ),
        ),
      );

  Widget _buildPrivacySection() => FadeInWidget(
        delay: const Duration(milliseconds: 300),
        child: Card(
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  '–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å',
                  style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 16),
                _buildListTile(
                  title: '–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏',
                  subtitle: '–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π',
                  icon: Icons.privacy_tip,
                  onTap: () {
                    // TODO: –û—Ç–∫—Ä—ã—Ç—å –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
                  },
                ),
                _buildListTile(
                  title: '–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è',
                  subtitle: '–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏',
                  icon: Icons.description,
                  onTap: () {
                    // TODO: –û—Ç–∫—Ä—ã—Ç—å —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                  },
                ),
                _buildListTile(
                  title: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏',
                  subtitle: '–≠–∫—Å–ø–æ—Ä—Ç –∏ —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö',
                  icon: Icons.data_usage,
                  onTap: () {
                    // TODO: –û—Ç–∫—Ä—ã—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏
                  },
                ),
              ],
            ),
          ),
        ),
      );

  Widget _buildSecuritySection() => FadeInWidget(
        delay: const Duration(milliseconds: 400),
        child: Card(
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
                  style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 16),
                _buildSwitchTile(
                  title: '–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è',
                  subtitle: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–∞',
                  value: _twoFactorEnabled,
                  onChanged: (value) {
                    setState(() {
                      _twoFactorEnabled = value;
                    });
                    if (value) {
                      _showTwoFactorSetup();
                    }
                  },
                ),
                _buildListTile(
                  title: '–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å',
                  subtitle: '–û–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å –∞–∫–∫–∞—É–Ω—Ç–∞',
                  icon: Icons.lock,
                  onTap: _showChangePasswordDialog,
                ),
                _buildListTile(
                  title: '–ò—Å—Ç–æ—Ä–∏—è –≤—Ö–æ–¥–æ–≤',
                  subtitle: '–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–∞',
                  icon: Icons.history,
                  onTap: () {
                    // TODO: –û—Ç–∫—Ä—ã—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤—Ö–æ–¥–æ–≤
                  },
                ),
              ],
            ),
          ),
        ),
      );

  Widget _buildMonetizationSection() => FadeInWidget(
        delay: const Duration(milliseconds: 500),
        child: Card(
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  '–ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è',
                  style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 16),
                _buildListTile(
                  title: 'PRO –ü–æ–¥–ø–∏—Å–∫–∞',
                  subtitle: '–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤',
                  icon: Icons.star,
                  onTap: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder: (context) => const ProSubscriptionScreen(
                          userId:
                              'current_user_id', // TODO: –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        ),
                      ),
                    );
                  },
                ),
                _buildListTile(
                  title: '–†–µ–∫–ª–∞–º–∞',
                  subtitle: '–°–æ–∑–¥–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ',
                  icon: Icons.campaign,
                  onTap: _showCreateAdDialog,
                ),
                _buildListTile(
                  title: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Ö–æ–¥–æ–≤',
                  subtitle: '–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏',
                  icon: Icons.analytics,
                  onTap: () {
                    // TODO: –û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Ö–æ–¥–æ–≤
                  },
                ),
              ],
            ),
          ),
        ),
      );

  Widget _buildAccountSection() => FadeInWidget(
        delay: const Duration(milliseconds: 600),
        child: Card(
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  '–ê–∫–∫–∞—É–Ω—Ç',
                  style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 16),
                _buildListTile(
                  title: '–í—Ä–µ–º–µ–Ω–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å',
                  subtitle: '–í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç',
                  icon: Icons.pause_circle,
                  onTap: _showDeactivateDialog,
                ),
                _buildListTile(
                  title: '–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç',
                  subtitle: '–ë–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç',
                  icon: Icons.delete_forever,
                  textColor: Colors.red,
                  onTap: _showDeleteAccountDialog,
                ),
              ],
            ),
          ),
        ),
      );

  Widget _buildAboutSection() => FadeInWidget(
        delay: const Duration(milliseconds: 700),
        child: Card(
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  '–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
                  style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 16),
                _buildListTile(
                  title: '–í–µ—Ä—Å–∏—è',
                  subtitle: '1.0.0',
                  icon: Icons.info,
                  onTap: () {
                    // TODO: –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏
                  },
                ),
                _buildListTile(
                  title: '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å',
                  subtitle: '–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ',
                  icon: Icons.feedback,
                  onTap: () {
                    // TODO: –û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
                  },
                ),
                _buildListTile(
                  title: '–í—ã–π—Ç–∏',
                  subtitle: '–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞',
                  icon: Icons.logout,
                  textColor: Colors.red,
                  onTap: _showLogoutDialog,
                ),
              ],
            ),
          ),
        ),
      );

  Widget _buildSwitchTile({
    required String title,
    required String subtitle,
    required bool value,
    required ValueChanged<bool> onChanged,
  }) =>
      SwitchListTile(
        title: Text(title),
        subtitle: Text(subtitle),
        value: value,
        onChanged: onChanged,
      );

  Widget _buildListTile({
    required String title,
    required String subtitle,
    required IconData icon,
    required VoidCallback onTap,
    Color? textColor,
  }) =>
      ListTile(
        leading: Icon(icon, color: textColor),
        title: Text(title, style: TextStyle(color: textColor)),
        subtitle: Text(subtitle),
        onTap: onTap,
        trailing: const Icon(Icons.chevron_right),
      );

  String _getNotificationFrequencyLabel(double value) {
    if (value <= 0.2) return '–†–µ–¥–∫–æ';
    if (value <= 0.4) return '–ò–Ω–æ–≥–¥–∞';
    if (value <= 0.6) return '–û–±—ã—á–Ω–æ';
    if (value <= 0.8) return '–ß–∞—Å—Ç–æ';
    return '–í—Å–µ–≥–¥–∞';
  }

  void _showTwoFactorSetup() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ 2FA'),
        content: const Text(
          '–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('OK'),
          ),
        ],
      ),
    );
  }

  void _showChangePasswordDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å'),
        content: const Text(
          '–§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('OK'),
          ),
        ],
      ),
    );
  }

  void _showDeactivateDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞'),
        content: const Text(
          '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –í—ã —Å–º–æ–∂–µ—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ –ø–æ–∑–∂–µ.',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('–û—Ç–º–µ–Ω–∞'),
          ),
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              // TODO: –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
            },
            child: const Text('–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'),
          ),
        ],
      ),
    );
  }

  void _showDeleteAccountDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞'),
        content: const Text(
          '–í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ. –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞.',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('–û—Ç–º–µ–Ω–∞'),
          ),
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              // TODO: –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
            },
            style: TextButton.styleFrom(foregroundColor: Colors.red),
            child: const Text('–£–¥–∞–ª–∏—Ç—å'),
          ),
        ],
      ),
    );
  }

  void _showLogoutDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('–í—ã—Ö–æ–¥'),
        content: const Text('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('–û—Ç–º–µ–Ω–∞'),
          ),
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              // TODO: –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
            },
            child: const Text('–í—ã–π—Ç–∏'),
          ),
        ],
      ),
    );
  }

  void _showCreateAdDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('–°–æ–∑–¥–∞—Ç—å —Ä–µ–∫–ª–∞–º—É'),
        content: SizedBox(
          width: double.maxFinite,
          height: 400,
          child: CreateAdvertisementWidget(
            advertiserId:
                'current_user_id', // TODO: –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            onCreated: () {
              Navigator.pop(context);
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(
                  content: Text('–†–µ–∫–ª–∞–º–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!'),
                ),
              );
            },
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('–û—Ç–º–µ–Ω–∞'),
          ),
        ],
      ),
    );
  }

  /// –°–µ–∫—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
  Widget _buildAdvancedSection() => Card(
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const Text(
                '–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏',
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 16),

              // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
              ListTile(
                leading: const Icon(Icons.analytics, color: Colors.blue),
                title: const Text('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥'),
                subtitle: const Text('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –æ—à–∏–±–∫–∏, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è'),
                trailing: const Icon(Icons.arrow_forward_ios),
                onTap: () {
                  Navigator.of(context).push(
                    MaterialPageRoute(
                      builder: (context) => const TestingMonitoringScreen(),
                    ),
                  );
                },
              ),

              const Divider(),

              // –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
              ListTile(
                leading: const Icon(Icons.business, color: Colors.purple),
                title: const Text('–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π'),
                subtitle: const Text('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏ –∏ –∑–∞–∫–∞–∑–∞–º–∏'),
                trailing: const Icon(Icons.arrow_forward_ios),
                onTap: () {
                  Navigator.of(context).push(
                    MaterialPageRoute(
                      builder: (context) => const EventOrganizerScreen(),
                    ),
                  );
                },
              ),

              const Divider(),

              // –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
              ListTile(
                leading: const Icon(Icons.calendar_today, color: Colors.indigo),
                title: const Text('–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'),
                subtitle: const Text('–°–æ–±—ã—Ç–∏—è, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'),
                trailing: const Icon(Icons.arrow_forward_ios),
                onTap: () {
                  Navigator.of(context).push(
                    MaterialPageRoute(
                      builder: (context) => const CalendarRemindersScreen(),
                    ),
                  );
                },
              ),
            ],
          ),
        ),
      );
}

/// –û–ø—Ü–∏—è —è–∑—ã–∫–∞
class LanguageOption {
  const LanguageOption({
    required this.code,
    required this.name,
    required this.flag,
  });

  final String code;
  final String name;
  final String flag;
}

/// –û–ø—Ü–∏—è —Ç–µ–º—ã
class ThemeOption {
  const ThemeOption({
    required this.code,
    required this.name,
    required this.icon,
  });

  final String code;
  final String name;
  final IconData icon;
}

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';

import '../core/navigation/back_utils.dart';
import '../test_data/specialist_test_data.dart';

class TestSearchScreen extends ConsumerStatefulWidget {
  const TestSearchScreen({super.key});

  @override
  ConsumerState<TestSearchScreen> createState() => _TestSearchScreenState();
}

class _TestSearchScreenState extends ConsumerState<TestSearchScreen> {
  bool _isLoading = false;
  String _status = '';

  @override
  Widget build(BuildContext context) => Scaffold(
        appBar: BackUtils.buildAppBar(
          context,
          title: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞',
        ),
        body: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              const Text(
                '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏',
                style: TextStyle(
                  fontSize: 20,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 20),
              ElevatedButton.icon(
                onPressed: _isLoading ? null : _createTestData,
                icon: const Icon(Icons.add),
                label: const Text('–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤'),
                style: ElevatedButton.styleFrom(
                  padding: const EdgeInsets.all(16),
                ),
              ),
              const SizedBox(height: 12),
              ElevatedButton.icon(
                onPressed: _isLoading ? null : _clearTestData,
                icon: const Icon(Icons.clear),
                label: const Text('–û—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.red,
                  foregroundColor: Colors.white,
                  padding: const EdgeInsets.all(16),
                ),
              ),
              const SizedBox(height: 12),
              ElevatedButton.icon(
                onPressed: _isLoading ? null : _getStats,
                icon: const Icon(Icons.analytics),
                label: const Text('–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.blue,
                  foregroundColor: Colors.white,
                  padding: const EdgeInsets.all(16),
                ),
              ),
              const SizedBox(height: 20),
              if (_isLoading)
                const Center(child: CircularProgressIndicator())
              else if (_status.isNotEmpty)
                Container(
                  padding: const EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: Colors.grey.shade100,
                    borderRadius: BorderRadius.circular(8),
                    border: Border.all(color: Colors.grey.shade300),
                  ),
                  child: Text(
                    _status,
                    style: const TextStyle(fontSize: 14),
                  ),
                ),
              const Spacer(),
              ElevatedButton.icon(
                onPressed: () {
                  context.push('/search');
                },
                icon: const Icon(Icons.search),
                label: const Text('–û—Ç–∫—Ä—ã—Ç—å –ø–æ–∏—Å–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.green,
                  foregroundColor: Colors.white,
                  padding: const EdgeInsets.all(16),
                ),
              ),
            ],
          ),
        ),
      );

  Future<void> _createTestData() async {
    setState(() {
      _isLoading = true;
      _status = '–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...';
    });

    try {
      await SpecialistTestData.createTestSpecialists();
      setState(() {
        _status = '‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!';
      });
    } catch (e) {
      setState(() {
        _status = '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: $e';
      });
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  Future<void> _clearTestData() async {
    setState(() {
      _isLoading = true;
      _status = '–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...';
    });

    try {
      await SpecialistTestData.clearTestData();
      setState(() {
        _status = '‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã!';
      });
    } catch (e) {
      setState(() {
        _status = '‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: $e';
      });
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  Future<void> _getStats() async {
    setState(() {
      _isLoading = true;
      _status = '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...';
    });

    try {
      final stats = await SpecialistTestData.getTestDataStats();
      setState(() {
        _status = '''
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
–í—Å–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤: ${stats['totalCount']}
–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ${(stats['averageRating'] as double).toStringAsFixed(1)}
–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${(stats['averagePrice'] as double).toInt()}‚ÇΩ
–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: ${stats['verifiedCount']}
–û–Ω–ª–∞–π–Ω: ${stats['onlineCount']}

üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:
${(stats['categories'] as Map<String, int>).entries.map((e) => '${e.key}: ${e.value}').join('\n')}

üèôÔ∏è –ì–æ—Ä–æ–¥–∞:
${(stats['cities'] as Map<String, int>).entries.map((e) => '${e.key}: ${e.value}').join('\n')}
        ''';
      });
    } catch (e) {
      setState(() {
        _status = '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: $e';
      });
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }
}

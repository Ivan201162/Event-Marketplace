import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';

/// –≠–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
class SplashScreen extends ConsumerStatefulWidget {
  const SplashScreen({super.key});

  @override
  ConsumerState<SplashScreen> createState() => _SplashScreenState();
}

class _SplashScreenState extends ConsumerState<SplashScreen> with TickerProviderStateMixin {
  late AnimationController _logoController;
  late AnimationController _progressController;
  late Animation<double> _logoScaleAnimation;
  late Animation<double> _logoFadeAnimation;
  late Animation<double> _progressAnimation;

  double _progress = 0;
  String _statusText = '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...';
  bool _showRetryButton = false;

  @override
  void initState() {
    super.initState();
    _initializeAnimations();
    _initializeAppWithTimeout();
  }

  Future<void> _initializeAppWithTimeout() async {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –≤ 10 —Å–µ–∫—É–Ω–¥
    final timeout = Future.delayed(const Duration(seconds: 10));
    final initialization = _initializeApp();

    try {
      await Future.any([initialization, timeout]);
    } catch (e) {
      // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç
      if (mounted) {
        setState(() {
          _statusText = '–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, —á–µ–º –æ–∂–∏–¥–∞–ª–æ—Å—å';
          _showRetryButton = true;
        });
      }
    }
  }

  void _initializeAnimations() {
    _logoController = AnimationController(
      duration: const Duration(milliseconds: 1500),
      vsync: this,
    );

    _progressController = AnimationController(
      duration: const Duration(milliseconds: 2000),
      vsync: this,
    );

    _logoScaleAnimation = Tween<double>(
      begin: 0,
      end: 1,
    ).animate(
      CurvedAnimation(
        parent: _logoController,
        curve: Curves.elasticOut,
      ),
    );

    _logoFadeAnimation = Tween<double>(
      begin: 0,
      end: 1,
    ).animate(
      CurvedAnimation(
        parent: _logoController,
        curve: Curves.easeInOut,
      ),
    );

    _progressAnimation = Tween<double>(
      begin: 0,
      end: 1,
    ).animate(
      CurvedAnimation(
        parent: _progressController,
        curve: Curves.easeInOut,
      ),
    );

    _logoController.forward();
  }

  Future<void> _initializeApp() async {
    try {
      // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      setState(() {
        _statusText = '–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...';
      });
      await _updateProgress(0.3);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      setState(() {
        _statusText = '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...';
      });
      await _updateProgress(0.7);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      final user = FirebaseAuth.instance.currentUser;
      await _updateProgress(0.9);

      // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
      setState(() {
        _statusText = '–ì–æ—Ç–æ–≤–æ!';
      });
      await _updateProgress(1);

      await Future.delayed(const Duration(milliseconds: 500));

      if (mounted) {
        _navigateBasedOnAuth(user);
      }
    } on Exception catch (e) {
      debugPrint('üö® SplashScreen error: $e');
      setState(() {
        _statusText = '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: $e';
      });

      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç–∫—Ä–∞–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      await Future.delayed(const Duration(seconds: 2));
      if (mounted) {
        _navigateToAuthScreen();
      }
    }
  }

  Future<void> _updateProgress(double progress) async {
    setState(() {
      _progress = progress;
    });
    await Future.delayed(const Duration(milliseconds: 200));
  }

  Future<void> _preloadData() async {
    try {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      await Future.delayed(const Duration(milliseconds: 300));
    } on Exception {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
    }
  }

  void _navigateBasedOnAuth(User? user) {
    if (user != null) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
      context.go('/main');
    } else {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      context.go('/auth');
    }
  }

  void _navigateToMainScreen() {
    context.go('/main');
  }

  void _navigateToAuthScreen() {
    context.go('/auth');
  }

  @override
  void dispose() {
    _logoController.dispose();
    _progressController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    return Scaffold(
      backgroundColor: Colors.blue,
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç
            const Text(
              '‚úÖ App started successfully',
              style: TextStyle(
                color: Colors.white,
                fontSize: 24,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 20),
            Text(
              'Status: $_statusText',
              style: const TextStyle(
                color: Colors.white,
                fontSize: 16,
              ),
            ),
            const SizedBox(height: 10),
            Text(
              'Progress: ${(_progress * 100).toInt()}%',
              style: const TextStyle(
                color: Colors.white,
                fontSize: 16,
              ),
            ),
            const SizedBox(height: 20),
            // –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            Container(
              width: 200,
              height: 4,
              decoration: BoxDecoration(
                color: Colors.white.withValues(alpha: 0.3),
                borderRadius: BorderRadius.circular(2),
              ),
              child: FractionallySizedBox(
                alignment: Alignment.centerLeft,
                widthFactor: _progress,
                child: Container(
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.circular(2),
                  ),
                ),
              ),
            ),
            const SizedBox(height: 20),
            // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
            ElevatedButton(
              onPressed: () {
                debugPrint('üöÄ Manual navigation to auth screen');
                _navigateToAuthScreen();
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.white,
                foregroundColor: Colors.blue,
              ),
              child: const Text('–ü–µ—Ä–µ–π—Ç–∏ –∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'),
            ),
          ],
        ),
      ),
    );
  }
}

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–ø–ª—ç—à-—ç–∫—Ä–∞–Ω–∞ (–º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å StateNotifierProvider)
final splashStateProvider =
    NotifierProvider<SplashStateNotifier, SplashState>(SplashStateNotifier.new);

class SplashState {
  const SplashState({
    this.isInitialized = false,
    this.progress = 0.0,
    this.statusText = '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...',
    this.error,
  });

  final bool isInitialized;
  final double progress;
  final String statusText;
  final String? error;

  SplashState copyWith({
    bool? isInitialized,
    double? progress,
    String? statusText,
    String? error,
  }) =>
      SplashState(
        isInitialized: isInitialized ?? this.isInitialized,
        progress: progress ?? this.progress,
        statusText: statusText ?? this.statusText,
        error: error ?? this.error,
      );
}

class SplashStateNotifier extends Notifier<SplashState> {
  @override
  SplashState build() => const SplashState();

  void updateProgress(double progress) {
    state = state.copyWith(progress: progress);
  }

  void updateStatus(String statusText) {
    state = state.copyWith(statusText: statusText);
  }

  void setInitialized() {
    state = state.copyWith(isInitialized: true);
  }

  void setError(String error) {
    state = state.copyWith(error: error);
  }
}

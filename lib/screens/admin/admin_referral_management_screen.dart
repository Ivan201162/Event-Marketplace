import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';

import '../../services/marketing_admin_service.dart';

class AdminReferralManagementScreen extends StatefulWidget {
  const AdminReferralManagementScreen({super.key});

  @override
  State<AdminReferralManagementScreen> createState() => _AdminReferralManagementScreenState();
}

class _AdminReferralManagementScreenState extends State<AdminReferralManagementScreen> {
  final MarketingAdminService _marketingService = MarketingAdminService();
  Map<String, dynamic> _referralStats = {};
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _loadReferralStats();
  }

  Future<void> _loadReferralStats() async {
    try {
      final stats = await _marketingService.getReferralStats();
      setState(() {
        _referralStats = stats;
        _isLoading = false;
      });
    } catch (e) {
      setState(() {
        _isLoading = false;
      });
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: $e')),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏'),
        backgroundColor: Colors.purple,
        foregroundColor: Colors.white,
        actions: [
          IconButton(
            icon: const Icon(Icons.refresh),
            onPressed: _loadReferralStats,
          ),
        ],
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : SingleChildScrollView(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  _buildStatsCard(),
                  const SizedBox(height: 16),
                  _buildTopReferrersCard(),
                  const SizedBox(height: 16),
                  _buildReferralSettingsCard(),
                  const SizedBox(height: 16),
                  _buildRecentReferralsCard(),
                ],
              ),
            ),
    );
  }

  Widget _buildStatsCard() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 16),
            Row(
              children: [
                Expanded(
                  child: _buildStatItem(
                    '–í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤',
                    '${_referralStats['totalReferrals'] ?? 0}',
                    Icons.group,
                    Colors.blue,
                  ),
                ),
                Expanded(
                  child: _buildStatItem(
                    '–ê–∫—Ç–∏–≤–Ω—ã–µ',
                    '${_referralStats['activeReferrals'] ?? 0}',
                    Icons.check_circle,
                    Colors.green,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 12),
            Row(
              children: [
                Expanded(
                  child: _buildStatItem(
                    '–ó–∞ –º–µ—Å—è—Ü',
                    '${_referralStats['thisMonthReferrals'] ?? 0}',
                    Icons.calendar_month,
                    Colors.orange,
                  ),
                ),
                Expanded(
                  child: _buildStatItem(
                    '–ö–æ–Ω–≤–µ—Ä—Å–∏—è',
                    '${_calculateConversionRate()}%',
                    Icons.trending_up,
                    Colors.purple,
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildStatItem(String label, String value, IconData icon, Color color) {
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: color.withOpacity(0.3)),
      ),
      child: Column(
        children: [
          Icon(icon, color: color, size: 24),
          const SizedBox(height: 8),
          Text(
            value,
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
              color: color,
            ),
          ),
          Text(
            label,
            style: TextStyle(
              fontSize: 12,
              color: Colors.grey[600],
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  Widget _buildTopReferrersCard() {
    final topReferrers = _referralStats['topReferrers'] as List? ?? [];

    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'üèÜ –¢–æ–ø —Ä–µ—Ñ–µ—Ä–µ—Ä—ã',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 16),
            if (topReferrers.isEmpty)
              const Text('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞—Ö')
            else
              ListView.builder(
                shrinkWrap: true,
                physics: const NeverScrollableScrollPhysics(),
                itemCount: topReferrers.length,
                itemBuilder: (context, index) {
                  final referrer = topReferrers[index];
                  return ListTile(
                    leading: CircleAvatar(
                      backgroundColor: Colors.purple,
                      child: Text(
                        '${index + 1}',
                        style: const TextStyle(
                          color: Colors.white,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                    title: Text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${referrer['userId']}'),
                    subtitle: Text('–ü—Ä–∏–≥–ª–∞—Å–∏–ª ${referrer['invitedCount']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'),
                    trailing: Text(
                      '${referrer['bonusesActivated']} –±–æ–Ω—É—Å–æ–≤',
                      style: const TextStyle(fontWeight: FontWeight.bold),
                    ),
                  );
                },
              ),
          ],
        ),
      ),
    );
  }

  Widget _buildReferralSettingsCard() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 16),
            ListTile(
              leading: const Icon(Icons.settings),
              title: const Text('–ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ'),
              subtitle: const Text('5 –¥–Ω–µ–π Premium –¥–ª—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞, 3 –¥–Ω—è –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞'),
              trailing: const Icon(Icons.edit),
              onTap: () => _showBonusSettingsDialog(),
            ),
            ListTile(
              leading: const Icon(Icons.star),
              title: const Text('–ù–∞–≥—Ä–∞–¥—ã –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è'),
              subtitle: const Text('5 –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π = 30 –¥–Ω–µ–π Premium, 10 = 1 –º–µ—Å—è—Ü PRO'),
              trailing: const Icon(Icons.edit),
              onTap: () => _showRewardsSettingsDialog(),
            ),
            ListTile(
              leading: const Icon(Icons.toggle_on),
              title: const Text('–°—Ç–∞—Ç—É—Å –ø—Ä–æ–≥—Ä–∞–º–º—ã'),
              subtitle: const Text('–ê–∫—Ç–∏–≤–Ω–∞'),
              trailing: Switch(
                value: true,
                onChanged: (value) => _toggleReferralProgram(value),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildRecentReferralsCard() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 16),
            StreamBuilder<QuerySnapshot>(
              stream: FirebaseFirestore.instance
                  .collection('referrals')
                  .orderBy('createdAt', descending: true)
                  .limit(10)
                  .snapshots(),
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return const Center(child: CircularProgressIndicator());
                }

                if (snapshot.hasError) {
                  return Text('–û—à–∏–±–∫–∞: ${snapshot.error}');
                }

                final referrals = snapshot.data?.docs ?? [];
                if (referrals.isEmpty) {
                  return const Text('–ù–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
                }

                return ListView.builder(
                  shrinkWrap: true,
                  physics: const NeverScrollableScrollPhysics(),
                  itemCount: referrals.length,
                  itemBuilder: (context, index) {
                    final referralData = referrals[index].data() as Map<String, dynamic>;
                    return ListTile(
                      leading: CircleAvatar(
                        backgroundColor: _getReferralStatusColor(referralData['status']),
                        child: Icon(
                          _getReferralStatusIcon(referralData['status']),
                          color: Colors.white,
                          size: 16,
                        ),
                      ),
                      title: Text('–†–µ—Ñ–µ—Ä–∞–ª –æ—Ç ${referralData['referrerId']}'),
                      subtitle: Text(
                        '–ö–æ–¥: ${referralData['referralCode']} ‚Ä¢ ${_formatTimestamp(referralData['createdAt'])}',
                      ),
                      trailing: Text(
                        _getReferralStatusName(referralData['status']),
                        style: TextStyle(
                          color: _getReferralStatusColor(referralData['status']),
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    );
                  },
                );
              },
            ),
          ],
        ),
      ),
    );
  }

  void _showBonusSettingsDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ–Ω—É—Å–æ–≤'),
        content: const Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextField(
              decoration: InputDecoration(
                labelText: '–ë–æ–Ω—É—Å –¥–ª—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ (–¥–Ω–∏ Premium)',
                border: OutlineInputBorder(),
              ),
              keyboardType: TextInputType.number,
            ),
            SizedBox(height: 16),
            TextField(
              decoration: InputDecoration(
                labelText: '–ë–æ–Ω—É—Å –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞ (–¥–Ω–∏ Premium)',
                border: OutlineInputBorder(),
              ),
              keyboardType: TextInputType.number,
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('–û—Ç–º–µ–Ω–∞'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ–Ω—É—Å–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')),
              );
            },
            child: const Text('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'),
          ),
        ],
      ),
    );
  }

  void _showRewardsSettingsDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–≥—Ä–∞–¥'),
        content: const Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextField(
              decoration: InputDecoration(
                labelText: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –¥–ª—è Premium (–¥–Ω–∏)',
                border: OutlineInputBorder(),
              ),
              keyboardType: TextInputType.number,
            ),
            SizedBox(height: 16),
            TextField(
              decoration: InputDecoration(
                labelText: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –¥–ª—è PRO (–º–µ—Å—è—Ü—ã)',
                border: OutlineInputBorder(),
              ),
              keyboardType: TextInputType.number,
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('–û—Ç–º–µ–Ω–∞'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–≥—Ä–∞–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')),
              );
            },
            child: const Text('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'),
          ),
        ],
      ),
    );
  }

  void _toggleReferralProgram(bool isActive) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ ${isActive ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞' : '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞'}'),
      ),
    );
  }

  String _calculateConversionRate() {
    final total = _referralStats['totalReferrals'] ?? 0;
    final active = _referralStats['activeReferrals'] ?? 0;
    if (total == 0) return '0';
    return ((active / total) * 100).toStringAsFixed(1);
  }

  Color _getReferralStatusColor(String status) {
    switch (status) {
      case 'completed':
        return Colors.green;
      case 'pending':
        return Colors.orange;
      case 'expired':
        return Colors.red;
      case 'cancelled':
        return Colors.grey;
      default:
        return Colors.blue;
    }
  }

  IconData _getReferralStatusIcon(String status) {
    switch (status) {
      case 'completed':
        return Icons.check;
      case 'pending':
        return Icons.schedule;
      case 'expired':
        return Icons.expired;
      case 'cancelled':
        return Icons.cancel;
      default:
        return Icons.info;
    }
  }

  String _getReferralStatusName(String status) {
    switch (status) {
      case 'completed':
        return '–ó–∞–≤–µ—Ä—à–µ–Ω';
      case 'pending':
        return '–í –æ–∂–∏–¥–∞–Ω–∏–∏';
      case 'expired':
        return '–ò—Å—Ç–µ–∫';
      case 'cancelled':
        return '–û—Ç–º–µ–Ω–µ–Ω';
      default:
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  }

  String _formatTimestamp(dynamic timestamp) {
    if (timestamp is Timestamp) {
      final date = timestamp.toDate();
      return '${date.day}.${date.month}.${date.year}';
    }
    return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  }
}
